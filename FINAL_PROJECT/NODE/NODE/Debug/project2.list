
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  0800bd08  0800bd08  0001bd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c998  0800c998  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c998  0800c998  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c998  0800c998  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c998  0800c998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c9a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200001f0  0800cb90  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  0800cb90  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbe1  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269c  00000000  00000000  0002de3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  000304e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ed  00000000  00000000  000311b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001974d  00000000  00000000  00031b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001190e  00000000  00000000  0004b2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c3e3  00000000  00000000  0005cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d90  00000000  00000000  000e8fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000edd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bcec 	.word	0x0800bcec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800bcec 	.word	0x0800bcec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <getLatGps>:


#include "gps.h"

float getLatGps(uint8_t* dataGps)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b0a2      	sub	sp, #136	; 0x88
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	char copyDataGps[80];
	char str_lat[10];
	char hourLat[3], minLat[8];
	float latGps;
	char* ptr = strstr((char *)dataGps, "GPRMC");
 8001188:	495c      	ldr	r1, [pc, #368]	; (80012fc <getLatGps+0x17c>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f006 fe37 	bl	8007dfe <strstr>
 8001190:	67b8      	str	r0, [r7, #120]	; 0x78
	if (ptr != NULL) {
 8001192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80ab 	beq.w	80012f0 <getLatGps+0x170>
		int posDataGps = ptr - (char *)dataGps;
 800119a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	677b      	str	r3, [r7, #116]	; 0x74
		int flagComma = 0, flag = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int i;
		for (i = 0; i<80 && dataGps[posDataGps + i] != '\0'; ++i) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011b2:	e00f      	b.n	80011d4 <getLatGps+0x54>
			copyDataGps[i] = dataGps[posDataGps + i];
 80011b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80011b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011b8:	4413      	add	r3, r2
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	7819      	ldrb	r1, [r3, #0]
 80011c2:	f107 0220 	add.w	r2, r7, #32
 80011c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011c8:	4413      	add	r3, r2
 80011ca:	460a      	mov	r2, r1
 80011cc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i<80 && dataGps[posDataGps + i] != '\0'; ++i) {
 80011ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011d0:	3301      	adds	r3, #1
 80011d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011d6:	2b4f      	cmp	r3, #79	; 0x4f
 80011d8:	dc08      	bgt.n	80011ec <getLatGps+0x6c>
 80011da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80011dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011de:	4413      	add	r3, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e3      	bne.n	80011b4 <getLatGps+0x34>
		}
		copyDataGps[i] = '\0';
 80011ec:	f107 0220 	add.w	r2, r7, #32
 80011f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011f2:	4413      	add	r3, r2
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		while (flagComma != 2) {
 80011f8:	e011      	b.n	800121e <getLatGps+0x9e>
			if (copyDataGps[flag] == ',') {
 80011fa:	f107 0220 	add.w	r2, r7, #32
 80011fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b2c      	cmp	r3, #44	; 0x2c
 8001208:	d104      	bne.n	8001214 <getLatGps+0x94>
				flagComma += 1;
 800120a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800120e:	3301      	adds	r3, #1
 8001210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
			flag += 1;
 8001214:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while (flagComma != 2) {
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	2b02      	cmp	r3, #2
 8001224:	d1e9      	bne.n	80011fa <getLatGps+0x7a>
		}
		//flagComma = 2, behind 'A'
		if (copyDataGps[flag] == 'A') {
 8001226:	f107 0220 	add.w	r2, r7, #32
 800122a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b41      	cmp	r3, #65	; 0x41
 8001234:	d159      	bne.n	80012ea <getLatGps+0x16a>
			while (flagComma != 3) {
 8001236:	e011      	b.n	800125c <getLatGps+0xdc>
				if (copyDataGps[flag] == ',') {
 8001238:	f107 0220 	add.w	r2, r7, #32
 800123c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b2c      	cmp	r3, #44	; 0x2c
 8001246:	d104      	bne.n	8001252 <getLatGps+0xd2>
					flagComma += 1;
 8001248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				}
				flag += 1;
 8001252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while (flagComma != 3) {
 800125c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001260:	2b03      	cmp	r3, #3
 8001262:	d1e9      	bne.n	8001238 <getLatGps+0xb8>
			}
			strncpy(str_lat, copyDataGps + flag, sizeof(str_lat));
 8001264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001268:	f107 0220 	add.w	r2, r7, #32
 800126c:	18d1      	adds	r1, r2, r3
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	220a      	movs	r2, #10
 8001274:	4618      	mov	r0, r3
 8001276:	f006 fdaf 	bl	8007dd8 <strncpy>
			str_lat[9]='\0';
 800127a:	2300      	movs	r3, #0
 800127c:	777b      	strb	r3, [r7, #29]
			strncpy(hourLat, str_lat, 2);
 800127e:	f107 0114 	add.w	r1, r7, #20
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	2202      	movs	r2, #2
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fda5 	bl	8007dd8 <strncpy>
			hourLat[2]='\0';
 800128e:	2300      	movs	r3, #0
 8001290:	74bb      	strb	r3, [r7, #18]
			strncpy(minLat, str_lat+2, 7);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	3302      	adds	r3, #2
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	2207      	movs	r2, #7
 800129e:	4619      	mov	r1, r3
 80012a0:	f006 fd9a 	bl	8007dd8 <strncpy>
			minLat[7]='\0';
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
			latGps = atof(hourLat) + (atof(minLat)/60);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 ffad 	bl	800620c <atof>
 80012b2:	4604      	mov	r4, r0
 80012b4:	460d      	mov	r5, r1
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 ffa6 	bl	800620c <atof>
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <getLatGps+0x180>)
 80012c6:	f7ff fa31 	bl	800072c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7fe ff4b 	bl	800016c <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fbf3 	bl	8000ac8 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	673b      	str	r3, [r7, #112]	; 0x70
			return latGps;
 80012e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012e8:	e004      	b.n	80012f4 <getLatGps+0x174>
		}
		else{return 0;}
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e001      	b.n	80012f4 <getLatGps+0x174>
	}
	else{return 0;}
 80012f0:	f04f 0300 	mov.w	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3788      	adds	r7, #136	; 0x88
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	0800bd08 	.word	0x0800bd08
 8001300:	404e0000 	.word	0x404e0000

08001304 <getLongGps>:



float getLongGps(uint8_t* dataGps)
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b0a2      	sub	sp, #136	; 0x88
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	char copyDataGps[80];
	char str_long[11];
	char hourLong[4], minLong[8];
	float longGps;
	char* ptr = strstr((char *)dataGps, "GPRMC");
 800130c:	495c      	ldr	r1, [pc, #368]	; (8001480 <getLongGps+0x17c>)
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f006 fd75 	bl	8007dfe <strstr>
 8001314:	67b8      	str	r0, [r7, #120]	; 0x78
	if (ptr != NULL) {
 8001316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ab 	beq.w	8001474 <getLongGps+0x170>
		int posDataGps = ptr - (char *)dataGps;
 800131e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	677b      	str	r3, [r7, #116]	; 0x74
		int flagComma = 0, flag = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int i;
		for (i = 0; i<80 && dataGps[posDataGps + i] != '\0'; ++i) {
 8001332:	2300      	movs	r3, #0
 8001334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001336:	e00f      	b.n	8001358 <getLongGps+0x54>
			copyDataGps[i] = dataGps[posDataGps + i];
 8001338:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800133a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800133c:	4413      	add	r3, r2
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	7819      	ldrb	r1, [r3, #0]
 8001346:	f107 0220 	add.w	r2, r7, #32
 800134a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800134c:	4413      	add	r3, r2
 800134e:	460a      	mov	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
		for (i = 0; i<80 && dataGps[posDataGps + i] != '\0'; ++i) {
 8001352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001354:	3301      	adds	r3, #1
 8001356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800135a:	2b4f      	cmp	r3, #79	; 0x4f
 800135c:	dc08      	bgt.n	8001370 <getLongGps+0x6c>
 800135e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001362:	4413      	add	r3, r2
 8001364:	461a      	mov	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1e3      	bne.n	8001338 <getLongGps+0x34>
		}
		copyDataGps[i] = '\0';
 8001370:	f107 0220 	add.w	r2, r7, #32
 8001374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001376:	4413      	add	r3, r2
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
		while (flagComma != 2) {
 800137c:	e011      	b.n	80013a2 <getLongGps+0x9e>
			if (copyDataGps[flag] == ',') {
 800137e:	f107 0220 	add.w	r2, r7, #32
 8001382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2c      	cmp	r3, #44	; 0x2c
 800138c:	d104      	bne.n	8001398 <getLongGps+0x94>
				flagComma += 1;
 800138e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
			flag += 1;
 8001398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800139c:	3301      	adds	r3, #1
 800139e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while (flagComma != 2) {
 80013a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d1e9      	bne.n	800137e <getLongGps+0x7a>
		}
		//flagComma = 2, behind 'A'
		if (copyDataGps[flag] == 'A') {
 80013aa:	f107 0220 	add.w	r2, r7, #32
 80013ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b41      	cmp	r3, #65	; 0x41
 80013b8:	d159      	bne.n	800146e <getLongGps+0x16a>
			while (flagComma != 5) {
 80013ba:	e011      	b.n	80013e0 <getLongGps+0xdc>
				if (copyDataGps[flag] == ',') {
 80013bc:	f107 0220 	add.w	r2, r7, #32
 80013c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b2c      	cmp	r3, #44	; 0x2c
 80013ca:	d104      	bne.n	80013d6 <getLongGps+0xd2>
					flagComma += 1;
 80013cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d0:	3301      	adds	r3, #1
 80013d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				}
				flag += 1;
 80013d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013da:	3301      	adds	r3, #1
 80013dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while (flagComma != 5) {
 80013e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d1e9      	bne.n	80013bc <getLongGps+0xb8>
			}
			strncpy(str_long, copyDataGps + flag, sizeof(str_long));
 80013e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013ec:	f107 0220 	add.w	r2, r7, #32
 80013f0:	18d1      	adds	r1, r2, r3
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	220b      	movs	r2, #11
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 fced 	bl	8007dd8 <strncpy>
			str_long[10]='\0';
 80013fe:	2300      	movs	r3, #0
 8001400:	77bb      	strb	r3, [r7, #30]
			strncpy(hourLong, str_long, 3);
 8001402:	f107 0114 	add.w	r1, r7, #20
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	2203      	movs	r2, #3
 800140c:	4618      	mov	r0, r3
 800140e:	f006 fce3 	bl	8007dd8 <strncpy>
			hourLong[3]='\0';
 8001412:	2300      	movs	r3, #0
 8001414:	74fb      	strb	r3, [r7, #19]
			strncpy(minLong, str_long + 3, 7);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	3303      	adds	r3, #3
 800141c:	f107 0008 	add.w	r0, r7, #8
 8001420:	2207      	movs	r2, #7
 8001422:	4619      	mov	r1, r3
 8001424:	f006 fcd8 	bl	8007dd8 <strncpy>
			minLong[7]='\0';
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
			longGps = atof(hourLong) + (atof(minLong)/60);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f004 feeb 	bl	800620c <atof>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fee4 	bl	800620c <atof>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <getLongGps+0x180>)
 800144a:	f7ff f96f 	bl	800072c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7fe fe89 	bl	800016c <__adddf3>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb31 	bl	8000ac8 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	673b      	str	r3, [r7, #112]	; 0x70
			return longGps;
 800146a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800146c:	e004      	b.n	8001478 <getLongGps+0x174>
		}
		else{return 0;}
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e001      	b.n	8001478 <getLongGps+0x174>
	}
	else{return 0;}
 8001474:	f04f 0300 	mov.w	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3788      	adds	r7, #136	; 0x88
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	0800bd08 	.word	0x0800bd08
 8001484:	404e0000 	.word	0x404e0000

08001488 <main>:
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_ADC1_Init(void);

int main(void)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 800148e:	af00      	add	r7, sp, #0

  HAL_Init();
 8001490:	f001 fc00 	bl	8002c94 <HAL_Init>
  SystemClock_Config();
 8001494:	f000 fa9c 	bl	80019d0 <SystemClock_Config>

  MX_GPIO_Init();
 8001498:	f000 fbfa 	bl	8001c90 <MX_GPIO_Init>
  MX_DMA_Init();
 800149c:	f000 fbd2 	bl	8001c44 <MX_DMA_Init>
  MX_I2C1_Init();
 80014a0:	f000 fb24 	bl	8001aec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014a4:	f000 fb50 	bl	8001b48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014a8:	f000 fb78 	bl	8001b9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014ac:	f000 fba0 	bl	8001bf0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80014b0:	f000 fade 	bl	8001a70 <MX_ADC1_Init>
  /*
  	-----STORE THE DATA TRANSMITTED FROM PMS5003 INTO dataPms-----
  */
    uint8_t dataPms[64];
    uint8_t copyDataPms[64];
    HAL_UART_Receive_DMA(&huart1, dataPms, sizeof(dataPms));
 80014b4:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	4619      	mov	r1, r3
 80014bc:	48d1      	ldr	r0, [pc, #836]	; (8001804 <main+0x37c>)
 80014be:	f004 fb3c 	bl	8005b3a <HAL_UART_Receive_DMA>
    HAL_Delay(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c6:	f001 fc47 	bl	8002d58 <HAL_Delay>
  /*
  	-----STORE DATA TRANSMITTED FROM L80-R INTO dataGps-----
  */
    uint8_t dataGps[500];
    uint8_t copyDataGps[500];
    HAL_UART_Receive_DMA(&huart2, dataGps, sizeof(dataGps));
 80014ca:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80014ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014d2:	4619      	mov	r1, r3
 80014d4:	48cc      	ldr	r0, [pc, #816]	; (8001808 <main+0x380>)
 80014d6:	f004 fb30 	bl	8005b3a <HAL_UART_Receive_DMA>
    HAL_Delay(500);
 80014da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014de:	f001 fc3b 	bl	8002d58 <HAL_Delay>

  /*
  	-----INITIALIZE OLED-----
  */
    SSD1306_Init();
 80014e2:	f000 fd75 	bl	8001fd0 <SSD1306_Init>
    HAL_Delay(100);
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f001 fc36 	bl	8002d58 <HAL_Delay>
    oled_init();
 80014ec:	f001 f834 	bl	8002558 <oled_init>
    while (1)
    {
  /*
  -----READ THE VALUE OF TEMP, HUMI AND PM2.5----
  */
  	  SHT31_ReadTempHumidity(&temperature, &humidity);
 80014f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80014f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fbfc 	bl	8001cf8 <SHT31_ReadTempHumidity>
  	  pm2_5=getPM25(dataPms, copyDataPms, sizeof(dataPms));
 8001500:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8001504:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001508:	2240      	movs	r2, #64	; 0x40
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc5e 	bl	8001dcc <getPM25>
 8001510:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520

  	  co=getCOValue();
 8001514:	f000 fcd4 	bl	8001ec0 <getCOValue>
 8001518:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800151c:	e9c3 0100 	strd	r0, r1, [r3]

  	  sprintf(strTemp,"%.1f",temperature);
 8001520:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001524:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff7c 	bl	8000428 <__aeabi_f2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001538:	49b4      	ldr	r1, [pc, #720]	; (800180c <main+0x384>)
 800153a:	f006 fbc1 	bl	8007cc0 <siprintf>
  	  sprintf(strHumi,"%.1f",humidity);
 800153e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001542:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ff6d 	bl	8000428 <__aeabi_f2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8001556:	49ad      	ldr	r1, [pc, #692]	; (800180c <main+0x384>)
 8001558:	f006 fbb2 	bl	8007cc0 <siprintf>
  	  sprintf(strPms,"%d",pm2_5);
 800155c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001560:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8001564:	49aa      	ldr	r1, [pc, #680]	; (8001810 <main+0x388>)
 8001566:	4618      	mov	r0, r3
 8001568:	f006 fbaa 	bl	8007cc0 <siprintf>
  	  sprintf(strCO,"%.1f",co);
 800156c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001570:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	49a4      	ldr	r1, [pc, #656]	; (800180c <main+0x384>)
 800157a:	f006 fba1 	bl	8007cc0 <siprintf>

  	  for(size_t i=strlen(strTemp);i<sizeof(strTemp);i++){
 800157e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fde4 	bl	8000150 <strlen>
 8001588:	f8c7 0534 	str.w	r0, [r7, #1332]	; 0x534
 800158c:	e00d      	b.n	80015aa <main+0x122>
  		  strTemp[i]=' ';
 800158e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001592:	f5a3 6294 	sub.w	r2, r3, #1184	; 0x4a0
 8001596:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800159a:	4413      	add	r3, r2
 800159c:	2220      	movs	r2, #32
 800159e:	701a      	strb	r2, [r3, #0]
  	  for(size_t i=strlen(strTemp);i<sizeof(strTemp);i++){
 80015a0:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80015a4:	3301      	adds	r3, #1
 80015a6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80015aa:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d9ed      	bls.n	800158e <main+0x106>
  	  }
  	  for(size_t i=strlen(strHumi);i<sizeof(strHumi);i++){
 80015b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe fdca 	bl	8000150 <strlen>
 80015bc:	f8c7 0530 	str.w	r0, [r7, #1328]	; 0x530
 80015c0:	e00d      	b.n	80015de <main+0x156>
  		  strHumi[i]=' ';
 80015c2:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80015c6:	f5a3 6295 	sub.w	r2, r3, #1192	; 0x4a8
 80015ca:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80015ce:	4413      	add	r3, r2
 80015d0:	2220      	movs	r2, #32
 80015d2:	701a      	strb	r2, [r3, #0]
  	  for(size_t i=strlen(strHumi);i<sizeof(strHumi);i++){
 80015d4:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80015d8:	3301      	adds	r3, #1
 80015da:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 80015de:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d9ed      	bls.n	80015c2 <main+0x13a>
  	  }
  	  for(size_t i=strlen(strPms);i<sizeof(strPms);i++){
 80015e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fdb0 	bl	8000150 <strlen>
 80015f0:	f8c7 052c 	str.w	r0, [r7, #1324]	; 0x52c
 80015f4:	e00d      	b.n	8001612 <main+0x18a>
  		  strPms[i]=' ';
 80015f6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80015fa:	f5a3 6297 	sub.w	r2, r3, #1208	; 0x4b8
 80015fe:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001602:	4413      	add	r3, r2
 8001604:	2220      	movs	r2, #32
 8001606:	701a      	strb	r2, [r3, #0]
  	  for(size_t i=strlen(strPms);i<sizeof(strPms);i++){
 8001608:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800160c:	3301      	adds	r3, #1
 800160e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001612:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001616:	2b04      	cmp	r3, #4
 8001618:	d9ed      	bls.n	80015f6 <main+0x16e>
  	  }
  	  for(size_t i=strlen(strCO);i<sizeof(strCO);i++){
 800161a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fd96 	bl	8000150 <strlen>
 8001624:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
 8001628:	e00d      	b.n	8001646 <main+0x1be>
  		  strCO[i]=' ';
 800162a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800162e:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8001632:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001636:	4413      	add	r3, r2
 8001638:	2220      	movs	r2, #32
 800163a:	701a      	strb	r2, [r3, #0]
  	  for(size_t i=strlen(strCO);i<sizeof(strCO);i++){
 800163c:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001640:	3301      	adds	r3, #1
 8001642:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8001646:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800164a:	2b04      	cmp	r3, #4
 800164c:	d9ed      	bls.n	800162a <main+0x1a2>
  	  HAL_Delay(100);
*/
  /*
  -----PUT THE VALUE OF TEMP, HUMI, PM2.5 ONTO SCREEN-----
  */
  	  SSD1306_GotoXY (45,0);
 800164e:	2100      	movs	r1, #0
 8001650:	202d      	movs	r0, #45	; 0x2d
 8001652:	f000 fe2d 	bl	80022b0 <SSD1306_GotoXY>
  	  HAL_Delay(50);
 8001656:	2032      	movs	r0, #50	; 0x32
 8001658:	f001 fb7e 	bl	8002d58 <HAL_Delay>
  	  SSD1306_Puts (strTemp, &Font_7x10, 1);
 800165c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001660:	2201      	movs	r2, #1
 8001662:	496c      	ldr	r1, [pc, #432]	; (8001814 <main+0x38c>)
 8001664:	4618      	mov	r0, r3
 8001666:	f000 feb9 	bl	80023dc <SSD1306_Puts>
  	  HAL_Delay(50);
 800166a:	2032      	movs	r0, #50	; 0x32
 800166c:	f001 fb74 	bl	8002d58 <HAL_Delay>

  	  SSD1306_GotoXY (45,10);
 8001670:	210a      	movs	r1, #10
 8001672:	202d      	movs	r0, #45	; 0x2d
 8001674:	f000 fe1c 	bl	80022b0 <SSD1306_GotoXY>
  	  HAL_Delay(50);
 8001678:	2032      	movs	r0, #50	; 0x32
 800167a:	f001 fb6d 	bl	8002d58 <HAL_Delay>
  	  SSD1306_Puts (strHumi, &Font_7x10, 1);
 800167e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001682:	2201      	movs	r2, #1
 8001684:	4963      	ldr	r1, [pc, #396]	; (8001814 <main+0x38c>)
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fea8 	bl	80023dc <SSD1306_Puts>
  	  HAL_Delay(50);
 800168c:	2032      	movs	r0, #50	; 0x32
 800168e:	f001 fb63 	bl	8002d58 <HAL_Delay>

  	  SSD1306_GotoXY (45,20);
 8001692:	2114      	movs	r1, #20
 8001694:	202d      	movs	r0, #45	; 0x2d
 8001696:	f000 fe0b 	bl	80022b0 <SSD1306_GotoXY>
  	  HAL_Delay(50);
 800169a:	2032      	movs	r0, #50	; 0x32
 800169c:	f001 fb5c 	bl	8002d58 <HAL_Delay>
  	  SSD1306_Puts (strPms, &Font_7x10, 1);
 80016a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016a4:	2201      	movs	r2, #1
 80016a6:	495b      	ldr	r1, [pc, #364]	; (8001814 <main+0x38c>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fe97 	bl	80023dc <SSD1306_Puts>
  	  HAL_Delay(50);
 80016ae:	2032      	movs	r0, #50	; 0x32
 80016b0:	f001 fb52 	bl	8002d58 <HAL_Delay>

  	  SSD1306_GotoXY (45,31);
 80016b4:	211f      	movs	r1, #31
 80016b6:	202d      	movs	r0, #45	; 0x2d
 80016b8:	f000 fdfa 	bl	80022b0 <SSD1306_GotoXY>
  	  HAL_Delay(50);
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f001 fb4b 	bl	8002d58 <HAL_Delay>
  	  SSD1306_Puts (strCO, &Font_7x10, 1);
 80016c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016c6:	2201      	movs	r2, #1
 80016c8:	4952      	ldr	r1, [pc, #328]	; (8001814 <main+0x38c>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fe86 	bl	80023dc <SSD1306_Puts>
  	  HAL_Delay(50);
 80016d0:	2032      	movs	r0, #50	; 0x32
 80016d2:	f001 fb41 	bl	8002d58 <HAL_Delay>
  	  SSD1306_UpdateScreen();
 80016d6:	f000 fd3d 	bl	8002154 <SSD1306_UpdateScreen>


  	  char strSendLora[100]={0};
 80016da:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80016de:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	3304      	adds	r3, #4
 80016e8:	2260      	movs	r2, #96	; 0x60
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f006 fb4a 	bl	8007d86 <memset>
	  strcat(strSendLora,"temp:");
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fd2b 	bl	8000150 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4413      	add	r3, r2
 8001702:	4a45      	ldr	r2, [pc, #276]	; (8001818 <main+0x390>)
 8001704:	6810      	ldr	r0, [r2, #0]
 8001706:	6018      	str	r0, [r3, #0]
 8001708:	8892      	ldrh	r2, [r2, #4]
 800170a:	809a      	strh	r2, [r3, #4]
	  strcat(strSendLora,strTemp);
 800170c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f006 fb3e 	bl	8007d96 <strcat>
	  strcat(strSendLora,"\r\n");
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fd17 	bl	8000150 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4413      	add	r3, r2
 800172a:	4a3c      	ldr	r2, [pc, #240]	; (800181c <main+0x394>)
 800172c:	8811      	ldrh	r1, [r2, #0]
 800172e:	7892      	ldrb	r2, [r2, #2]
 8001730:	8019      	strh	r1, [r3, #0]
 8001732:	709a      	strb	r2, [r3, #2]
	  strcat(strSendLora,"humi:");
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fd0a 	bl	8000150 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4413      	add	r3, r2
 8001744:	4a36      	ldr	r2, [pc, #216]	; (8001820 <main+0x398>)
 8001746:	6810      	ldr	r0, [r2, #0]
 8001748:	6018      	str	r0, [r3, #0]
 800174a:	8892      	ldrh	r2, [r2, #4]
 800174c:	809a      	strh	r2, [r3, #4]
	  strcat(strSendLora,strHumi);
 800174e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f006 fb1d 	bl	8007d96 <strcat>
	  strcat(strSendLora,"\r\n");
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fcf6 	bl	8000150 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4413      	add	r3, r2
 800176c:	4a2b      	ldr	r2, [pc, #172]	; (800181c <main+0x394>)
 800176e:	8811      	ldrh	r1, [r2, #0]
 8001770:	7892      	ldrb	r2, [r2, #2]
 8001772:	8019      	strh	r1, [r3, #0]
 8001774:	709a      	strb	r2, [r3, #2]
	  strcat(strSendLora,"CO gas:");
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fce9 	bl	8000150 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4413      	add	r3, r2
 8001786:	4927      	ldr	r1, [pc, #156]	; (8001824 <main+0x39c>)
 8001788:	461a      	mov	r2, r3
 800178a:	460b      	mov	r3, r1
 800178c:	cb03      	ldmia	r3!, {r0, r1}
 800178e:	6010      	str	r0, [r2, #0]
 8001790:	6051      	str	r1, [r2, #4]
	  strcat(strSendLora,strCO);
 8001792:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f006 fafb 	bl	8007d96 <strcat>
	  strcat(strSendLora,"\r\n");
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fcd4 	bl	8000150 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <main+0x394>)
 80017b2:	8811      	ldrh	r1, [r2, #0]
 80017b4:	7892      	ldrb	r2, [r2, #2]
 80017b6:	8019      	strh	r1, [r3, #0]
 80017b8:	709a      	strb	r2, [r3, #2]
	  strcat(strSendLora,"dust:");
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fcc7 	bl	8000150 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <main+0x3a0>)
 80017cc:	6810      	ldr	r0, [r2, #0]
 80017ce:	6018      	str	r0, [r3, #0]
 80017d0:	8892      	ldrh	r2, [r2, #4]
 80017d2:	809a      	strh	r2, [r3, #4]
	  strcat(strSendLora,strPms);
 80017d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f006 fada 	bl	8007d96 <strcat>
	  strcat(strSendLora,"\r\n");
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcb3 	bl	8000150 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <main+0x394>)
 80017f4:	8811      	ldrh	r1, [r2, #0]
 80017f6:	7892      	ldrb	r2, [r2, #2]
 80017f8:	8019      	strh	r1, [r3, #0]
 80017fa:	709a      	strb	r2, [r3, #2]
  /*
  	-----PROCESS THE GPS DATA AND SEND IT TO ESP BY LORA_E32-----
  */
  	  //take the times to check gps is 5 times maximum
  	  int timesCheckGps = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  	  while(timesCheckGps<=5){
 8001802:	e0c7      	b.n	8001994 <main+0x50c>
 8001804:	20000290 	.word	0x20000290
 8001808:	200002d8 	.word	0x200002d8
 800180c:	0800bd10 	.word	0x0800bd10
 8001810:	0800bd18 	.word	0x0800bd18
 8001814:	20000000 	.word	0x20000000
 8001818:	0800bd1c 	.word	0x0800bd1c
 800181c:	0800bd24 	.word	0x0800bd24
 8001820:	0800bd28 	.word	0x0800bd28
 8001824:	0800bd30 	.word	0x0800bd30
 8001828:	0800bd38 	.word	0x0800bd38
  		  memcpy(copyDataGps,dataGps,sizeof(copyDataGps));
 800182c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001830:	f5a3 6292 	sub.w	r2, r3, #1168	; 0x490
 8001834:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001838:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001844:	461a      	mov	r2, r3
 8001846:	f006 fb76 	bl	8007f36 <memcpy>
  		  //get the latitude, if lat is got, then get the longtitude
  		  latGps=getLatGps(copyDataGps);
 800184a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc96 	bl	8001180 <getLatGps>
 8001854:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
  		  if(latGps!=0){
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 8001860:	f7ff fc24 	bl	80010ac <__aeabi_fcmpeq>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 808f 	bne.w	800198a <main+0x502>
  			  longGps=getLongGps(copyDataGps);
 800186c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd47 	bl	8001304 <getLongGps>
 8001876:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
  			  //convert the float type of lat and long into string
  			  sprintf(strLat,"%.5f",latGps);
 800187a:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 800187e:	f7fe fdd3 	bl	8000428 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800188a:	494b      	ldr	r1, [pc, #300]	; (80019b8 <main+0x530>)
 800188c:	f006 fa18 	bl	8007cc0 <siprintf>
  			  sprintf(strLong,"%.5f",longGps);
 8001890:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 8001894:	f7fe fdc8 	bl	8000428 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80018a0:	4945      	ldr	r1, [pc, #276]	; (80019b8 <main+0x530>)
 80018a2:	f006 fa0d 	bl	8007cc0 <siprintf>

  			  //put the string of lat and long onto screen
  			  SSD1306_GotoXY (45,42);
 80018a6:	212a      	movs	r1, #42	; 0x2a
 80018a8:	202d      	movs	r0, #45	; 0x2d
 80018aa:	f000 fd01 	bl	80022b0 <SSD1306_GotoXY>
  			  HAL_Delay(50);
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f001 fa52 	bl	8002d58 <HAL_Delay>
  			  SSD1306_Puts (strLat, &Font_7x10, 1);
 80018b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018b8:	2201      	movs	r2, #1
 80018ba:	4940      	ldr	r1, [pc, #256]	; (80019bc <main+0x534>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fd8d 	bl	80023dc <SSD1306_Puts>
  			  HAL_Delay(50);
 80018c2:	2032      	movs	r0, #50	; 0x32
 80018c4:	f001 fa48 	bl	8002d58 <HAL_Delay>
  			  SSD1306_GotoXY (45,53);
 80018c8:	2135      	movs	r1, #53	; 0x35
 80018ca:	202d      	movs	r0, #45	; 0x2d
 80018cc:	f000 fcf0 	bl	80022b0 <SSD1306_GotoXY>
  			  HAL_Delay(50);
 80018d0:	2032      	movs	r0, #50	; 0x32
 80018d2:	f001 fa41 	bl	8002d58 <HAL_Delay>
  			  SSD1306_Puts (strLong, &Font_7x10, 1);
 80018d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018da:	2201      	movs	r2, #1
 80018dc:	4937      	ldr	r1, [pc, #220]	; (80019bc <main+0x534>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fd7c 	bl	80023dc <SSD1306_Puts>
  			  HAL_Delay(50);
 80018e4:	2032      	movs	r0, #50	; 0x32
 80018e6:	f001 fa37 	bl	8002d58 <HAL_Delay>
  			  SSD1306_UpdateScreen();
 80018ea:	f000 fc33 	bl	8002154 <SSD1306_UpdateScreen>
  			  timesCheckGps=5;
 80018ee:	2305      	movs	r3, #5
 80018f0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  			  //concatenate the string into strSendLora
  			  strcat(strSendLora,"latitude:");
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc2a 	bl	8000150 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4413      	add	r3, r2
 8001904:	492e      	ldr	r1, [pc, #184]	; (80019c0 <main+0x538>)
 8001906:	461a      	mov	r2, r3
 8001908:	460b      	mov	r3, r1
 800190a:	cb03      	ldmia	r3!, {r0, r1}
 800190c:	6010      	str	r0, [r2, #0]
 800190e:	6051      	str	r1, [r2, #4]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	8113      	strh	r3, [r2, #8]
  			  strcat(strSendLora,strLat);
 8001914:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fa3a 	bl	8007d96 <strcat>
  			  strcat(strSendLora,"\r\n");
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fc13 	bl	8000150 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4413      	add	r3, r2
 8001932:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <main+0x53c>)
 8001934:	8811      	ldrh	r1, [r2, #0]
 8001936:	7892      	ldrb	r2, [r2, #2]
 8001938:	8019      	strh	r1, [r3, #0]
 800193a:	709a      	strb	r2, [r3, #2]
  			  strcat(strSendLora,"longtitude:");
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc06 	bl	8000150 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4413      	add	r3, r2
 800194c:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <main+0x540>)
 800194e:	461c      	mov	r4, r3
 8001950:	4613      	mov	r3, r2
 8001952:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001954:	6020      	str	r0, [r4, #0]
 8001956:	6061      	str	r1, [r4, #4]
 8001958:	60a2      	str	r2, [r4, #8]
  			  strcat(strSendLora,strLong);
 800195a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f006 fa17 	bl	8007d96 <strcat>
  			  strcat(strSendLora,"\r\n");
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fbf0 	bl	8000150 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4413      	add	r3, r2
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <main+0x53c>)
 800197a:	8811      	ldrh	r1, [r2, #0]
 800197c:	7892      	ldrb	r2, [r2, #2]
 800197e:	8019      	strh	r1, [r3, #0]
 8001980:	709a      	strb	r2, [r3, #2]

  			  //send gps data to lora-e32
  			  //HAL_UART_Transmit(&huart3, (uint8_t*)strSendLora, sizeof(strSendLora), HAL_MAX_DELAY);
  			  HAL_Delay(8000);
 8001982:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001986:	f001 f9e7 	bl	8002d58 <HAL_Delay>
  		  }
  		  timesCheckGps+=1;
 800198a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800198e:	3301      	adds	r3, #1
 8001990:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  	  while(timesCheckGps<=5){
 8001994:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8001998:	2b05      	cmp	r3, #5
 800199a:	f77f af47 	ble.w	800182c <main+0x3a4>
  	  }
  	  HAL_UART_Transmit(&huart3, (uint8_t*)strSendLora, sizeof(strSendLora), HAL_MAX_DELAY);
 800199e:	1d39      	adds	r1, r7, #4
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	2264      	movs	r2, #100	; 0x64
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <main+0x544>)
 80019a8:	f004 f844 	bl	8005a34 <HAL_UART_Transmit>
  	  HAL_Delay(6000); // delay 5s to see para on screen
 80019ac:	f241 7070 	movw	r0, #6000	; 0x1770
 80019b0:	f001 f9d2 	bl	8002d58 <HAL_Delay>
    {
 80019b4:	e59c      	b.n	80014f0 <main+0x68>
 80019b6:	bf00      	nop
 80019b8:	0800bd40 	.word	0x0800bd40
 80019bc:	20000000 	.word	0x20000000
 80019c0:	0800bd48 	.word	0x0800bd48
 80019c4:	0800bd24 	.word	0x0800bd24
 80019c8:	0800bd54 	.word	0x0800bd54
 80019cc:	20000320 	.word	0x20000320

080019d0 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019da:	2228      	movs	r2, #40	; 0x28
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 f9d1 	bl	8007d86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 faf8 	bl	8005008 <HAL_RCC_OscConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8001a1e:	f000 f965 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a22:	230f      	movs	r3, #15
 8001a24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fd65 	bl	800550c <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a48:	f000 f950 	bl	8001cec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fee6 	bl	8005828 <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a62:	f000 f943 	bl	8001cec <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	; 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <MX_ADC1_Init+0x78>)
 8001a84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001a9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001aae:	f001 f977 	bl	8002da0 <HAL_ADC_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ab8:	f000 f918 	bl	8001cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_ADC1_Init+0x74>)
 8001ace:	f001 fb25 	bl	800311c <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ad8:	f000 f908 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000020c 	.word	0x2000020c
 8001ae8:	40012400 	.word	0x40012400

08001aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <MX_I2C1_Init+0x54>)
 8001af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_I2C1_Init+0x58>)
 8001afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <MX_I2C1_Init+0x50>)
 8001b2a:	f002 f90b 	bl	8003d44 <HAL_I2C_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b34:	f000 f8da 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000023c 	.word	0x2000023c
 8001b40:	40005400 	.word	0x40005400
 8001b44:	00061a80 	.word	0x00061a80

08001b48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_USART1_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART1_UART_Init+0x4c>)
 8001b80:	f003 ff08 	bl	8005994 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f000 f8af 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000290 	.word	0x20000290
 8001b98:	40013800 	.word	0x40013800

08001b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <MX_USART2_UART_Init+0x50>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	f003 fede 	bl	8005994 <HAL_UART_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bde:	f000 f885 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200002d8 	.word	0x200002d8
 8001bec:	40004400 	.word	0x40004400

08001bf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <MX_USART3_UART_Init+0x50>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001bfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c28:	f003 feb4 	bl	8005994 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c32:	f000 f85b 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000320 	.word	0x20000320
 8001c40:	40004800 	.word	0x40004800

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_DMA_Init+0x48>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <MX_DMA_Init+0x48>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6153      	str	r3, [r2, #20]
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <MX_DMA_Init+0x48>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	200f      	movs	r0, #15
 8001c68:	f001 fcc3 	bl	80035f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c6c:	200f      	movs	r0, #15
 8001c6e:	f001 fcdc 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2010      	movs	r0, #16
 8001c78:	f001 fcbb 	bl	80035f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c7c:	2010      	movs	r0, #16
 8001c7e:	f001 fcd4 	bl	800362a <HAL_NVIC_EnableIRQ>

}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6193      	str	r3, [r2, #24]
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6193      	str	r3, [r2, #24]
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <MX_GPIO_Init+0x58>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <SHT31_ReadTempHumidity>:
extern I2C_HandleTypeDef hi2c1;
extern ADC_HandleTypeDef hadc1;
uint8_t CMD_MEASURE_TEMP_HUM[2] = {0x2C, 0x06};

void SHT31_ReadTempHumidity(float* temp, float* humidity)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint16_t temp_raw, humidity_raw;

    HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, CMD_MEASURE_TEMP_HUM, 2, 500);
 8001d02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <SHT31_ReadTempHumidity+0xbc>)
 8001d0c:	2188      	movs	r1, #136	; 0x88
 8001d0e:	482a      	ldr	r0, [pc, #168]	; (8001db8 <SHT31_ReadTempHumidity+0xc0>)
 8001d10:	f002 f95c 	bl	8003fcc <HAL_I2C_Master_Transmit>
    HAL_Delay(200);
 8001d14:	20c8      	movs	r0, #200	; 0xc8
 8001d16:	f001 f81f 	bl	8002d58 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, data, 6, 1000);
 8001d1a:	f107 020c 	add.w	r2, r7, #12
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2306      	movs	r3, #6
 8001d26:	2188      	movs	r1, #136	; 0x88
 8001d28:	4823      	ldr	r0, [pc, #140]	; (8001db8 <SHT31_ReadTempHumidity+0xc0>)
 8001d2a:	f002 fa4d 	bl	80041c8 <HAL_I2C_Master_Receive>
    HAL_Delay(200);
 8001d2e:	20c8      	movs	r0, #200	; 0xc8
 8001d30:	f001 f812 	bl	8002d58 <HAL_Delay>
    temp_raw = data[0] << 8 | data[1];
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	7b7b      	ldrb	r3, [r7, #13]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	82fb      	strh	r3, [r7, #22]
    *temp = ((float)temp_raw * 175.0f / 65535.0f) - 45.0f;
 8001d44:	8afb      	ldrh	r3, [r7, #22]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe ffc4 	bl	8000cd4 <__aeabi_ui2f>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	491b      	ldr	r1, [pc, #108]	; (8001dbc <SHT31_ReadTempHumidity+0xc4>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f817 	bl	8000d84 <__aeabi_fmul>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4919      	ldr	r1, [pc, #100]	; (8001dc0 <SHT31_ReadTempHumidity+0xc8>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f8c6 	bl	8000eec <__aeabi_fdiv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4918      	ldr	r1, [pc, #96]	; (8001dc4 <SHT31_ReadTempHumidity+0xcc>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe ff03 	bl	8000b70 <__aeabi_fsub>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
    humidity_raw = data[3] << 8 | data[4];
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	7c3b      	ldrb	r3, [r7, #16]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	82bb      	strh	r3, [r7, #20]
    *humidity = ((float)humidity_raw * 100.0f / 65535.0f);
 8001d82:	8abb      	ldrh	r3, [r7, #20]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ffa5 	bl	8000cd4 <__aeabi_ui2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <SHT31_ReadTempHumidity+0xd0>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fff8 	bl	8000d84 <__aeabi_fmul>
 8001d94:	4603      	mov	r3, r0
 8001d96:	490a      	ldr	r1, [pc, #40]	; (8001dc0 <SHT31_ReadTempHumidity+0xc8>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f8a7 	bl	8000eec <__aeabi_fdiv>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
    HAL_Delay(200);
 8001da6:	20c8      	movs	r0, #200	; 0xc8
 8001da8:	f000 ffd6 	bl	8002d58 <HAL_Delay>
}
 8001dac:	bf00      	nop
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000008 	.word	0x20000008
 8001db8:	2000023c 	.word	0x2000023c
 8001dbc:	432f0000 	.word	0x432f0000
 8001dc0:	477fff00 	.word	0x477fff00
 8001dc4:	42340000 	.word	0x42340000
 8001dc8:	42c80000 	.word	0x42c80000

08001dcc <getPM25>:



int getPM25(uint8_t* data_rx, uint8_t* copy_data_rx, int size){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
	  int flag = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
	  int pm2_5;
	  memcpy(copy_data_rx,data_rx,size);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68f9      	ldr	r1, [r7, #12]
 8001de2:	68b8      	ldr	r0, [r7, #8]
 8001de4:	f006 f8a7 	bl	8007f36 <memcpy>
	  while(1){
		  int sumOfDataFrame=0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
		  if(flag+32<64){
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b1f      	cmp	r3, #31
 8001df0:	dc57      	bgt.n	8001ea2 <getPM25+0xd6>
			  if((copy_data_rx[flag]==66) && (copy_data_rx[flag+1]==77)){
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	4413      	add	r3, r2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b42      	cmp	r3, #66	; 0x42
 8001dfc:	d14d      	bne.n	8001e9a <getPM25+0xce>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b4d      	cmp	r3, #77	; 0x4d
 8001e0a:	d146      	bne.n	8001e9a <getPM25+0xce>
				  if((copy_data_rx[flag+2]==0) && (copy_data_rx[flag+3]==28)){
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d13b      	bne.n	8001e92 <getPM25+0xc6>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b1c      	cmp	r3, #28
 8001e26:	d134      	bne.n	8001e92 <getPM25+0xc6>
					  for(int i=flag;i<flag+30;i++){
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e00a      	b.n	8001e44 <getPM25+0x78>
						  sumOfDataFrame+=copy_data_rx[i];
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
					  for(int i=flag;i<flag+30;i++){
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	331d      	adds	r3, #29
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	ddef      	ble.n	8001e2e <getPM25+0x62>
					  }
					  if(sumOfDataFrame == ((copy_data_rx[flag+30]<<8) + copy_data_rx[flag+31])){
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	331e      	adds	r3, #30
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	321f      	adds	r2, #31
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	440a      	add	r2, r1
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10d      	bne.n	8001e88 <getPM25+0xbc>
						  pm2_5 = (copy_data_rx[flag+6]<<8) + copy_data_rx[flag+7];
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3306      	adds	r3, #6
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	3207      	adds	r2, #7
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	440a      	add	r2, r1
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
						  //sprintf(str,"%d",pm2_5);
						  break;
 8001e86:	e015      	b.n	8001eb4 <getPM25+0xe8>
	 				  }
					  else{
						  flag+=4;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	61fb      	str	r3, [r7, #28]
					  if(sumOfDataFrame == ((copy_data_rx[flag+30]<<8) + copy_data_rx[flag+31])){
 8001e8e:	bf00      	nop
				  if((copy_data_rx[flag+2]==0) && (copy_data_rx[flag+3]==28)){
 8001e90:	e00f      	b.n	8001eb2 <getPM25+0xe6>
					  }
				  }
				  else{
					  flag+=2;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3302      	adds	r3, #2
 8001e96:	61fb      	str	r3, [r7, #28]
				  if((copy_data_rx[flag+2]==0) && (copy_data_rx[flag+3]==28)){
 8001e98:	e00b      	b.n	8001eb2 <getPM25+0xe6>
				  }
			  }
			  else{
				  flag+=1;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	e7a2      	b.n	8001de8 <getPM25+0x1c>
			  }
		  }
		  else{
			  flag=0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
			  memcpy(copy_data_rx,data_rx,size);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f006 f842 	bl	8007f36 <memcpy>
	  while(1){
 8001eb2:	e799      	b.n	8001de8 <getPM25+0x1c>
		  }
	  }
	  return pm2_5;
 8001eb4:	693b      	ldr	r3, [r7, #16]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <getCOValue>:



double getCOValue(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af00      	add	r7, sp, #0
	uint16_t var;
	double vrl, rs, ratio, ppm;
	double r0 = 355.27;
 8001ec6:	a334      	add	r3, pc, #208	; (adr r3, 8001f98 <getCOValue+0xd8>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	HAL_ADC_Start(&hadc1);
 8001ed0:	483b      	ldr	r0, [pc, #236]	; (8001fc0 <getCOValue+0x100>)
 8001ed2:	f001 f83d 	bl	8002f50 <HAL_ADC_Start>
	HAL_Delay(100);
 8001ed6:	2064      	movs	r0, #100	; 0x64
 8001ed8:	f000 ff3e 	bl	8002d58 <HAL_Delay>
	var=HAL_ADC_GetValue(&hadc1);
 8001edc:	4838      	ldr	r0, [pc, #224]	; (8001fc0 <getCOValue+0x100>)
 8001ede:	f001 f911 	bl	8003104 <HAL_ADC_GetValue>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_ADC_Stop(&hadc1);
 8001ee6:	4836      	ldr	r0, [pc, #216]	; (8001fc0 <getCOValue+0x100>)
 8001ee8:	f001 f8e0 	bl	80030ac <HAL_ADC_Stop>
	vrl = (var * 5.0) / 4095.0;
 8001eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fa88 	bl	8000404 <__aeabi_i2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <getCOValue+0x104>)
 8001efa:	f7fe faed 	bl	80004d8 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	a326      	add	r3, pc, #152	; (adr r3, 8001fa0 <getCOValue+0xe0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fc0e 	bl	800072c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	e9c7 2306 	strd	r2, r3, [r7, #24]
	rs = ((5 * 1000) / vrl) - 1000;
 8001f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1c:	a122      	add	r1, pc, #136	; (adr r1, 8001fa8 <getCOValue+0xe8>)
 8001f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f22:	f7fe fc03 	bl	800072c <__aeabi_ddiv>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <getCOValue+0x108>)
 8001f34:	f7fe f918 	bl	8000168 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	ratio = rs / r0;
 8001f40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f48:	f7fe fbf0 	bl	800072c <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9c7 2302 	strd	r2, r3, [r7, #8]
	ppm = pow(10, ((log10(ratio) - 1.3055) / -0.6528));
 8001f54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f58:	f008 fd56 	bl	800aa08 <log10>
 8001f5c:	a314      	add	r3, pc, #80	; (adr r3, 8001fb0 <getCOValue+0xf0>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe f901 	bl	8000168 <__aeabi_dsub>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	a312      	add	r3, pc, #72	; (adr r3, 8001fb8 <getCOValue+0xf8>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fbda 	bl	800072c <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	f04f 0000 	mov.w	r0, #0
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <getCOValue+0x10c>)
 8001f82:	f008 fd73 	bl	800aa6c <pow>
 8001f86:	e9c7 0100 	strd	r0, r1, [r7]
	return ppm;
 8001f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	3730      	adds	r7, #48	; 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	eb851eb8 	.word	0xeb851eb8
 8001f9c:	40763451 	.word	0x40763451
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	40affe00 	.word	0x40affe00
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	40b38800 	.word	0x40b38800
 8001fb0:	f7ced917 	.word	0xf7ced917
 8001fb4:	3ff4e353 	.word	0x3ff4e353
 8001fb8:	d35a8588 	.word	0xd35a8588
 8001fbc:	bfe4e3bc 	.word	0xbfe4e3bc
 8001fc0:	2000020c 	.word	0x2000020c
 8001fc4:	40140000 	.word	0x40140000
 8001fc8:	408f4000 	.word	0x408f4000
 8001fcc:	40240000 	.word	0x40240000

08001fd0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fd6:	f000 fa27 	bl	8002428 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fda:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2178      	movs	r1, #120	; 0x78
 8001fe2:	485a      	ldr	r0, [pc, #360]	; (800214c <SSD1306_Init+0x17c>)
 8001fe4:	f002 fb5c 	bl	80046a0 <HAL_I2C_IsDeviceReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e0a8      	b.n	8002144 <SSD1306_Init+0x174>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001ff2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001ff6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ff8:	e002      	b.n	8002000 <SSD1306_Init+0x30>
		p--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <SSD1306_Init+0x2a>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
	SSD1306_WRITECOMMAND(0x14); //
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel*/

	SSD1306_WRITECOMMAND(0xA8);
 8002006:	22a8      	movs	r2, #168	; 0xa8
 8002008:	2100      	movs	r1, #0
 800200a:	2078      	movs	r0, #120	; 0x78
 800200c:	f000 fa86 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002010:	2005      	movs	r0, #5
 8002012:	f000 fea1 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x3F);
 8002016:	223f      	movs	r2, #63	; 0x3f
 8002018:	2100      	movs	r1, #0
 800201a:	2078      	movs	r0, #120	; 0x78
 800201c:	f000 fa7e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002020:	2005      	movs	r0, #5
 8002022:	f000 fe99 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xD3);
 8002026:	22d3      	movs	r2, #211	; 0xd3
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 fa76 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002030:	2005      	movs	r0, #5
 8002032:	f000 fe91 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x00);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2078      	movs	r0, #120	; 0x78
 800203c:	f000 fa6e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002040:	2005      	movs	r0, #5
 8002042:	f000 fe89 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x40);
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	2100      	movs	r1, #0
 800204a:	2078      	movs	r0, #120	; 0x78
 800204c:	f000 fa66 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002050:	2005      	movs	r0, #5
 8002052:	f000 fe81 	bl	8002d58 <HAL_Delay>
	//SSD1306_WRITECOMMAND(0xA0);
	SSD1306_WRITECOMMAND(0xA1);
 8002056:	22a1      	movs	r2, #161	; 0xa1
 8002058:	2100      	movs	r1, #0
 800205a:	2078      	movs	r0, #120	; 0x78
 800205c:	f000 fa5e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002060:	2005      	movs	r0, #5
 8002062:	f000 fe79 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xC8);
 8002066:	22c8      	movs	r2, #200	; 0xc8
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	; 0x78
 800206c:	f000 fa56 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002070:	2005      	movs	r0, #5
 8002072:	f000 fe71 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xDA);
 8002076:	22da      	movs	r2, #218	; 0xda
 8002078:	2100      	movs	r1, #0
 800207a:	2078      	movs	r0, #120	; 0x78
 800207c:	f000 fa4e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002080:	2005      	movs	r0, #5
 8002082:	f000 fe69 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x81);
 8002086:	2281      	movs	r2, #129	; 0x81
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f000 fa46 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002090:	2005      	movs	r0, #5
 8002092:	f000 fe61 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x7F);
 8002096:	227f      	movs	r2, #127	; 0x7f
 8002098:	2100      	movs	r1, #0
 800209a:	2078      	movs	r0, #120	; 0x78
 800209c:	f000 fa3e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 80020a0:	2005      	movs	r0, #5
 80020a2:	f000 fe59 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xA4);
 80020a6:	22a4      	movs	r2, #164	; 0xa4
 80020a8:	2100      	movs	r1, #0
 80020aa:	2078      	movs	r0, #120	; 0x78
 80020ac:	f000 fa36 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 80020b0:	2005      	movs	r0, #5
 80020b2:	f000 fe51 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xA6);
 80020b6:	22a6      	movs	r2, #166	; 0xa6
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	; 0x78
 80020bc:	f000 fa2e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 80020c0:	2005      	movs	r0, #5
 80020c2:	f000 fe49 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xD5);
 80020c6:	22d5      	movs	r2, #213	; 0xd5
 80020c8:	2100      	movs	r1, #0
 80020ca:	2078      	movs	r0, #120	; 0x78
 80020cc:	f000 fa26 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 80020d0:	2005      	movs	r0, #5
 80020d2:	f000 fe41 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x80);
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 fa1e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 80020e0:	2005      	movs	r0, #5
 80020e2:	f000 fe39 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x8D);
 80020e6:	228d      	movs	r2, #141	; 0x8d
 80020e8:	2100      	movs	r1, #0
 80020ea:	2078      	movs	r0, #120	; 0x78
 80020ec:	f000 fa16 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 80020f0:	2005      	movs	r0, #5
 80020f2:	f000 fe31 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0x14);
 80020f6:	2214      	movs	r2, #20
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	; 0x78
 80020fc:	f000 fa0e 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002100:	2005      	movs	r0, #5
 8002102:	f000 fe29 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(0xAF);
 8002106:	22af      	movs	r2, #175	; 0xaf
 8002108:	2100      	movs	r1, #0
 800210a:	2078      	movs	r0, #120	; 0x78
 800210c:	f000 fa06 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002110:	2005      	movs	r0, #5
 8002112:	f000 fe21 	bl	8002d58 <HAL_Delay>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002116:	222e      	movs	r2, #46	; 0x2e
 8002118:	2100      	movs	r1, #0
 800211a:	2078      	movs	r0, #120	; 0x78
 800211c:	f000 f9fe 	bl	800251c <ssd1306_I2C_Write>
	HAL_Delay(5);
 8002120:	2005      	movs	r0, #5
 8002122:	f000 fe19 	bl	8002d58 <HAL_Delay>
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f84c 	bl	80021c4 <SSD1306_Fill>
	//SSD1306_Fill(SSD1306_COLOR_BLACK);
	/* Update screen */
	SSD1306_UpdateScreen();
 800212c:	f000 f812 	bl	8002154 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <SSD1306_Init+0x180>)
 8002132:	2200      	movs	r2, #0
 8002134:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SSD1306_Init+0x180>)
 8002138:	2200      	movs	r2, #0
 800213a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SSD1306_Init+0x180>)
 800213e:	2201      	movs	r2, #1
 8002140:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000023c 	.word	0x2000023c
 8002150:	200007f0 	.word	0x200007f0

08002154 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	e026      	b.n	80021ae <SSD1306_UpdateScreen+0x5a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3b50      	subs	r3, #80	; 0x50
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	2100      	movs	r1, #0
 800216a:	2078      	movs	r0, #120	; 0x78
 800216c:	f000 f9d6 	bl	800251c <ssd1306_I2C_Write>
		HAL_Delay(5);
 8002170:	2005      	movs	r0, #5
 8002172:	f000 fdf1 	bl	8002d58 <HAL_Delay>
		SSD1306_WRITECOMMAND(0x00);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 f9ce 	bl	800251c <ssd1306_I2C_Write>
		HAL_Delay(5);
 8002180:	2005      	movs	r0, #5
 8002182:	f000 fde9 	bl	8002d58 <HAL_Delay>
		SSD1306_WRITECOMMAND(0x10);
 8002186:	2210      	movs	r2, #16
 8002188:	2100      	movs	r1, #0
 800218a:	2078      	movs	r0, #120	; 0x78
 800218c:	f000 f9c6 	bl	800251c <ssd1306_I2C_Write>
		HAL_Delay(5);
 8002190:	2005      	movs	r0, #5
 8002192:	f000 fde1 	bl	8002d58 <HAL_Delay>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <SSD1306_UpdateScreen+0x6c>)
 800219c:	441a      	add	r2, r3
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	2140      	movs	r1, #64	; 0x40
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 f954 	bl	8002450 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	3301      	adds	r3, #1
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b07      	cmp	r3, #7
 80021b2:	d9d5      	bls.n	8002160 <SSD1306_UpdateScreen+0xc>
	}
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200003f0 	.word	0x200003f0

080021c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <SSD1306_Fill+0x14>
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <SSD1306_Fill+0x16>
 80021d8:	23ff      	movs	r3, #255	; 0xff
 80021da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021de:	4619      	mov	r1, r3
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <SSD1306_Fill+0x2c>)
 80021e2:	f005 fdd0 	bl	8007d86 <memset>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200003f0 	.word	0x200003f0

080021f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	460b      	mov	r3, r1
 8002200:	80bb      	strh	r3, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	70fb      	strb	r3, [r7, #3]
	if (
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	2b7f      	cmp	r3, #127	; 0x7f
 800220a:	d848      	bhi.n	800229e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	2b3f      	cmp	r3, #63	; 0x3f
 8002210:	d845      	bhi.n	800229e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <SSD1306_DrawPixel+0xb4>)
 8002214:	791b      	ldrb	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11a      	bne.n	8002264 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	88bb      	ldrh	r3, [r7, #4]
 8002232:	08db      	lsrs	r3, r3, #3
 8002234:	b298      	uxth	r0, r3
 8002236:	4603      	mov	r3, r0
 8002238:	01db      	lsls	r3, r3, #7
 800223a:	4413      	add	r3, r2
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <SSD1306_DrawPixel+0xb8>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	b25a      	sxtb	r2, r3
 8002242:	88bb      	ldrh	r3, [r7, #4]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	b25b      	sxtb	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b259      	sxtb	r1, r3
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	4603      	mov	r3, r0
 8002258:	01db      	lsls	r3, r3, #7
 800225a:	4413      	add	r3, r2
 800225c:	b2c9      	uxtb	r1, r1
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <SSD1306_DrawPixel+0xb8>)
 8002260:	54d1      	strb	r1, [r2, r3]
 8002262:	e01d      	b.n	80022a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	88bb      	ldrh	r3, [r7, #4]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	b298      	uxth	r0, r3
 800226c:	4603      	mov	r3, r0
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	4413      	add	r3, r2
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <SSD1306_DrawPixel+0xb8>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	b25a      	sxtb	r2, r3
 8002278:	88bb      	ldrh	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	b25b      	sxtb	r3, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	b25b      	sxtb	r3, r3
 800228a:	4013      	ands	r3, r2
 800228c:	b259      	sxtb	r1, r3
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	4603      	mov	r3, r0
 8002292:	01db      	lsls	r3, r3, #7
 8002294:	4413      	add	r3, r2
 8002296:	b2c9      	uxtb	r1, r1
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <SSD1306_DrawPixel+0xb8>)
 800229a:	54d1      	strb	r1, [r2, r3]
 800229c:	e000      	b.n	80022a0 <SSD1306_DrawPixel+0xac>
		return;
 800229e:	bf00      	nop
	}
}
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	200007f0 	.word	0x200007f0
 80022ac:	200003f0 	.word	0x200003f0

080022b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	460a      	mov	r2, r1
 80022ba:	80fb      	strh	r3, [r7, #6]
 80022bc:	4613      	mov	r3, r2
 80022be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022c0:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <SSD1306_GotoXY+0x28>)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <SSD1306_GotoXY+0x28>)
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	8053      	strh	r3, [r2, #2]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200007f0 	.word	0x200007f0

080022dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	4613      	mov	r3, r2
 80022ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <SSD1306_Putc+0xfc>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
	if (
 80022f8:	2b7f      	cmp	r3, #127	; 0x7f
 80022fa:	dc07      	bgt.n	800230c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <SSD1306_Putc+0xfc>)
 80022fe:	885b      	ldrh	r3, [r3, #2]
 8002300:	461a      	mov	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002308:	2b3f      	cmp	r3, #63	; 0x3f
 800230a:	dd01      	ble.n	8002310 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800230c:	2300      	movs	r3, #0
 800230e:	e05e      	b.n	80023ce <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e04b      	b.n	80023ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	3b20      	subs	r3, #32
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	7849      	ldrb	r1, [r1, #1]
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4619      	mov	r1, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	440b      	add	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e030      	b.n	800239c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800234a:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <SSD1306_Putc+0xfc>)
 800234c:	881a      	ldrh	r2, [r3, #0]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	b29b      	uxth	r3, r3
 8002352:	4413      	add	r3, r2
 8002354:	b298      	uxth	r0, r3
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <SSD1306_Putc+0xfc>)
 8002358:	885a      	ldrh	r2, [r3, #2]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4413      	add	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	79ba      	ldrb	r2, [r7, #6]
 8002364:	4619      	mov	r1, r3
 8002366:	f7ff ff45 	bl	80021f4 <SSD1306_DrawPixel>
 800236a:	e014      	b.n	8002396 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <SSD1306_Putc+0xfc>)
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4413      	add	r3, r2
 8002376:	b298      	uxth	r0, r3
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <SSD1306_Putc+0xfc>)
 800237a:	885a      	ldrh	r2, [r3, #2]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4413      	add	r3, r2
 8002382:	b299      	uxth	r1, r3
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	f7ff ff2f 	bl	80021f4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	3301      	adds	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d3c8      	bcc.n	800233a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	461a      	mov	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d3ad      	bcc.n	8002316 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <SSD1306_Putc+0xfc>)
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <SSD1306_Putc+0xfc>)
 80023ca:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200007f0 	.word	0x200007f0

080023dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023ea:	e012      	b.n	8002412 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff71 	bl	80022dc <SSD1306_Putc>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d002      	beq.n	800240c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	e008      	b.n	800241e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e8      	bne.n	80023ec <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	781b      	ldrb	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <ssd1306_I2C_Init+0x24>)
 8002430:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002432:	e002      	b.n	800243a <ssd1306_I2C_Init+0x12>
		p--;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
	while(p>0)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	0003d090 	.word	0x0003d090

08002450 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b0c7      	sub	sp, #284	; 0x11c
 8002454:	af02      	add	r7, sp, #8
 8002456:	4604      	mov	r4, r0
 8002458:	4608      	mov	r0, r1
 800245a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800245e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002462:	600a      	str	r2, [r1, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800246a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800246e:	4622      	mov	r2, r4
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002476:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800247a:	4602      	mov	r2, r0
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002486:	460a      	mov	r2, r1
 8002488:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800248a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800248e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002492:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002496:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024a4:	e015      	b.n	80024d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80024a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	441a      	add	r2, r3
 80024b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ba:	3301      	adds	r3, #1
 80024bc:	7811      	ldrb	r1, [r2, #0]
 80024be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024c2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024cc:	3301      	adds	r3, #1
 80024ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d8df      	bhi.n	80024a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b299      	uxth	r1, r3
 80024f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f107 020c 	add.w	r2, r7, #12
 8002504:	200a      	movs	r0, #10
 8002506:	9000      	str	r0, [sp, #0]
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <ssd1306_I2C_WriteMulti+0xc8>)
 800250a:	f001 fd5f 	bl	8003fcc <HAL_I2C_Master_Transmit>
}
 800250e:	bf00      	nop
 8002510:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	2000023c 	.word	0x2000023c

0800251c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	460b      	mov	r3, r1
 8002528:	71bb      	strb	r3, [r7, #6]
 800252a:	4613      	mov	r3, r2
 800252c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800252e:	79bb      	ldrb	r3, [r7, #6]
 8002530:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002532:	797b      	ldrb	r3, [r7, #5]
 8002534:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	b299      	uxth	r1, r3
 800253a:	f107 020c 	add.w	r2, r7, #12
 800253e:	230a      	movs	r3, #10
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2302      	movs	r3, #2
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <ssd1306_I2C_Write+0x38>)
 8002546:	f001 fd41 	bl	8003fcc <HAL_I2C_Master_Transmit>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000023c 	.word	0x2000023c

08002558 <oled_init>:

/**************************OLED_INIT***********************************/

void oled_init(){
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    SSD1306_GotoXY (3,0);
 800255c:	2100      	movs	r1, #0
 800255e:	2003      	movs	r0, #3
 8002560:	f7ff fea6 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 8002564:	2032      	movs	r0, #50	; 0x32
 8002566:	f000 fbf7 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("TEMP :", &Font_7x10, 1);
 800256a:	2201      	movs	r2, #1
 800256c:	494a      	ldr	r1, [pc, #296]	; (8002698 <oled_init+0x140>)
 800256e:	484b      	ldr	r0, [pc, #300]	; (800269c <oled_init+0x144>)
 8002570:	f7ff ff34 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 8002574:	2032      	movs	r0, #50	; 0x32
 8002576:	f000 fbef 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (3,10);
 800257a:	210a      	movs	r1, #10
 800257c:	2003      	movs	r0, #3
 800257e:	f7ff fe97 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 8002582:	2032      	movs	r0, #50	; 0x32
 8002584:	f000 fbe8 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("HUMI :", &Font_7x10, 1);
 8002588:	2201      	movs	r2, #1
 800258a:	4943      	ldr	r1, [pc, #268]	; (8002698 <oled_init+0x140>)
 800258c:	4844      	ldr	r0, [pc, #272]	; (80026a0 <oled_init+0x148>)
 800258e:	f7ff ff25 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 8002592:	2032      	movs	r0, #50	; 0x32
 8002594:	f000 fbe0 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (3,20);
 8002598:	2114      	movs	r1, #20
 800259a:	2003      	movs	r0, #3
 800259c:	f7ff fe88 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 80025a0:	2032      	movs	r0, #50	; 0x32
 80025a2:	f000 fbd9 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("PM2.5:", &Font_7x10, 1);
 80025a6:	2201      	movs	r2, #1
 80025a8:	493b      	ldr	r1, [pc, #236]	; (8002698 <oled_init+0x140>)
 80025aa:	483e      	ldr	r0, [pc, #248]	; (80026a4 <oled_init+0x14c>)
 80025ac:	f7ff ff16 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 80025b0:	2032      	movs	r0, #50	; 0x32
 80025b2:	f000 fbd1 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (3,31);
 80025b6:	211f      	movs	r1, #31
 80025b8:	2003      	movs	r0, #3
 80025ba:	f7ff fe79 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 80025be:	2032      	movs	r0, #50	; 0x32
 80025c0:	f000 fbca 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("CO   :", &Font_7x10, 1);
 80025c4:	2201      	movs	r2, #1
 80025c6:	4934      	ldr	r1, [pc, #208]	; (8002698 <oled_init+0x140>)
 80025c8:	4837      	ldr	r0, [pc, #220]	; (80026a8 <oled_init+0x150>)
 80025ca:	f7ff ff07 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 80025ce:	2032      	movs	r0, #50	; 0x32
 80025d0:	f000 fbc2 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (3,42);
 80025d4:	212a      	movs	r1, #42	; 0x2a
 80025d6:	2003      	movs	r0, #3
 80025d8:	f7ff fe6a 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 80025dc:	2032      	movs	r0, #50	; 0x32
 80025de:	f000 fbbb 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("LAT  :", &Font_7x10, 1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	492c      	ldr	r1, [pc, #176]	; (8002698 <oled_init+0x140>)
 80025e6:	4831      	ldr	r0, [pc, #196]	; (80026ac <oled_init+0x154>)
 80025e8:	f7ff fef8 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 80025ec:	2032      	movs	r0, #50	; 0x32
 80025ee:	f000 fbb3 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (3,53);
 80025f2:	2135      	movs	r1, #53	; 0x35
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7ff fe5b 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 80025fa:	2032      	movs	r0, #50	; 0x32
 80025fc:	f000 fbac 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("LONG :", &Font_7x10, 1);
 8002600:	2201      	movs	r2, #1
 8002602:	4925      	ldr	r1, [pc, #148]	; (8002698 <oled_init+0x140>)
 8002604:	482a      	ldr	r0, [pc, #168]	; (80026b0 <oled_init+0x158>)
 8002606:	f7ff fee9 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 800260a:	2032      	movs	r0, #50	; 0x32
 800260c:	f000 fba4 	bl	8002d58 <HAL_Delay>

    SSD1306_GotoXY (83,0);
 8002610:	2100      	movs	r1, #0
 8002612:	2053      	movs	r0, #83	; 0x53
 8002614:	f7ff fe4c 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 8002618:	2032      	movs	r0, #50	; 0x32
 800261a:	f000 fb9d 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("C", &Font_7x10, 1);
 800261e:	2201      	movs	r2, #1
 8002620:	491d      	ldr	r1, [pc, #116]	; (8002698 <oled_init+0x140>)
 8002622:	4824      	ldr	r0, [pc, #144]	; (80026b4 <oled_init+0x15c>)
 8002624:	f7ff feda 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 8002628:	2032      	movs	r0, #50	; 0x32
 800262a:	f000 fb95 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (83,10);
 800262e:	210a      	movs	r1, #10
 8002630:	2053      	movs	r0, #83	; 0x53
 8002632:	f7ff fe3d 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 8002636:	2032      	movs	r0, #50	; 0x32
 8002638:	f000 fb8e 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("%", &Font_7x10, 1);
 800263c:	2201      	movs	r2, #1
 800263e:	4916      	ldr	r1, [pc, #88]	; (8002698 <oled_init+0x140>)
 8002640:	481d      	ldr	r0, [pc, #116]	; (80026b8 <oled_init+0x160>)
 8002642:	f7ff fecb 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 8002646:	2032      	movs	r0, #50	; 0x32
 8002648:	f000 fb86 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (83,20);
 800264c:	2114      	movs	r1, #20
 800264e:	2053      	movs	r0, #83	; 0x53
 8002650:	f7ff fe2e 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 8002654:	2032      	movs	r0, #50	; 0x32
 8002656:	f000 fb7f 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("ug/m3", &Font_7x10, 1);
 800265a:	2201      	movs	r2, #1
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <oled_init+0x140>)
 800265e:	4817      	ldr	r0, [pc, #92]	; (80026bc <oled_init+0x164>)
 8002660:	f7ff febc 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 8002664:	2032      	movs	r0, #50	; 0x32
 8002666:	f000 fb77 	bl	8002d58 <HAL_Delay>
    SSD1306_GotoXY (83,31);
 800266a:	211f      	movs	r1, #31
 800266c:	2053      	movs	r0, #83	; 0x53
 800266e:	f7ff fe1f 	bl	80022b0 <SSD1306_GotoXY>
    HAL_Delay(50);
 8002672:	2032      	movs	r0, #50	; 0x32
 8002674:	f000 fb70 	bl	8002d58 <HAL_Delay>
    SSD1306_Puts ("ppm", &Font_7x10, 1);
 8002678:	2201      	movs	r2, #1
 800267a:	4907      	ldr	r1, [pc, #28]	; (8002698 <oled_init+0x140>)
 800267c:	4810      	ldr	r0, [pc, #64]	; (80026c0 <oled_init+0x168>)
 800267e:	f7ff fead 	bl	80023dc <SSD1306_Puts>
    HAL_Delay(50);
 8002682:	2032      	movs	r0, #50	; 0x32
 8002684:	f000 fb68 	bl	8002d58 <HAL_Delay>

    /*
    	-----UPDATE SCREEN TO DISPLAY-----
    */
      SSD1306_UpdateScreen();
 8002688:	f7ff fd64 	bl	8002154 <SSD1306_UpdateScreen>
      HAL_Delay(1000);
 800268c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002690:	f000 fb62 	bl	8002d58 <HAL_Delay>
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000000 	.word	0x20000000
 800269c:	0800bd60 	.word	0x0800bd60
 80026a0:	0800bd68 	.word	0x0800bd68
 80026a4:	0800bd70 	.word	0x0800bd70
 80026a8:	0800bd78 	.word	0x0800bd78
 80026ac:	0800bd80 	.word	0x0800bd80
 80026b0:	0800bd88 	.word	0x0800bd88
 80026b4:	0800bd90 	.word	0x0800bd90
 80026b8:	0800bd94 	.word	0x0800bd94
 80026bc:	0800bd98 	.word	0x0800bd98
 80026c0:	0800bda0 	.word	0x0800bda0

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_MspInit+0x5c>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_MspInit+0x5c>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6193      	str	r3, [r2, #24]
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_MspInit+0x5c>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_MspInit+0x5c>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <HAL_MspInit+0x5c>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_MspInit+0x5c>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_MspInit+0x60>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_MspInit+0x60>)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40021000 	.word	0x40021000
 8002724:	40010000 	.word	0x40010000

08002728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_ADC_MspInit+0x6c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d121      	bne.n	800278c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_ADC_MspInit+0x70>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_ADC_MspInit+0x70>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_ADC_MspInit+0x70>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_ADC_MspInit+0x70>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_ADC_MspInit+0x70>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_ADC_MspInit+0x70>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002778:	2302      	movs	r3, #2
 800277a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277c:	2303      	movs	r3, #3
 800277e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	4619      	mov	r1, r3
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <HAL_ADC_MspInit+0x74>)
 8002788:	f001 f958 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012400 	.word	0x40012400
 8002798:	40021000 	.word	0x40021000
 800279c:	40010800 	.word	0x40010800

080027a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a15      	ldr	r2, [pc, #84]	; (8002810 <HAL_I2C_MspInit+0x70>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d123      	bne.n	8002808 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_I2C_MspInit+0x74>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <HAL_I2C_MspInit+0x74>)
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_I2C_MspInit+0x74>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027dc:	2312      	movs	r3, #18
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	4619      	mov	r1, r3
 80027ea:	480b      	ldr	r0, [pc, #44]	; (8002818 <HAL_I2C_MspInit+0x78>)
 80027ec:	f001 f926 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_I2C_MspInit+0x74>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_I2C_MspInit+0x74>)
 80027f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fa:	61d3      	str	r3, [r2, #28]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_I2C_MspInit+0x74>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002808:	bf00      	nop
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40005400 	.word	0x40005400
 8002814:	40021000 	.word	0x40021000
 8002818:	40010c00 	.word	0x40010c00

0800281c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	; 0x30
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a79      	ldr	r2, [pc, #484]	; (8002a1c <HAL_UART_MspInit+0x200>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d158      	bne.n	80028ee <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800283c:	4b78      	ldr	r3, [pc, #480]	; (8002a20 <HAL_UART_MspInit+0x204>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a77      	ldr	r2, [pc, #476]	; (8002a20 <HAL_UART_MspInit+0x204>)
 8002842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <HAL_UART_MspInit+0x204>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <HAL_UART_MspInit+0x204>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a71      	ldr	r2, [pc, #452]	; (8002a20 <HAL_UART_MspInit+0x204>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_UART_MspInit+0x204>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800286c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	4619      	mov	r1, r3
 8002880:	4868      	ldr	r0, [pc, #416]	; (8002a24 <HAL_UART_MspInit+0x208>)
 8002882:	f001 f8db 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	4619      	mov	r1, r3
 800289a:	4862      	ldr	r0, [pc, #392]	; (8002a24 <HAL_UART_MspInit+0x208>)
 800289c:	f001 f8ce 	bl	8003a3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028a0:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028a2:	4a62      	ldr	r2, [pc, #392]	; (8002a2c <HAL_UART_MspInit+0x210>)
 80028a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a6:	4b60      	ldr	r3, [pc, #384]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ac:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b8:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028be:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028c4:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028c6:	2220      	movs	r2, #32
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ca:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028d0:	4855      	ldr	r0, [pc, #340]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028d2:	f000 fec5 	bl	8003660 <HAL_DMA_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80028dc:	f7ff fa06 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a51      	ldr	r2, [pc, #324]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80028e6:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <HAL_UART_MspInit+0x20c>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028ec:	e092      	b.n	8002a14 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_UART_MspInit+0x214>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d156      	bne.n	80029a6 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	4a48      	ldr	r2, [pc, #288]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002902:	61d3      	str	r3, [r2, #28]
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_UART_MspInit+0x204>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_UART_MspInit+0x204>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <HAL_UART_MspInit+0x204>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_UART_MspInit+0x204>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002928:	2304      	movs	r3, #4
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0320 	add.w	r3, r7, #32
 8002938:	4619      	mov	r1, r3
 800293a:	483a      	ldr	r0, [pc, #232]	; (8002a24 <HAL_UART_MspInit+0x208>)
 800293c:	f001 f87e 	bl	8003a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002940:	2308      	movs	r3, #8
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4619      	mov	r1, r3
 8002952:	4834      	ldr	r0, [pc, #208]	; (8002a24 <HAL_UART_MspInit+0x208>)
 8002954:	f001 f872 	bl	8003a3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_UART_MspInit+0x218>)
 800295a:	4a37      	ldr	r2, [pc, #220]	; (8002a38 <HAL_UART_MspInit+0x21c>)
 800295c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295e:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_UART_MspInit+0x218>)
 8002960:	2200      	movs	r2, #0
 8002962:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002964:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_UART_MspInit+0x218>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800296a:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <HAL_UART_MspInit+0x218>)
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <HAL_UART_MspInit+0x218>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_UART_MspInit+0x218>)
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <HAL_UART_MspInit+0x218>)
 800297e:	2220      	movs	r2, #32
 8002980:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_UART_MspInit+0x218>)
 8002984:	2200      	movs	r2, #0
 8002986:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002988:	482a      	ldr	r0, [pc, #168]	; (8002a34 <HAL_UART_MspInit+0x218>)
 800298a:	f000 fe69 	bl	8003660 <HAL_DMA_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8002994:	f7ff f9aa 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <HAL_UART_MspInit+0x218>)
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c
 800299e:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <HAL_UART_MspInit+0x218>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80029a4:	e036      	b.n	8002a14 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_UART_MspInit+0x220>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d131      	bne.n	8002a14 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80029b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ba:	61d3      	str	r3, [r2, #28]
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_UART_MspInit+0x204>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 0320 	add.w	r3, r7, #32
 80029f2:	4619      	mov	r1, r3
 80029f4:	4812      	ldr	r0, [pc, #72]	; (8002a40 <HAL_UART_MspInit+0x224>)
 80029f6:	f001 f821 	bl	8003a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 0320 	add.w	r3, r7, #32
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480c      	ldr	r0, [pc, #48]	; (8002a40 <HAL_UART_MspInit+0x224>)
 8002a10:	f001 f814 	bl	8003a3c <HAL_GPIO_Init>
}
 8002a14:	bf00      	nop
 8002a16:	3730      	adds	r7, #48	; 0x30
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010800 	.word	0x40010800
 8002a28:	20000368 	.word	0x20000368
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	40004400 	.word	0x40004400
 8002a34:	200003ac 	.word	0x200003ac
 8002a38:	4002006c 	.word	0x4002006c
 8002a3c:	40004800 	.word	0x40004800
 8002a40:	40010c00 	.word	0x40010c00

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <NMI_Handler+0x4>

08002a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <HardFault_Handler+0x4>

08002a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <MemManage_Handler+0x4>

08002a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8a:	f000 f949 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <DMA1_Channel5_IRQHandler+0x10>)
 8002a9a:	f000 fe9b 	bl	80037d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000368 	.word	0x20000368

08002aa8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <DMA1_Channel6_IRQHandler+0x10>)
 8002aae:	f000 fe91 	bl	80037d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003ac 	.word	0x200003ac

08002abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return 1;
 8002ac0:	2301      	movs	r3, #1
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <_kill>:

int _kill(int pid, int sig)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ad4:	f005 f9f4 	bl	8007ec0 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2216      	movs	r2, #22
 8002adc:	601a      	str	r2, [r3, #0]
  return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_exit>:

void _exit (int status)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002af2:	f04f 31ff 	mov.w	r1, #4294967295
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffe7 	bl	8002aca <_kill>
  while (1) {}    /* Make sure we hang here */
 8002afc:	e7fe      	b.n	8002afc <_exit+0x12>

08002afe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e00a      	b.n	8002b26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b10:	f3af 8000 	nop.w
 8002b14:	4601      	mov	r1, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	60ba      	str	r2, [r7, #8]
 8002b1c:	b2ca      	uxtb	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	dbf0      	blt.n	8002b10 <_read+0x12>
  }

  return len;
 8002b2e:	687b      	ldr	r3, [r7, #4]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e009      	b.n	8002b5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dbf1      	blt.n	8002b4a <_write+0x12>
  }
  return len;
 8002b66:	687b      	ldr	r3, [r7, #4]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_close>:

int _close(int file)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b96:	605a      	str	r2, [r3, #4]
  return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <_isatty>:

int _isatty(int file)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <_sbrk+0x5c>)
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <_sbrk+0x60>)
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_sbrk+0x64>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <_sbrk+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c00:	f005 f95e 	bl	8007ec0 <__errno>
 8002c04:	4603      	mov	r3, r0
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e009      	b.n	8002c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <_sbrk+0x64>)
 8002c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20005000 	.word	0x20005000
 8002c30:	00000400 	.word	0x00000400
 8002c34:	200007f8 	.word	0x200007f8
 8002c38:	20000950 	.word	0x20000950

08002c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8002c48:	f7ff fff8 	bl	8002c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c4c:	480b      	ldr	r0, [pc, #44]	; (8002c7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c4e:	490c      	ldr	r1, [pc, #48]	; (8002c80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c50:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c64:	4c09      	ldr	r4, [pc, #36]	; (8002c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c72:	f005 f92b 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c76:	f7fe fc07 	bl	8001488 <main>
  bx lr
 8002c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c84:	0800c9a0 	.word	0x0800c9a0
  ldr r2, =_sbss
 8002c88:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c8c:	2000094c 	.word	0x2000094c

08002c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC1_2_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_Init+0x28>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_Init+0x28>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 fc99 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002caa:	200f      	movs	r0, #15
 8002cac:	f000 f808 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb0:	f7ff fd08 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fcb1 	bl	8003646 <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f000 fc79 	bl	80035f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	2000000c 	.word	0x2000000c
 8002d18:	20000014 	.word	0x20000014
 8002d1c:	20000010 	.word	0x20000010

08002d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_IncTick+0x1c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_IncTick+0x20>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_IncTick+0x20>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000014 	.word	0x20000014
 8002d40:	200007fc 	.word	0x200007fc

08002d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_GetTick+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	200007fc 	.word	0x200007fc

08002d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff fff0 	bl	8002d44 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d005      	beq.n	8002d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_Delay+0x44>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d7e:	bf00      	nop
 8002d80:	f7ff ffe0 	bl	8002d44 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f7      	bhi.n	8002d80 <HAL_Delay+0x28>
  {
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000014 	.word	0x20000014

08002da0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0be      	b.n	8002f40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fca2 	bl	8002728 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 faeb 	bl	80033c0 <ADC_ConversionStop_Disable>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 8099 	bne.w	8002f2e <HAL_ADC_Init+0x18e>
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 8095 	bne.w	8002f2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7b1b      	ldrb	r3, [r3, #12]
 8002e26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e38:	d003      	beq.n	8002e42 <HAL_ADC_Init+0xa2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_ADC_Init+0xa8>
 8002e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e46:	e000      	b.n	8002e4a <HAL_ADC_Init+0xaa>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7d1b      	ldrb	r3, [r3, #20]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d119      	bne.n	8002e8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	7b1b      	ldrb	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	035a      	lsls	r2, r3, #13
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e00b      	b.n	8002e8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_ADC_Init+0x1a8>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebc:	d003      	beq.n	8002ec6 <HAL_ADC_Init+0x126>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d104      	bne.n	8002ed0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	051b      	lsls	r3, r3, #20
 8002ece:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_ADC_Init+0x1ac>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f0a:	e018      	b.n	8002f3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f023 0312 	bic.w	r3, r3, #18
 8002f14:	f043 0210 	orr.w	r2, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f2c:	e007      	b.n	8002f3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	ffe1f7fd 	.word	0xffe1f7fd
 8002f4c:	ff1f0efe 	.word	0xff1f0efe

08002f50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_Start+0x1a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e098      	b.n	800309c <HAL_ADC_Start+0x14c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9ca 	bl	800330c <ADC_Enable>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 8087 	bne.w	8003092 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <HAL_ADC_Start+0x154>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d105      	bne.n	8002fae <HAL_ADC_Start+0x5e>
 8002fa2:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_ADC_Start+0x158>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d115      	bne.n	8002fda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d026      	beq.n	8003016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd8:	e01d      	b.n	8003016 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <HAL_ADC_Start+0x158>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_ADC_Start+0xaa>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_ADC_Start+0x154>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10d      	bne.n	8003016 <HAL_ADC_Start+0xc6>
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_ADC_Start+0x158>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800300e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f023 0206 	bic.w	r2, r3, #6
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
 800302e:	e002      	b.n	8003036 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0202 	mvn.w	r2, #2
 8003046:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003052:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003056:	d113      	bne.n	8003080 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_ADC_Start+0x154>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d105      	bne.n	800306e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_ADC_Start+0x158>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	e00c      	b.n	800309a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	e003      	b.n	800309a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40012800 	.word	0x40012800
 80030a8:	40012400 	.word	0x40012400

080030ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Stop+0x1a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e01a      	b.n	80030fc <HAL_ADC_Stop+0x50>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f976 	bl	80033c0 <ADC_ConversionStop_Disable>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x20>
 8003138:	2302      	movs	r3, #2
 800313a:	e0dc      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x1da>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b06      	cmp	r3, #6
 800314a:	d81c      	bhi.n	8003186 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b05      	subs	r3, #5
 800315e:	221f      	movs	r2, #31
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	4019      	ands	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b05      	subs	r3, #5
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	635a      	str	r2, [r3, #52]	; 0x34
 8003184:	e03c      	b.n	8003200 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d81c      	bhi.n	80031c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	3b23      	subs	r3, #35	; 0x23
 80031a0:	221f      	movs	r2, #31
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	4019      	ands	r1, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	3b23      	subs	r3, #35	; 0x23
 80031ba:	fa00 f203 	lsl.w	r2, r0, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
 80031c6:	e01b      	b.n	8003200 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b41      	subs	r3, #65	; 0x41
 80031da:	221f      	movs	r2, #31
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	4019      	ands	r1, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b41      	subs	r3, #65	; 0x41
 80031f4:	fa00 f203 	lsl.w	r2, r0, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b09      	cmp	r3, #9
 8003206:	d91c      	bls.n	8003242 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	2207      	movs	r2, #7
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	4019      	ands	r1, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6898      	ldr	r0, [r3, #8]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	3b1e      	subs	r3, #30
 8003234:	fa00 f203 	lsl.w	r2, r0, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	e019      	b.n	8003276 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6919      	ldr	r1, [r3, #16]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	2207      	movs	r2, #7
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	4019      	ands	r1, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6898      	ldr	r0, [r3, #8]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	fa00 f203 	lsl.w	r2, r0, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b10      	cmp	r3, #16
 800327c:	d003      	beq.n	8003286 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003282:	2b11      	cmp	r3, #17
 8003284:	d132      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_ADC_ConfigChannel+0x1e4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d125      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d126      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d11a      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_ADC_ConfigChannel+0x1e8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <HAL_ADC_ConfigChannel+0x1ec>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0c9a      	lsrs	r2, r3, #18
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032cc:	e002      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f9      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x1b2>
 80032da:	e007      	b.n	80032ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012400 	.word	0x40012400
 8003304:	2000000c 	.word	0x2000000c
 8003308:	431bde83 	.word	0x431bde83

0800330c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d040      	beq.n	80033ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800333a:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <ADC_Enable+0xac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <ADC_Enable+0xb0>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	0c9b      	lsrs	r3, r3, #18
 8003346:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003348:	e002      	b.n	8003350 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3b01      	subs	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f9      	bne.n	800334a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003356:	f7ff fcf5 	bl	8002d44 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800335c:	e01f      	b.n	800339e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800335e:	f7ff fcf1 	bl	8002d44 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d918      	bls.n	800339e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d011      	beq.n	800339e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e007      	b.n	80033ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d1d8      	bne.n	800335e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000000c 	.word	0x2000000c
 80033bc:	431bde83 	.word	0x431bde83

080033c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d12e      	bne.n	8003438 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ea:	f7ff fcab 	bl	8002d44 <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033f0:	e01b      	b.n	800342a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033f2:	f7ff fca7 	bl	8002d44 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d914      	bls.n	800342a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10d      	bne.n	800342a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f043 0210 	orr.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d0dc      	beq.n	80033f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800346c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	60d3      	str	r3, [r2, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4906      	ldr	r1, [pc, #24]	; (80034dc <__NVIC_EnableIRQ+0x34>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a8:	d301      	bcc.n	80035ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <SysTick_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b6:	210f      	movs	r1, #15
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f7ff ff90 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SysTick_Config+0x40>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <SysTick_Config+0x40>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff2d 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff42 	bl	800348c <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff90 	bl	8003534 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff5f 	bl	80034e0 <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff35 	bl	80034a8 <__NVIC_EnableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffa2 	bl	8003598 <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e043      	b.n	80036fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_DMA_Init+0xa8>)
 800367e:	4413      	add	r3, r2
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <HAL_DMA_Init+0xac>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	009a      	lsls	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_DMA_Init+0xb0>)
 8003692:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	bffdfff8 	.word	0xbffdfff8
 800370c:	cccccccd 	.word	0xcccccccd
 8003710:	40020000 	.word	0x40020000

08003714 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_DMA_Start_IT+0x20>
 8003730:	2302      	movs	r3, #2
 8003732:	e04b      	b.n	80037cc <HAL_DMA_Start_IT+0xb8>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d13a      	bne.n	80037be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f937 	bl	80039e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 020e 	orr.w	r2, r2, #14
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e00f      	b.n	80037ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 020a 	orr.w	r2, r2, #10
 80037aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e005      	b.n	80037ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d04f      	beq.n	800389c <HAL_DMA_IRQHandler+0xc8>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04a      	beq.n	800389c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a66      	ldr	r2, [pc, #408]	; (80039c4 <HAL_DMA_IRQHandler+0x1f0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d029      	beq.n	8003882 <HAL_DMA_IRQHandler+0xae>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_DMA_IRQHandler+0x1f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_DMA_IRQHandler+0xaa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_DMA_IRQHandler+0x1f8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01a      	beq.n	8003878 <HAL_DMA_IRQHandler+0xa4>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a62      	ldr	r2, [pc, #392]	; (80039d0 <HAL_DMA_IRQHandler+0x1fc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d012      	beq.n	8003872 <HAL_DMA_IRQHandler+0x9e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a60      	ldr	r2, [pc, #384]	; (80039d4 <HAL_DMA_IRQHandler+0x200>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00a      	beq.n	800386c <HAL_DMA_IRQHandler+0x98>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5f      	ldr	r2, [pc, #380]	; (80039d8 <HAL_DMA_IRQHandler+0x204>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <HAL_DMA_IRQHandler+0x92>
 8003860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003864:	e00e      	b.n	8003884 <HAL_DMA_IRQHandler+0xb0>
 8003866:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800386a:	e00b      	b.n	8003884 <HAL_DMA_IRQHandler+0xb0>
 800386c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003870:	e008      	b.n	8003884 <HAL_DMA_IRQHandler+0xb0>
 8003872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003876:	e005      	b.n	8003884 <HAL_DMA_IRQHandler+0xb0>
 8003878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387c:	e002      	b.n	8003884 <HAL_DMA_IRQHandler+0xb0>
 800387e:	2340      	movs	r3, #64	; 0x40
 8003880:	e000      	b.n	8003884 <HAL_DMA_IRQHandler+0xb0>
 8003882:	2304      	movs	r3, #4
 8003884:	4a55      	ldr	r2, [pc, #340]	; (80039dc <HAL_DMA_IRQHandler+0x208>)
 8003886:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8094 	beq.w	80039ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800389a:	e08e      	b.n	80039ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2202      	movs	r2, #2
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d056      	beq.n	800395a <HAL_DMA_IRQHandler+0x186>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d051      	beq.n	800395a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 020a 	bic.w	r2, r2, #10
 80038d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a38      	ldr	r2, [pc, #224]	; (80039c4 <HAL_DMA_IRQHandler+0x1f0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d029      	beq.n	800393a <HAL_DMA_IRQHandler+0x166>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <HAL_DMA_IRQHandler+0x1f4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_IRQHandler+0x162>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a35      	ldr	r2, [pc, #212]	; (80039cc <HAL_DMA_IRQHandler+0x1f8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01a      	beq.n	8003930 <HAL_DMA_IRQHandler+0x15c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <HAL_DMA_IRQHandler+0x1fc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d012      	beq.n	800392a <HAL_DMA_IRQHandler+0x156>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a32      	ldr	r2, [pc, #200]	; (80039d4 <HAL_DMA_IRQHandler+0x200>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00a      	beq.n	8003924 <HAL_DMA_IRQHandler+0x150>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_DMA_IRQHandler+0x204>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d102      	bne.n	800391e <HAL_DMA_IRQHandler+0x14a>
 8003918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800391c:	e00e      	b.n	800393c <HAL_DMA_IRQHandler+0x168>
 800391e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003922:	e00b      	b.n	800393c <HAL_DMA_IRQHandler+0x168>
 8003924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003928:	e008      	b.n	800393c <HAL_DMA_IRQHandler+0x168>
 800392a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800392e:	e005      	b.n	800393c <HAL_DMA_IRQHandler+0x168>
 8003930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003934:	e002      	b.n	800393c <HAL_DMA_IRQHandler+0x168>
 8003936:	2320      	movs	r3, #32
 8003938:	e000      	b.n	800393c <HAL_DMA_IRQHandler+0x168>
 800393a:	2302      	movs	r3, #2
 800393c:	4a27      	ldr	r2, [pc, #156]	; (80039dc <HAL_DMA_IRQHandler+0x208>)
 800393e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d034      	beq.n	80039ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003958:	e02f      	b.n	80039ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2208      	movs	r2, #8
 8003960:	409a      	lsls	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_DMA_IRQHandler+0x1e8>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d023      	beq.n	80039bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020e 	bic.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
    }
  }
  return;
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
}
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40020008 	.word	0x40020008
 80039c8:	4002001c 	.word	0x4002001c
 80039cc:	40020030 	.word	0x40020030
 80039d0:	40020044 	.word	0x40020044
 80039d4:	40020058 	.word	0x40020058
 80039d8:	4002006c 	.word	0x4002006c
 80039dc:	40020000 	.word	0x40020000

080039e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d108      	bne.n	8003a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a1e:	e007      	b.n	8003a30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b08b      	sub	sp, #44	; 0x2c
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4e:	e169      	b.n	8003d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a50:	2201      	movs	r2, #1
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	f040 8158 	bne.w	8003d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a9a      	ldr	r2, [pc, #616]	; (8003cdc <HAL_GPIO_Init+0x2a0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d05e      	beq.n	8003b36 <HAL_GPIO_Init+0xfa>
 8003a78:	4a98      	ldr	r2, [pc, #608]	; (8003cdc <HAL_GPIO_Init+0x2a0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d875      	bhi.n	8003b6a <HAL_GPIO_Init+0x12e>
 8003a7e:	4a98      	ldr	r2, [pc, #608]	; (8003ce0 <HAL_GPIO_Init+0x2a4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d058      	beq.n	8003b36 <HAL_GPIO_Init+0xfa>
 8003a84:	4a96      	ldr	r2, [pc, #600]	; (8003ce0 <HAL_GPIO_Init+0x2a4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d86f      	bhi.n	8003b6a <HAL_GPIO_Init+0x12e>
 8003a8a:	4a96      	ldr	r2, [pc, #600]	; (8003ce4 <HAL_GPIO_Init+0x2a8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d052      	beq.n	8003b36 <HAL_GPIO_Init+0xfa>
 8003a90:	4a94      	ldr	r2, [pc, #592]	; (8003ce4 <HAL_GPIO_Init+0x2a8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d869      	bhi.n	8003b6a <HAL_GPIO_Init+0x12e>
 8003a96:	4a94      	ldr	r2, [pc, #592]	; (8003ce8 <HAL_GPIO_Init+0x2ac>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04c      	beq.n	8003b36 <HAL_GPIO_Init+0xfa>
 8003a9c:	4a92      	ldr	r2, [pc, #584]	; (8003ce8 <HAL_GPIO_Init+0x2ac>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d863      	bhi.n	8003b6a <HAL_GPIO_Init+0x12e>
 8003aa2:	4a92      	ldr	r2, [pc, #584]	; (8003cec <HAL_GPIO_Init+0x2b0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d046      	beq.n	8003b36 <HAL_GPIO_Init+0xfa>
 8003aa8:	4a90      	ldr	r2, [pc, #576]	; (8003cec <HAL_GPIO_Init+0x2b0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d85d      	bhi.n	8003b6a <HAL_GPIO_Init+0x12e>
 8003aae:	2b12      	cmp	r3, #18
 8003ab0:	d82a      	bhi.n	8003b08 <HAL_GPIO_Init+0xcc>
 8003ab2:	2b12      	cmp	r3, #18
 8003ab4:	d859      	bhi.n	8003b6a <HAL_GPIO_Init+0x12e>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_GPIO_Init+0x80>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003b37 	.word	0x08003b37
 8003ac0:	08003b11 	.word	0x08003b11
 8003ac4:	08003b23 	.word	0x08003b23
 8003ac8:	08003b65 	.word	0x08003b65
 8003acc:	08003b6b 	.word	0x08003b6b
 8003ad0:	08003b6b 	.word	0x08003b6b
 8003ad4:	08003b6b 	.word	0x08003b6b
 8003ad8:	08003b6b 	.word	0x08003b6b
 8003adc:	08003b6b 	.word	0x08003b6b
 8003ae0:	08003b6b 	.word	0x08003b6b
 8003ae4:	08003b6b 	.word	0x08003b6b
 8003ae8:	08003b6b 	.word	0x08003b6b
 8003aec:	08003b6b 	.word	0x08003b6b
 8003af0:	08003b6b 	.word	0x08003b6b
 8003af4:	08003b6b 	.word	0x08003b6b
 8003af8:	08003b6b 	.word	0x08003b6b
 8003afc:	08003b6b 	.word	0x08003b6b
 8003b00:	08003b19 	.word	0x08003b19
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	4a79      	ldr	r2, [pc, #484]	; (8003cf0 <HAL_GPIO_Init+0x2b4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b0e:	e02c      	b.n	8003b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	623b      	str	r3, [r7, #32]
          break;
 8003b16:	e029      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	623b      	str	r3, [r7, #32]
          break;
 8003b20:	e024      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	3308      	adds	r3, #8
 8003b28:	623b      	str	r3, [r7, #32]
          break;
 8003b2a:	e01f      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	330c      	adds	r3, #12
 8003b32:	623b      	str	r3, [r7, #32]
          break;
 8003b34:	e01a      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b3e:	2304      	movs	r3, #4
 8003b40:	623b      	str	r3, [r7, #32]
          break;
 8003b42:	e013      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	611a      	str	r2, [r3, #16]
          break;
 8003b56:	e009      	b.n	8003b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b58:	2308      	movs	r3, #8
 8003b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	615a      	str	r2, [r3, #20]
          break;
 8003b62:	e003      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e000      	b.n	8003b6c <HAL_GPIO_Init+0x130>
          break;
 8003b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2bff      	cmp	r3, #255	; 0xff
 8003b70:	d801      	bhi.n	8003b76 <HAL_GPIO_Init+0x13a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	e001      	b.n	8003b7a <HAL_GPIO_Init+0x13e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2bff      	cmp	r3, #255	; 0xff
 8003b80:	d802      	bhi.n	8003b88 <HAL_GPIO_Init+0x14c>
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	e002      	b.n	8003b8e <HAL_GPIO_Init+0x152>
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	3b08      	subs	r3, #8
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	210f      	movs	r1, #15
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	6a39      	ldr	r1, [r7, #32]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80b1 	beq.w	8003d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bbc:	4b4d      	ldr	r3, [pc, #308]	; (8003cf4 <HAL_GPIO_Init+0x2b8>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	4a4c      	ldr	r2, [pc, #304]	; (8003cf4 <HAL_GPIO_Init+0x2b8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6193      	str	r3, [r2, #24]
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_GPIO_Init+0x2b8>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bd4:	4a48      	ldr	r2, [pc, #288]	; (8003cf8 <HAL_GPIO_Init+0x2bc>)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	3302      	adds	r3, #2
 8003bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	220f      	movs	r2, #15
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <HAL_GPIO_Init+0x2c0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_GPIO_Init+0x1ec>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3f      	ldr	r2, [pc, #252]	; (8003d00 <HAL_GPIO_Init+0x2c4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00d      	beq.n	8003c24 <HAL_GPIO_Init+0x1e8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3e      	ldr	r2, [pc, #248]	; (8003d04 <HAL_GPIO_Init+0x2c8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <HAL_GPIO_Init+0x1e4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3d      	ldr	r2, [pc, #244]	; (8003d08 <HAL_GPIO_Init+0x2cc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_GPIO_Init+0x1e0>
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <HAL_GPIO_Init+0x1ee>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	e004      	b.n	8003c2a <HAL_GPIO_Init+0x1ee>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e002      	b.n	8003c2a <HAL_GPIO_Init+0x1ee>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_GPIO_Init+0x1ee>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	f002 0203 	and.w	r2, r2, #3
 8003c30:	0092      	lsls	r2, r2, #2
 8003c32:	4093      	lsls	r3, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c3a:	492f      	ldr	r1, [pc, #188]	; (8003cf8 <HAL_GPIO_Init+0x2bc>)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d006      	beq.n	8003c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c54:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	492c      	ldr	r1, [pc, #176]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
 8003c60:	e006      	b.n	8003c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c62:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	4928      	ldr	r1, [pc, #160]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d006      	beq.n	8003c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c7c:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4922      	ldr	r1, [pc, #136]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
 8003c88:	e006      	b.n	8003c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	491e      	ldr	r1, [pc, #120]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d006      	beq.n	8003cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	4918      	ldr	r1, [pc, #96]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	4914      	ldr	r1, [pc, #80]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d021      	beq.n	8003d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	490e      	ldr	r1, [pc, #56]	; (8003d0c <HAL_GPIO_Init+0x2d0>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e021      	b.n	8003d1e <HAL_GPIO_Init+0x2e2>
 8003cda:	bf00      	nop
 8003cdc:	10320000 	.word	0x10320000
 8003ce0:	10310000 	.word	0x10310000
 8003ce4:	10220000 	.word	0x10220000
 8003ce8:	10210000 	.word	0x10210000
 8003cec:	10120000 	.word	0x10120000
 8003cf0:	10110000 	.word	0x10110000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010800 	.word	0x40010800
 8003d00:	40010c00 	.word	0x40010c00
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	4909      	ldr	r1, [pc, #36]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	3301      	adds	r3, #1
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f47f ae8e 	bne.w	8003a50 <HAL_GPIO_Init+0x14>
  }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	372c      	adds	r7, #44	; 0x2c
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40010400 	.word	0x40010400

08003d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e12b      	b.n	8003fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe fd18 	bl	80027a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da8:	f001 fcf8 	bl	800579c <HAL_RCC_GetPCLK1Freq>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4a81      	ldr	r2, [pc, #516]	; (8003fb8 <HAL_I2C_Init+0x274>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d807      	bhi.n	8003dc8 <HAL_I2C_Init+0x84>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a80      	ldr	r2, [pc, #512]	; (8003fbc <HAL_I2C_Init+0x278>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bf94      	ite	ls
 8003dc0:	2301      	movls	r3, #1
 8003dc2:	2300      	movhi	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e006      	b.n	8003dd6 <HAL_I2C_Init+0x92>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a7d      	ldr	r2, [pc, #500]	; (8003fc0 <HAL_I2C_Init+0x27c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	bf94      	ite	ls
 8003dd0:	2301      	movls	r3, #1
 8003dd2:	2300      	movhi	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0e7      	b.n	8003fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a78      	ldr	r2, [pc, #480]	; (8003fc4 <HAL_I2C_Init+0x280>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0c9b      	lsrs	r3, r3, #18
 8003de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a6a      	ldr	r2, [pc, #424]	; (8003fb8 <HAL_I2C_Init+0x274>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d802      	bhi.n	8003e18 <HAL_I2C_Init+0xd4>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	e009      	b.n	8003e2c <HAL_I2C_Init+0xe8>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	4a69      	ldr	r2, [pc, #420]	; (8003fc8 <HAL_I2C_Init+0x284>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	495c      	ldr	r1, [pc, #368]	; (8003fb8 <HAL_I2C_Init+0x274>)
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	d819      	bhi.n	8003e80 <HAL_I2C_Init+0x13c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1e59      	subs	r1, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e60:	400b      	ands	r3, r1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_I2C_Init+0x138>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1e59      	subs	r1, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	e051      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	e04f      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d111      	bne.n	8003eac <HAL_I2C_Init+0x168>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e58      	subs	r0, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e012      	b.n	8003ed2 <HAL_I2C_Init+0x18e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e58      	subs	r0, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	0099      	lsls	r1, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Init+0x196>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e022      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10e      	bne.n	8003f00 <HAL_I2C_Init+0x1bc>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1e58      	subs	r0, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	440b      	add	r3, r1
 8003ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	e00f      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e58      	subs	r0, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	0099      	lsls	r1, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	6809      	ldr	r1, [r1, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6911      	ldr	r1, [r2, #16]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68d2      	ldr	r2, [r2, #12]
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	000186a0 	.word	0x000186a0
 8003fbc:	001e847f 	.word	0x001e847f
 8003fc0:	003d08ff 	.word	0x003d08ff
 8003fc4:	431bde83 	.word	0x431bde83
 8003fc8:	10624dd3 	.word	0x10624dd3

08003fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	460b      	mov	r3, r1
 8003fda:	817b      	strh	r3, [r7, #10]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7fe feb0 	bl	8002d44 <HAL_GetTick>
 8003fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	f040 80e0 	bne.w	80041b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2319      	movs	r3, #25
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4970      	ldr	r1, [pc, #448]	; (80041c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fdcc 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	e0d3      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_I2C_Master_Transmit+0x50>
 8004018:	2302      	movs	r3, #2
 800401a:	e0cc      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x1ea>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d007      	beq.n	8004042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2221      	movs	r2, #33	; 0x21
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2210      	movs	r2, #16
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	893a      	ldrh	r2, [r7, #8]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a50      	ldr	r2, [pc, #320]	; (80041c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fc36 	bl	80048fc <I2C_MasterRequestWrite>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e08d      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040b0:	e066      	b.n	8004180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	6a39      	ldr	r1, [r7, #32]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fe8a 	bl	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d107      	bne.n	80040da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06b      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	781a      	ldrb	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d11b      	bne.n	8004154 <HAL_I2C_Master_Transmit+0x188>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d017      	beq.n	8004154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	6a39      	ldr	r1, [r7, #32]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fe81 	bl	8004e60 <I2C_WaitOnBTFFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b04      	cmp	r3, #4
 800416a:	d107      	bne.n	800417c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e01a      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d194      	bne.n	80040b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	00100002 	.word	0x00100002
 80041c4:	ffff0000 	.word	0xffff0000

080041c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	461a      	mov	r2, r3
 80041d4:	460b      	mov	r3, r1
 80041d6:	817b      	strh	r3, [r7, #10]
 80041d8:	4613      	mov	r3, r2
 80041da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7fe fdb0 	bl	8002d44 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f040 824b 	bne.w	800468a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	497f      	ldr	r1, [pc, #508]	; (80043fc <HAL_I2C_Master_Receive+0x234>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fccc 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	e23e      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_I2C_Master_Receive+0x54>
 8004218:	2302      	movs	r3, #2
 800421a:	e237      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d007      	beq.n	8004242 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004250:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2222      	movs	r2, #34	; 0x22
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2210      	movs	r2, #16
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	893a      	ldrh	r2, [r7, #8]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a5f      	ldr	r2, [pc, #380]	; (8004400 <HAL_I2C_Master_Receive+0x238>)
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fbb8 	bl	8004a00 <I2C_MasterRequestRead>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e1f8      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d113      	bne.n	80042ca <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e1cc      	b.n	8004664 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d11e      	bne.n	8004310 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042e2:	b672      	cpsid	i
}
 80042e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800430c:	b662      	cpsie	i
}
 800430e:	e035      	b.n	800437c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11e      	bne.n	8004356 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004328:	b672      	cpsid	i
}
 800432a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004352:	b662      	cpsie	i
}
 8004354:	e012      	b.n	800437c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800437c:	e172      	b.n	8004664 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b03      	cmp	r3, #3
 8004384:	f200 811f 	bhi.w	80045c6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	2b01      	cmp	r3, #1
 800438e:	d123      	bne.n	80043d8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fdab 	bl	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e173      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043d6:	e145      	b.n	8004664 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d152      	bne.n	8004486 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	2200      	movs	r2, #0
 80043e8:	4906      	ldr	r1, [pc, #24]	; (8004404 <HAL_I2C_Master_Receive+0x23c>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fbd6 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e148      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
 80043fa:	bf00      	nop
 80043fc:	00100002 	.word	0x00100002
 8004400:	ffff0000 	.word	0xffff0000
 8004404:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004408:	b672      	cpsid	i
}
 800440a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800444e:	b662      	cpsie	i
}
 8004450:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004484:	e0ee      	b.n	8004664 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	4981      	ldr	r1, [pc, #516]	; (8004694 <HAL_I2C_Master_Receive+0x4cc>)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fb83 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0f5      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044b0:	b672      	cpsid	i
}
 80044b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044e6:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_I2C_Master_Receive+0x4d0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	08db      	lsrs	r3, r3, #3
 80044ec:	4a6b      	ldr	r2, [pc, #428]	; (800469c <HAL_I2C_Master_Receive+0x4d4>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	0a1a      	lsrs	r2, r3, #8
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00da      	lsls	r2, r3, #3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	3b01      	subs	r3, #1
 8004504:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d118      	bne.n	800453e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800452e:	b662      	cpsie	i
}
 8004530:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0a6      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d1d9      	bne.n	8004500 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800458e:	b662      	cpsie	i
}
 8004590:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045c4:	e04e      	b.n	8004664 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fc90 	bl	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e058      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d124      	bne.n	8004664 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	2b03      	cmp	r3, #3
 8004620:	d107      	bne.n	8004632 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	f47f ae88 	bne.w	800437e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	00010004 	.word	0x00010004
 8004698:	2000000c 	.word	0x2000000c
 800469c:	14f8b589 	.word	0x14f8b589

080046a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	460b      	mov	r3, r1
 80046ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80046b0:	f7fe fb48 	bl	8002d44 <HAL_GetTick>
 80046b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	f040 8111 	bne.w	80048ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2319      	movs	r3, #25
 80046ce:	2201      	movs	r2, #1
 80046d0:	4988      	ldr	r1, [pc, #544]	; (80048f4 <HAL_I2C_IsDeviceReady+0x254>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fa62 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
 80046e0:	e104      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_I2C_IsDeviceReady+0x50>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0fd      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d007      	beq.n	8004716 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004724:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2224      	movs	r2, #36	; 0x24
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a70      	ldr	r2, [pc, #448]	; (80048f8 <HAL_I2C_IsDeviceReady+0x258>)
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004748:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2200      	movs	r2, #0
 8004752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fa20 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004770:	d103      	bne.n	800477a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0b6      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800478c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800478e:	f7fe fad9 	bl	8002d44 <HAL_GetTick>
 8004792:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047c2:	e025      	b.n	8004810 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047c4:	f7fe fabe 	bl	8002d44 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <HAL_I2C_IsDeviceReady+0x13a>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	22a0      	movs	r2, #160	; 0xa0
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2ba0      	cmp	r3, #160	; 0xa0
 800481a:	d005      	beq.n	8004828 <HAL_I2C_IsDeviceReady+0x188>
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <HAL_I2C_IsDeviceReady+0x188>
 8004822:	7dbb      	ldrb	r3, [r7, #22]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0cd      	beq.n	80047c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d129      	bne.n	8004892 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2319      	movs	r3, #25
 800486a:	2201      	movs	r2, #1
 800486c:	4921      	ldr	r1, [pc, #132]	; (80048f4 <HAL_I2C_IsDeviceReady+0x254>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f994 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e036      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e02c      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2319      	movs	r3, #25
 80048b2:	2201      	movs	r2, #1
 80048b4:	490f      	ldr	r1, [pc, #60]	; (80048f4 <HAL_I2C_IsDeviceReady+0x254>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f970 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e012      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	3301      	adds	r3, #1
 80048ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	f4ff af32 	bcc.w	800473a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	00100002 	.word	0x00100002
 80048f8:	ffff0000 	.word	0xffff0000

080048fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	460b      	mov	r3, r1
 800490a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d006      	beq.n	8004926 <I2C_MasterRequestWrite+0x2a>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d003      	beq.n	8004926 <I2C_MasterRequestWrite+0x2a>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004924:	d108      	bne.n	8004938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e00b      	b.n	8004950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2b12      	cmp	r3, #18
 800493e:	d107      	bne.n	8004950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800494e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f91d 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004976:	d103      	bne.n	8004980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e035      	b.n	80049f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498c:	d108      	bne.n	80049a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800499c:	611a      	str	r2, [r3, #16]
 800499e:	e01b      	b.n	80049d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	11db      	asrs	r3, r3, #7
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0306 	and.w	r3, r3, #6
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f063 030f 	orn	r3, r3, #15
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	490e      	ldr	r1, [pc, #56]	; (80049f8 <I2C_MasterRequestWrite+0xfc>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f966 	bl	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e010      	b.n	80049f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049ce:	897b      	ldrh	r3, [r7, #10]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4907      	ldr	r1, [pc, #28]	; (80049fc <I2C_MasterRequestWrite+0x100>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f956 	bl	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	00010008 	.word	0x00010008
 80049fc:	00010002 	.word	0x00010002

08004a00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d006      	beq.n	8004a3a <I2C_MasterRequestRead+0x3a>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d003      	beq.n	8004a3a <I2C_MasterRequestRead+0x3a>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a38:	d108      	bne.n	8004a4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e00b      	b.n	8004a64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b11      	cmp	r3, #17
 8004a52:	d107      	bne.n	8004a64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f893 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8a:	d103      	bne.n	8004a94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e079      	b.n	8004b8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa0:	d108      	bne.n	8004ab4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	611a      	str	r2, [r3, #16]
 8004ab2:	e05f      	b.n	8004b74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ab4:	897b      	ldrh	r3, [r7, #10]
 8004ab6:	11db      	asrs	r3, r3, #7
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 0306 	and.w	r3, r3, #6
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f063 030f 	orn	r3, r3, #15
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4930      	ldr	r1, [pc, #192]	; (8004b94 <I2C_MasterRequestRead+0x194>)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8dc 	bl	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e054      	b.n	8004b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ae2:	897b      	ldrh	r3, [r7, #10]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4929      	ldr	r1, [pc, #164]	; (8004b98 <I2C_MasterRequestRead+0x198>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f8cc 	bl	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e044      	b.n	8004b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f831 	bl	8004b9c <I2C_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	d103      	bne.n	8004b58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e017      	b.n	8004b8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b5c:	897b      	ldrh	r3, [r7, #10]
 8004b5e:	11db      	asrs	r3, r3, #7
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0306 	and.w	r3, r3, #6
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f063 030e 	orn	r3, r3, #14
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4907      	ldr	r1, [pc, #28]	; (8004b98 <I2C_MasterRequestRead+0x198>)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f888 	bl	8004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	00010008 	.word	0x00010008
 8004b98:	00010002 	.word	0x00010002

08004b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bac:	e048      	b.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d044      	beq.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fe f8c5 	bl	8002d44 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d139      	bne.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10d      	bne.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	e00c      	b.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d116      	bne.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	f043 0220 	orr.w	r2, r3, #32
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e023      	b.n	8004c88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10d      	bne.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	e00c      	b.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	43da      	mvns	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4013      	ands	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d093      	beq.n	8004bae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c9e:	e071      	b.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d123      	bne.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0204 	orr.w	r2, r3, #4
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e067      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d041      	beq.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fe f820 	bl	8002d44 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d136      	bne.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10c      	bne.n	8004d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e00b      	b.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	43da      	mvns	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e021      	b.n	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10c      	bne.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	43da      	mvns	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e00b      	b.n	8004dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f af6d 	bne.w	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ddc:	e034      	b.n	8004e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f8e3 	bl	8004faa <I2C_IsAcknowledgeFailed>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e034      	b.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d028      	beq.n	8004e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7fd ffa5 	bl	8002d44 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11d      	bne.n	8004e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d016      	beq.n	8004e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d1c3      	bne.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e6c:	e034      	b.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f89b 	bl	8004faa <I2C_IsAcknowledgeFailed>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e034      	b.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d028      	beq.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fd ff5d 	bl	8002d44 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11d      	bne.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d016      	beq.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e007      	b.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d1c3      	bne.n	8004e6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004efc:	e049      	b.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d119      	bne.n	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0210 	mvn.w	r2, #16
 8004f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e030      	b.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f40:	f7fd ff00 	bl	8002d44 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11d      	bne.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d016      	beq.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e007      	b.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d1ae      	bne.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc0:	d11b      	bne.n	8004ffa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
	...

08005008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e272      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8087 	beq.w	8005136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005028:	4b92      	ldr	r3, [pc, #584]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b04      	cmp	r3, #4
 8005032:	d00c      	beq.n	800504e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005034:	4b8f      	ldr	r3, [pc, #572]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b08      	cmp	r3, #8
 800503e:	d112      	bne.n	8005066 <HAL_RCC_OscConfig+0x5e>
 8005040:	4b8c      	ldr	r3, [pc, #560]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504c:	d10b      	bne.n	8005066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504e:	4b89      	ldr	r3, [pc, #548]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d06c      	beq.n	8005134 <HAL_RCC_OscConfig+0x12c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d168      	bne.n	8005134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e24c      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x76>
 8005070:	4b80      	ldr	r3, [pc, #512]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e02e      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x98>
 8005086:	4b7b      	ldr	r3, [pc, #492]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7a      	ldr	r2, [pc, #488]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 800508c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b78      	ldr	r3, [pc, #480]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a77      	ldr	r2, [pc, #476]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e01d      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0xbc>
 80050aa:	4b72      	ldr	r3, [pc, #456]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a71      	ldr	r2, [pc, #452]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b6f      	ldr	r3, [pc, #444]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6e      	ldr	r2, [pc, #440]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e00b      	b.n	80050dc <HAL_RCC_OscConfig+0xd4>
 80050c4:	4b6b      	ldr	r3, [pc, #428]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a6a      	ldr	r2, [pc, #424]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b68      	ldr	r3, [pc, #416]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a67      	ldr	r2, [pc, #412]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fd fe2e 	bl	8002d44 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fd fe2a 	bl	8002d44 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e200      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0xe4>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fd fe1a 	bl	8002d44 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7fd fe16 	bl	8002d44 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1ec      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005126:	4b53      	ldr	r3, [pc, #332]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x10c>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d063      	beq.n	800520a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005142:	4b4c      	ldr	r3, [pc, #304]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800514e:	4b49      	ldr	r3, [pc, #292]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b08      	cmp	r3, #8
 8005158:	d11c      	bne.n	8005194 <HAL_RCC_OscConfig+0x18c>
 800515a:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x176>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e1c0      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4939      	ldr	r1, [pc, #228]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005192:	e03a      	b.n	800520a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519c:	4b36      	ldr	r3, [pc, #216]	; (8005278 <HAL_RCC_OscConfig+0x270>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a2:	f7fd fdcf 	bl	8002d44 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051aa:	f7fd fdcb 	bl	8002d44 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1a1      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051bc:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4927      	ldr	r1, [pc, #156]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
 80051dc:	e015      	b.n	800520a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051de:	4b26      	ldr	r3, [pc, #152]	; (8005278 <HAL_RCC_OscConfig+0x270>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fd fdae 	bl	8002d44 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ec:	f7fd fdaa 	bl	8002d44 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e180      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d03a      	beq.n	800528c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d019      	beq.n	8005252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_RCC_OscConfig+0x274>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005224:	f7fd fd8e 	bl	8002d44 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522c:	f7fd fd8a 	bl	8002d44 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e160      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_RCC_OscConfig+0x26c>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800524a:	2001      	movs	r0, #1
 800524c:	f000 face 	bl	80057ec <RCC_Delay>
 8005250:	e01c      	b.n	800528c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <HAL_RCC_OscConfig+0x274>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005258:	f7fd fd74 	bl	8002d44 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525e:	e00f      	b.n	8005280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005260:	f7fd fd70 	bl	8002d44 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d908      	bls.n	8005280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e146      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
 8005278:	42420000 	.word	0x42420000
 800527c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e9      	bne.n	8005260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a6 	beq.w	80053e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529e:	4b8b      	ldr	r3, [pc, #556]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052aa:	4b88      	ldr	r3, [pc, #544]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	4a87      	ldr	r2, [pc, #540]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	61d3      	str	r3, [r2, #28]
 80052b6:	4b85      	ldr	r3, [pc, #532]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c6:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <HAL_RCC_OscConfig+0x4c8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d118      	bne.n	8005304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d2:	4b7f      	ldr	r3, [pc, #508]	; (80054d0 <HAL_RCC_OscConfig+0x4c8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7e      	ldr	r2, [pc, #504]	; (80054d0 <HAL_RCC_OscConfig+0x4c8>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052de:	f7fd fd31 	bl	8002d44 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fd fd2d 	bl	8002d44 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b64      	cmp	r3, #100	; 0x64
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e103      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f8:	4b75      	ldr	r3, [pc, #468]	; (80054d0 <HAL_RCC_OscConfig+0x4c8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x312>
 800530c:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a6e      	ldr	r2, [pc, #440]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6213      	str	r3, [r2, #32]
 8005318:	e02d      	b.n	8005376 <HAL_RCC_OscConfig+0x36e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0x334>
 8005322:	4b6a      	ldr	r3, [pc, #424]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a69      	ldr	r2, [pc, #420]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	4b67      	ldr	r3, [pc, #412]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a66      	ldr	r2, [pc, #408]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6213      	str	r3, [r2, #32]
 800533a:	e01c      	b.n	8005376 <HAL_RCC_OscConfig+0x36e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b05      	cmp	r3, #5
 8005342:	d10c      	bne.n	800535e <HAL_RCC_OscConfig+0x356>
 8005344:	4b61      	ldr	r3, [pc, #388]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4a60      	ldr	r2, [pc, #384]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	6213      	str	r3, [r2, #32]
 8005350:	4b5e      	ldr	r3, [pc, #376]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4a5d      	ldr	r2, [pc, #372]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6213      	str	r3, [r2, #32]
 800535c:	e00b      	b.n	8005376 <HAL_RCC_OscConfig+0x36e>
 800535e:	4b5b      	ldr	r3, [pc, #364]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a5a      	ldr	r2, [pc, #360]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	6213      	str	r3, [r2, #32]
 800536a:	4b58      	ldr	r3, [pc, #352]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a57      	ldr	r2, [pc, #348]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d015      	beq.n	80053aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537e:	f7fd fce1 	bl	8002d44 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005384:	e00a      	b.n	800539c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fd fcdd 	bl	8002d44 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0b1      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539c:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ee      	beq.n	8005386 <HAL_RCC_OscConfig+0x37e>
 80053a8:	e014      	b.n	80053d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fd fccb 	bl	8002d44 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fd fcc7 	bl	8002d44 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e09b      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c8:	4b40      	ldr	r3, [pc, #256]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ee      	bne.n	80053b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d105      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053da:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	4a3b      	ldr	r2, [pc, #236]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80053e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8087 	beq.w	80054fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f0:	4b36      	ldr	r3, [pc, #216]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 030c 	and.w	r3, r3, #12
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d061      	beq.n	80054c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d146      	bne.n	8005492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005404:	4b33      	ldr	r3, [pc, #204]	; (80054d4 <HAL_RCC_OscConfig+0x4cc>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fd fc9b 	bl	8002d44 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005412:	f7fd fc97 	bl	8002d44 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e06d      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005424:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005438:	d108      	bne.n	800544c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800543a:	4b24      	ldr	r3, [pc, #144]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	4921      	ldr	r1, [pc, #132]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800544c:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a19      	ldr	r1, [r3, #32]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	430b      	orrs	r3, r1
 800545e:	491b      	ldr	r1, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <HAL_RCC_OscConfig+0x4cc>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546a:	f7fd fc6b 	bl	8002d44 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005472:	f7fd fc67 	bl	8002d44 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e03d      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x46a>
 8005490:	e035      	b.n	80054fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <HAL_RCC_OscConfig+0x4cc>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fd fc54 	bl	8002d44 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fd fc50 	bl	8002d44 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e026      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCC_OscConfig+0x4c4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x498>
 80054be:	e01e      	b.n	80054fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e019      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
 80054d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_OscConfig+0x500>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d106      	bne.n	80054fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000

0800550c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0d0      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b6a      	ldr	r3, [pc, #424]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d910      	bls.n	8005550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b67      	ldr	r3, [pc, #412]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 0207 	bic.w	r2, r3, #7
 8005536:	4965      	ldr	r1, [pc, #404]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b63      	ldr	r3, [pc, #396]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0b8      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d020      	beq.n	800559e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005568:	4b59      	ldr	r3, [pc, #356]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a58      	ldr	r2, [pc, #352]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005580:	4b53      	ldr	r3, [pc, #332]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a52      	ldr	r2, [pc, #328]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800558a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558c:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	494d      	ldr	r1, [pc, #308]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	4313      	orrs	r3, r2
 800559c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d040      	beq.n	800562c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d107      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d115      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e07f      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ca:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e073      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055da:	4b3d      	ldr	r3, [pc, #244]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e06b      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f023 0203 	bic.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4936      	ldr	r1, [pc, #216]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fd fba2 	bl	8002d44 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005602:	e00a      	b.n	800561a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005604:	f7fd fb9e 	bl	8002d44 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e053      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 020c 	and.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d1eb      	bne.n	8005604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800562c:	4b27      	ldr	r3, [pc, #156]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d210      	bcs.n	800565c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b24      	ldr	r3, [pc, #144]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 0207 	bic.w	r2, r3, #7
 8005642:	4922      	ldr	r1, [pc, #136]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e032      	b.n	80056c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005668:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4916      	ldr	r1, [pc, #88]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005686:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	490e      	ldr	r1, [pc, #56]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005696:	4313      	orrs	r3, r2
 8005698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800569a:	f000 f821 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	490a      	ldr	r1, [pc, #40]	; (80056d4 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	5ccb      	ldrb	r3, [r1, r3]
 80056ae:	fa22 f303 	lsr.w	r3, r2, r3
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <HAL_RCC_ClockConfig+0x1cc>)
 80056b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_RCC_ClockConfig+0x1d0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fd fb00 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40022000 	.word	0x40022000
 80056d0:	40021000 	.word	0x40021000
 80056d4:	0800c510 	.word	0x0800c510
 80056d8:	2000000c 	.word	0x2000000c
 80056dc:	20000010 	.word	0x20000010

080056e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056fa:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCC_GetSysClockFreq+0x94>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d002      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x30>
 800570a:	2b08      	cmp	r3, #8
 800570c:	d003      	beq.n	8005716 <HAL_RCC_GetSysClockFreq+0x36>
 800570e:	e027      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005710:	4b19      	ldr	r3, [pc, #100]	; (8005778 <HAL_RCC_GetSysClockFreq+0x98>)
 8005712:	613b      	str	r3, [r7, #16]
      break;
 8005714:	e027      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	0c9b      	lsrs	r3, r3, #18
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005720:	5cd3      	ldrb	r3, [r2, r3]
 8005722:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d010      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_RCC_GetSysClockFreq+0x94>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	0c5b      	lsrs	r3, r3, #17
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	4a11      	ldr	r2, [pc, #68]	; (8005780 <HAL_RCC_GetSysClockFreq+0xa0>)
 800573a:	5cd3      	ldrb	r3, [r2, r3]
 800573c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a0d      	ldr	r2, [pc, #52]	; (8005778 <HAL_RCC_GetSysClockFreq+0x98>)
 8005742:	fb03 f202 	mul.w	r2, r3, r2
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e004      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	613b      	str	r3, [r7, #16]
      break;
 800575e:	e002      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_GetSysClockFreq+0x98>)
 8005762:	613b      	str	r3, [r7, #16]
      break;
 8005764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005766:	693b      	ldr	r3, [r7, #16]
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000
 8005778:	007a1200 	.word	0x007a1200
 800577c:	0800c528 	.word	0x0800c528
 8005780:	0800c538 	.word	0x0800c538
 8005784:	003d0900 	.word	0x003d0900

08005788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800578c:	4b02      	ldr	r3, [pc, #8]	; (8005798 <HAL_RCC_GetHCLKFreq+0x10>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	2000000c 	.word	0x2000000c

0800579c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057a0:	f7ff fff2 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4903      	ldr	r1, [pc, #12]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b2:	5ccb      	ldrb	r3, [r1, r3]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	0800c520 	.word	0x0800c520

080057c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057c8:	f7ff ffde 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	0adb      	lsrs	r3, r3, #11
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	4903      	ldr	r1, [pc, #12]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057da:	5ccb      	ldrb	r3, [r1, r3]
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40021000 	.word	0x40021000
 80057e8:	0800c520 	.word	0x0800c520

080057ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <RCC_Delay+0x34>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <RCC_Delay+0x38>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	0a5b      	lsrs	r3, r3, #9
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005808:	bf00      	nop
  }
  while (Delay --);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1e5a      	subs	r2, r3, #1
 800580e:	60fa      	str	r2, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f9      	bne.n	8005808 <RCC_Delay+0x1c>
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	2000000c 	.word	0x2000000c
 8005824:	10624dd3 	.word	0x10624dd3

08005828 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d07d      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005848:	4b4f      	ldr	r3, [pc, #316]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10d      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005854:	4b4c      	ldr	r3, [pc, #304]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	4a4b      	ldr	r2, [pc, #300]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585e:	61d3      	str	r3, [r2, #28]
 8005860:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	4b46      	ldr	r3, [pc, #280]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d118      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800587c:	4b43      	ldr	r3, [pc, #268]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a42      	ldr	r2, [pc, #264]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005888:	f7fd fa5c 	bl	8002d44 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588e:	e008      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005890:	f7fd fa58 	bl	8002d44 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	; 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e06d      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a2:	4b3a      	ldr	r3, [pc, #232]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ae:	4b36      	ldr	r3, [pc, #216]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02e      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d027      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058cc:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058d6:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058dc:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058e2:	4a29      	ldr	r2, [pc, #164]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d014      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f2:	f7fd fa27 	bl	8002d44 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f8:	e00a      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fd fa23 	bl	8002d44 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e036      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ee      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4917      	ldr	r1, [pc, #92]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592a:	4313      	orrs	r3, r2
 800592c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	490b      	ldr	r1, [pc, #44]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800596a:	4b07      	ldr	r3, [pc, #28]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	4904      	ldr	r1, [pc, #16]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005978:	4313      	orrs	r3, r2
 800597a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000
 800598c:	40007000 	.word	0x40007000
 8005990:	42420440 	.word	0x42420440

08005994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e042      	b.n	8005a2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fc ff2e 	bl	800281c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	; 0x24
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb89 	bl	80060f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d16d      	bne.n	8005b30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_UART_Transmit+0x2c>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e066      	b.n	8005b32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a72:	f7fd f967 	bl	8002d44 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d108      	bne.n	8005aa0 <HAL_UART_Transmit+0x6c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e003      	b.n	8005aa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aa8:	e02a      	b.n	8005b00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2180      	movs	r1, #128	; 0x80
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f989 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e036      	b.n	8005b32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	3302      	adds	r3, #2
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	e007      	b.n	8005af2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1cf      	bne.n	8005aaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	; 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f959 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e006      	b.n	8005b32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	4613      	mov	r3, r2
 8005b46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d112      	bne.n	8005b7a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Receive_DMA+0x26>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e00b      	b.n	8005b7c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f999 	bl	8005ea8 <UART_Start_Receive_DMA>
 8005b76:	4603      	mov	r3, r0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b09c      	sub	sp, #112	; 0x70
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d172      	bne.n	8005cd2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c12:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c14:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c46:	647a      	str	r2, [r7, #68]	; 0x44
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c70:	663b      	str	r3, [r7, #96]	; 0x60
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d119      	bne.n	8005cd2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cbe:	61fa      	str	r2, [r7, #28]
 8005cc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	617b      	str	r3, [r7, #20]
   return(result);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ce8:	f7ff ff67 	bl	8005bba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cec:	e002      	b.n	8005cf4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005cee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cf0:	f7ff ff48 	bl	8005b84 <HAL_UART_RxCpltCallback>
}
 8005cf4:	bf00      	nop
 8005cf6:	3770      	adds	r7, #112	; 0x70
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d108      	bne.n	8005d2a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff ff49 	bl	8005bba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d28:	e002      	b.n	8005d30 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff ff33 	bl	8005b96 <HAL_UART_RxHalfCpltCallback>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf14      	ite	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	2300      	moveq	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b21      	cmp	r3, #33	; 0x21
 8005d6a:	d108      	bne.n	8005d7e <UART_DMAError+0x46>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d78:	68b8      	ldr	r0, [r7, #8]
 8005d7a:	f000 f92f 	bl	8005fdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf14      	ite	ne
 8005d8c:	2301      	movne	r3, #1
 8005d8e:	2300      	moveq	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b22      	cmp	r3, #34	; 0x22
 8005d9e:	d108      	bne.n	8005db2 <UART_DMAError+0x7a>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2200      	movs	r2, #0
 8005daa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005dac:	68b8      	ldr	r0, [r7, #8]
 8005dae:	f000 f93c 	bl	800602a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f043 0210 	orr.w	r2, r3, #16
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f7ff fef2 	bl	8005ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b090      	sub	sp, #64	; 0x40
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e050      	b.n	8005e80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d04c      	beq.n	8005e80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005dec:	f7fc ffaa 	bl	8002d44 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d241      	bcs.n	8005e80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e1c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e50:	623a      	str	r2, [r7, #32]
 8005e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	6a3a      	ldr	r2, [r7, #32]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e5      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e00f      	b.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	bf0c      	ite	eq
 8005e90:	2301      	moveq	r3, #1
 8005e92:	2300      	movne	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d09f      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3740      	adds	r7, #64	; 0x40
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b098      	sub	sp, #96	; 0x60
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2222      	movs	r2, #34	; 0x22
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	4a3e      	ldr	r2, [pc, #248]	; (8005fd0 <UART_Start_Receive_DMA+0x128>)
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	4a3d      	ldr	r2, [pc, #244]	; (8005fd4 <UART_Start_Receive_DMA+0x12c>)
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	4a3c      	ldr	r2, [pc, #240]	; (8005fd8 <UART_Start_Receive_DMA+0x130>)
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	2200      	movs	r2, #0
 8005eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	f7fd fc04 	bl	8003714 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d019      	beq.n	8005f5e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3314      	adds	r3, #20
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	657b      	str	r3, [r7, #84]	; 0x54
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e5      	bne.n	8005f5e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3314      	adds	r3, #20
 8005f98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3314      	adds	r3, #20
 8005fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6a39      	ldr	r1, [r7, #32]
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e5      	bne.n	8005f92 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3760      	adds	r7, #96	; 0x60
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	08005bd1 	.word	0x08005bd1
 8005fd4:	08005cfd 	.word	0x08005cfd
 8005fd8:	08005d39 	.word	0x08005d39

08005fdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	61ba      	str	r2, [r7, #24]
 8006006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6979      	ldr	r1, [r7, #20]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	613b      	str	r3, [r7, #16]
   return(result);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e5      	bne.n	8005fe4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006020:	bf00      	nop
 8006022:	3724      	adds	r7, #36	; 0x24
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800602a:	b480      	push	{r7}
 800602c:	b095      	sub	sp, #84	; 0x54
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	330c      	adds	r3, #12
 8006050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006052:	643a      	str	r2, [r7, #64]	; 0x40
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e5      	bne.n	8006032 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3314      	adds	r3, #20
 800606c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	61fb      	str	r3, [r7, #28]
   return(result);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	64bb      	str	r3, [r7, #72]	; 0x48
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3314      	adds	r3, #20
 8006084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e5      	bne.n	8006066 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d119      	bne.n	80060d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c2:	61ba      	str	r2, [r7, #24]
 80060c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	613b      	str	r3, [r7, #16]
   return(result);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060e4:	bf00      	nop
 80060e6:	3754      	adds	r7, #84	; 0x54
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr
	...

080060f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800612a:	f023 030c 	bic.w	r3, r3, #12
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	430b      	orrs	r3, r1
 8006136:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2c      	ldr	r2, [pc, #176]	; (8006204 <UART_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d103      	bne.n	8006160 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006158:	f7ff fb34 	bl	80057c4 <HAL_RCC_GetPCLK2Freq>
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	e002      	b.n	8006166 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006160:	f7ff fb1c 	bl	800579c <HAL_RCC_GetPCLK1Freq>
 8006164:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009a      	lsls	r2, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	4a22      	ldr	r2, [pc, #136]	; (8006208 <UART_SetConfig+0x118>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	0119      	lsls	r1, r3, #4
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009a      	lsls	r2, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	fbb2 f2f3 	udiv	r2, r2, r3
 800619c:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <UART_SetConfig+0x118>)
 800619e:	fba3 0302 	umull	r0, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2064      	movs	r0, #100	; 0x64
 80061a6:	fb00 f303 	mul.w	r3, r0, r3
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	3332      	adds	r3, #50	; 0x32
 80061b0:	4a15      	ldr	r2, [pc, #84]	; (8006208 <UART_SetConfig+0x118>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061bc:	4419      	add	r1, r3
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009a      	lsls	r2, r3, #2
 80061c8:	441a      	add	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <UART_SetConfig+0x118>)
 80061d6:	fba3 0302 	umull	r0, r3, r3, r2
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	2064      	movs	r0, #100	; 0x64
 80061de:	fb00 f303 	mul.w	r3, r0, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	3332      	adds	r3, #50	; 0x32
 80061e8:	4a07      	ldr	r2, [pc, #28]	; (8006208 <UART_SetConfig+0x118>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	f003 020f 	and.w	r2, r3, #15
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	440a      	add	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40013800 	.word	0x40013800
 8006208:	51eb851f 	.word	0x51eb851f

0800620c <atof>:
 800620c:	2100      	movs	r1, #0
 800620e:	f000 be1d 	b.w	8006e4c <strtod>

08006212 <sulp>:
 8006212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	460f      	mov	r7, r1
 8006218:	4690      	mov	r8, r2
 800621a:	f003 fce9 	bl	8009bf0 <__ulp>
 800621e:	4604      	mov	r4, r0
 8006220:	460d      	mov	r5, r1
 8006222:	f1b8 0f00 	cmp.w	r8, #0
 8006226:	d011      	beq.n	800624c <sulp+0x3a>
 8006228:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800622c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd0b      	ble.n	800624c <sulp+0x3a>
 8006234:	2400      	movs	r4, #0
 8006236:	051b      	lsls	r3, r3, #20
 8006238:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800623c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006240:	4622      	mov	r2, r4
 8006242:	462b      	mov	r3, r5
 8006244:	f7fa f948 	bl	80004d8 <__aeabi_dmul>
 8006248:	4604      	mov	r4, r0
 800624a:	460d      	mov	r5, r1
 800624c:	4620      	mov	r0, r4
 800624e:	4629      	mov	r1, r5
 8006250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006254:	0000      	movs	r0, r0
	...

08006258 <_strtod_l>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	b09f      	sub	sp, #124	; 0x7c
 800625e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006260:	2200      	movs	r2, #0
 8006262:	4604      	mov	r4, r0
 8006264:	921a      	str	r2, [sp, #104]	; 0x68
 8006266:	460d      	mov	r5, r1
 8006268:	f04f 0800 	mov.w	r8, #0
 800626c:	f04f 0900 	mov.w	r9, #0
 8006270:	460a      	mov	r2, r1
 8006272:	9219      	str	r2, [sp, #100]	; 0x64
 8006274:	7811      	ldrb	r1, [r2, #0]
 8006276:	292b      	cmp	r1, #43	; 0x2b
 8006278:	d04a      	beq.n	8006310 <_strtod_l+0xb8>
 800627a:	d838      	bhi.n	80062ee <_strtod_l+0x96>
 800627c:	290d      	cmp	r1, #13
 800627e:	d832      	bhi.n	80062e6 <_strtod_l+0x8e>
 8006280:	2908      	cmp	r1, #8
 8006282:	d832      	bhi.n	80062ea <_strtod_l+0x92>
 8006284:	2900      	cmp	r1, #0
 8006286:	d03b      	beq.n	8006300 <_strtod_l+0xa8>
 8006288:	2200      	movs	r2, #0
 800628a:	920e      	str	r2, [sp, #56]	; 0x38
 800628c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800628e:	7832      	ldrb	r2, [r6, #0]
 8006290:	2a30      	cmp	r2, #48	; 0x30
 8006292:	f040 80b2 	bne.w	80063fa <_strtod_l+0x1a2>
 8006296:	7872      	ldrb	r2, [r6, #1]
 8006298:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800629c:	2a58      	cmp	r2, #88	; 0x58
 800629e:	d16e      	bne.n	800637e <_strtod_l+0x126>
 80062a0:	9302      	str	r3, [sp, #8]
 80062a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a4:	4620      	mov	r0, r4
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	ab1a      	add	r3, sp, #104	; 0x68
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	4a8c      	ldr	r2, [pc, #560]	; (80064e0 <_strtod_l+0x288>)
 80062ae:	ab1b      	add	r3, sp, #108	; 0x6c
 80062b0:	a919      	add	r1, sp, #100	; 0x64
 80062b2:	f002 fd79 	bl	8008da8 <__gethex>
 80062b6:	f010 070f 	ands.w	r7, r0, #15
 80062ba:	4605      	mov	r5, r0
 80062bc:	d005      	beq.n	80062ca <_strtod_l+0x72>
 80062be:	2f06      	cmp	r7, #6
 80062c0:	d128      	bne.n	8006314 <_strtod_l+0xbc>
 80062c2:	2300      	movs	r3, #0
 80062c4:	3601      	adds	r6, #1
 80062c6:	9619      	str	r6, [sp, #100]	; 0x64
 80062c8:	930e      	str	r3, [sp, #56]	; 0x38
 80062ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 85a0 	bne.w	8006e12 <_strtod_l+0xbba>
 80062d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062d4:	b1cb      	cbz	r3, 800630a <_strtod_l+0xb2>
 80062d6:	4642      	mov	r2, r8
 80062d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	b01f      	add	sp, #124	; 0x7c
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	2920      	cmp	r1, #32
 80062e8:	d1ce      	bne.n	8006288 <_strtod_l+0x30>
 80062ea:	3201      	adds	r2, #1
 80062ec:	e7c1      	b.n	8006272 <_strtod_l+0x1a>
 80062ee:	292d      	cmp	r1, #45	; 0x2d
 80062f0:	d1ca      	bne.n	8006288 <_strtod_l+0x30>
 80062f2:	2101      	movs	r1, #1
 80062f4:	910e      	str	r1, [sp, #56]	; 0x38
 80062f6:	1c51      	adds	r1, r2, #1
 80062f8:	9119      	str	r1, [sp, #100]	; 0x64
 80062fa:	7852      	ldrb	r2, [r2, #1]
 80062fc:	2a00      	cmp	r2, #0
 80062fe:	d1c5      	bne.n	800628c <_strtod_l+0x34>
 8006300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006302:	9519      	str	r5, [sp, #100]	; 0x64
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8582 	bne.w	8006e0e <_strtod_l+0xbb6>
 800630a:	4642      	mov	r2, r8
 800630c:	464b      	mov	r3, r9
 800630e:	e7e5      	b.n	80062dc <_strtod_l+0x84>
 8006310:	2100      	movs	r1, #0
 8006312:	e7ef      	b.n	80062f4 <_strtod_l+0x9c>
 8006314:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006316:	b13a      	cbz	r2, 8006328 <_strtod_l+0xd0>
 8006318:	2135      	movs	r1, #53	; 0x35
 800631a:	a81c      	add	r0, sp, #112	; 0x70
 800631c:	f003 fd54 	bl	8009dc8 <__copybits>
 8006320:	4620      	mov	r0, r4
 8006322:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006324:	f003 f938 	bl	8009598 <_Bfree>
 8006328:	3f01      	subs	r7, #1
 800632a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800632c:	2f04      	cmp	r7, #4
 800632e:	d806      	bhi.n	800633e <_strtod_l+0xe6>
 8006330:	e8df f007 	tbb	[pc, r7]
 8006334:	201d0314 	.word	0x201d0314
 8006338:	14          	.byte	0x14
 8006339:	00          	.byte	0x00
 800633a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800633e:	05e9      	lsls	r1, r5, #23
 8006340:	bf48      	it	mi
 8006342:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006346:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1bb      	bne.n	80062ca <_strtod_l+0x72>
 8006352:	f001 fdb5 	bl	8007ec0 <__errno>
 8006356:	2322      	movs	r3, #34	; 0x22
 8006358:	6003      	str	r3, [r0, #0]
 800635a:	e7b6      	b.n	80062ca <_strtod_l+0x72>
 800635c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006360:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006364:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006368:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800636c:	e7e7      	b.n	800633e <_strtod_l+0xe6>
 800636e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80064e4 <_strtod_l+0x28c>
 8006372:	e7e4      	b.n	800633e <_strtod_l+0xe6>
 8006374:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006378:	f04f 38ff 	mov.w	r8, #4294967295
 800637c:	e7df      	b.n	800633e <_strtod_l+0xe6>
 800637e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	9219      	str	r2, [sp, #100]	; 0x64
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b30      	cmp	r3, #48	; 0x30
 8006388:	d0f9      	beq.n	800637e <_strtod_l+0x126>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d09d      	beq.n	80062ca <_strtod_l+0x72>
 800638e:	2301      	movs	r3, #1
 8006390:	f04f 0a00 	mov.w	sl, #0
 8006394:	220a      	movs	r2, #10
 8006396:	46d3      	mov	fp, sl
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800639c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80063a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80063a4:	7806      	ldrb	r6, [r0, #0]
 80063a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80063aa:	b2d9      	uxtb	r1, r3
 80063ac:	2909      	cmp	r1, #9
 80063ae:	d926      	bls.n	80063fe <_strtod_l+0x1a6>
 80063b0:	2201      	movs	r2, #1
 80063b2:	494d      	ldr	r1, [pc, #308]	; (80064e8 <_strtod_l+0x290>)
 80063b4:	f001 fcfe 	bl	8007db4 <strncmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d030      	beq.n	800641e <_strtod_l+0x1c6>
 80063bc:	2000      	movs	r0, #0
 80063be:	4632      	mov	r2, r6
 80063c0:	4603      	mov	r3, r0
 80063c2:	465e      	mov	r6, fp
 80063c4:	9008      	str	r0, [sp, #32]
 80063c6:	2a65      	cmp	r2, #101	; 0x65
 80063c8:	d001      	beq.n	80063ce <_strtod_l+0x176>
 80063ca:	2a45      	cmp	r2, #69	; 0x45
 80063cc:	d113      	bne.n	80063f6 <_strtod_l+0x19e>
 80063ce:	b91e      	cbnz	r6, 80063d8 <_strtod_l+0x180>
 80063d0:	9a05      	ldr	r2, [sp, #20]
 80063d2:	4302      	orrs	r2, r0
 80063d4:	d094      	beq.n	8006300 <_strtod_l+0xa8>
 80063d6:	2600      	movs	r6, #0
 80063d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80063da:	1c6a      	adds	r2, r5, #1
 80063dc:	9219      	str	r2, [sp, #100]	; 0x64
 80063de:	786a      	ldrb	r2, [r5, #1]
 80063e0:	2a2b      	cmp	r2, #43	; 0x2b
 80063e2:	d074      	beq.n	80064ce <_strtod_l+0x276>
 80063e4:	2a2d      	cmp	r2, #45	; 0x2d
 80063e6:	d078      	beq.n	80064da <_strtod_l+0x282>
 80063e8:	f04f 0c00 	mov.w	ip, #0
 80063ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80063f0:	2909      	cmp	r1, #9
 80063f2:	d97f      	bls.n	80064f4 <_strtod_l+0x29c>
 80063f4:	9519      	str	r5, [sp, #100]	; 0x64
 80063f6:	2700      	movs	r7, #0
 80063f8:	e09e      	b.n	8006538 <_strtod_l+0x2e0>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e7c8      	b.n	8006390 <_strtod_l+0x138>
 80063fe:	f1bb 0f08 	cmp.w	fp, #8
 8006402:	bfd8      	it	le
 8006404:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006406:	f100 0001 	add.w	r0, r0, #1
 800640a:	bfd6      	itet	le
 800640c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006410:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006414:	930a      	strle	r3, [sp, #40]	; 0x28
 8006416:	f10b 0b01 	add.w	fp, fp, #1
 800641a:	9019      	str	r0, [sp, #100]	; 0x64
 800641c:	e7c1      	b.n	80063a2 <_strtod_l+0x14a>
 800641e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	9219      	str	r2, [sp, #100]	; 0x64
 8006424:	785a      	ldrb	r2, [r3, #1]
 8006426:	f1bb 0f00 	cmp.w	fp, #0
 800642a:	d037      	beq.n	800649c <_strtod_l+0x244>
 800642c:	465e      	mov	r6, fp
 800642e:	9008      	str	r0, [sp, #32]
 8006430:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006434:	2b09      	cmp	r3, #9
 8006436:	d912      	bls.n	800645e <_strtod_l+0x206>
 8006438:	2301      	movs	r3, #1
 800643a:	e7c4      	b.n	80063c6 <_strtod_l+0x16e>
 800643c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800643e:	3001      	adds	r0, #1
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	9219      	str	r2, [sp, #100]	; 0x64
 8006444:	785a      	ldrb	r2, [r3, #1]
 8006446:	2a30      	cmp	r2, #48	; 0x30
 8006448:	d0f8      	beq.n	800643c <_strtod_l+0x1e4>
 800644a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800644e:	2b08      	cmp	r3, #8
 8006450:	f200 84e4 	bhi.w	8006e1c <_strtod_l+0xbc4>
 8006454:	9008      	str	r0, [sp, #32]
 8006456:	2000      	movs	r0, #0
 8006458:	4606      	mov	r6, r0
 800645a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800645c:	930b      	str	r3, [sp, #44]	; 0x2c
 800645e:	3a30      	subs	r2, #48	; 0x30
 8006460:	f100 0301 	add.w	r3, r0, #1
 8006464:	d014      	beq.n	8006490 <_strtod_l+0x238>
 8006466:	9908      	ldr	r1, [sp, #32]
 8006468:	eb00 0c06 	add.w	ip, r0, r6
 800646c:	4419      	add	r1, r3
 800646e:	9108      	str	r1, [sp, #32]
 8006470:	4633      	mov	r3, r6
 8006472:	210a      	movs	r1, #10
 8006474:	4563      	cmp	r3, ip
 8006476:	d113      	bne.n	80064a0 <_strtod_l+0x248>
 8006478:	1833      	adds	r3, r6, r0
 800647a:	2b08      	cmp	r3, #8
 800647c:	f106 0601 	add.w	r6, r6, #1
 8006480:	4406      	add	r6, r0
 8006482:	dc1a      	bgt.n	80064ba <_strtod_l+0x262>
 8006484:	230a      	movs	r3, #10
 8006486:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006488:	fb03 2301 	mla	r3, r3, r1, r2
 800648c:	930a      	str	r3, [sp, #40]	; 0x28
 800648e:	2300      	movs	r3, #0
 8006490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006492:	4618      	mov	r0, r3
 8006494:	1c51      	adds	r1, r2, #1
 8006496:	9119      	str	r1, [sp, #100]	; 0x64
 8006498:	7852      	ldrb	r2, [r2, #1]
 800649a:	e7c9      	b.n	8006430 <_strtod_l+0x1d8>
 800649c:	4658      	mov	r0, fp
 800649e:	e7d2      	b.n	8006446 <_strtod_l+0x1ee>
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	f103 0301 	add.w	r3, r3, #1
 80064a6:	dc03      	bgt.n	80064b0 <_strtod_l+0x258>
 80064a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80064aa:	434f      	muls	r7, r1
 80064ac:	970a      	str	r7, [sp, #40]	; 0x28
 80064ae:	e7e1      	b.n	8006474 <_strtod_l+0x21c>
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	bfd8      	it	le
 80064b4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80064b8:	e7dc      	b.n	8006474 <_strtod_l+0x21c>
 80064ba:	2e10      	cmp	r6, #16
 80064bc:	bfdc      	itt	le
 80064be:	230a      	movle	r3, #10
 80064c0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80064c4:	e7e3      	b.n	800648e <_strtod_l+0x236>
 80064c6:	2300      	movs	r3, #0
 80064c8:	9308      	str	r3, [sp, #32]
 80064ca:	2301      	movs	r3, #1
 80064cc:	e780      	b.n	80063d0 <_strtod_l+0x178>
 80064ce:	f04f 0c00 	mov.w	ip, #0
 80064d2:	1caa      	adds	r2, r5, #2
 80064d4:	9219      	str	r2, [sp, #100]	; 0x64
 80064d6:	78aa      	ldrb	r2, [r5, #2]
 80064d8:	e788      	b.n	80063ec <_strtod_l+0x194>
 80064da:	f04f 0c01 	mov.w	ip, #1
 80064de:	e7f8      	b.n	80064d2 <_strtod_l+0x27a>
 80064e0:	0800c53c 	.word	0x0800c53c
 80064e4:	7ff00000 	.word	0x7ff00000
 80064e8:	0800c53a 	.word	0x0800c53a
 80064ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064ee:	1c51      	adds	r1, r2, #1
 80064f0:	9119      	str	r1, [sp, #100]	; 0x64
 80064f2:	7852      	ldrb	r2, [r2, #1]
 80064f4:	2a30      	cmp	r2, #48	; 0x30
 80064f6:	d0f9      	beq.n	80064ec <_strtod_l+0x294>
 80064f8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064fc:	2908      	cmp	r1, #8
 80064fe:	f63f af7a 	bhi.w	80063f6 <_strtod_l+0x19e>
 8006502:	3a30      	subs	r2, #48	; 0x30
 8006504:	9209      	str	r2, [sp, #36]	; 0x24
 8006506:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006508:	920c      	str	r2, [sp, #48]	; 0x30
 800650a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800650c:	1c57      	adds	r7, r2, #1
 800650e:	9719      	str	r7, [sp, #100]	; 0x64
 8006510:	7852      	ldrb	r2, [r2, #1]
 8006512:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006516:	f1be 0f09 	cmp.w	lr, #9
 800651a:	d938      	bls.n	800658e <_strtod_l+0x336>
 800651c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800651e:	1a7f      	subs	r7, r7, r1
 8006520:	2f08      	cmp	r7, #8
 8006522:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006526:	dc03      	bgt.n	8006530 <_strtod_l+0x2d8>
 8006528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800652a:	428f      	cmp	r7, r1
 800652c:	bfa8      	it	ge
 800652e:	460f      	movge	r7, r1
 8006530:	f1bc 0f00 	cmp.w	ip, #0
 8006534:	d000      	beq.n	8006538 <_strtod_l+0x2e0>
 8006536:	427f      	negs	r7, r7
 8006538:	2e00      	cmp	r6, #0
 800653a:	d14f      	bne.n	80065dc <_strtod_l+0x384>
 800653c:	9905      	ldr	r1, [sp, #20]
 800653e:	4301      	orrs	r1, r0
 8006540:	f47f aec3 	bne.w	80062ca <_strtod_l+0x72>
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f aedb 	bne.w	8006300 <_strtod_l+0xa8>
 800654a:	2a69      	cmp	r2, #105	; 0x69
 800654c:	d029      	beq.n	80065a2 <_strtod_l+0x34a>
 800654e:	dc26      	bgt.n	800659e <_strtod_l+0x346>
 8006550:	2a49      	cmp	r2, #73	; 0x49
 8006552:	d026      	beq.n	80065a2 <_strtod_l+0x34a>
 8006554:	2a4e      	cmp	r2, #78	; 0x4e
 8006556:	f47f aed3 	bne.w	8006300 <_strtod_l+0xa8>
 800655a:	499a      	ldr	r1, [pc, #616]	; (80067c4 <_strtod_l+0x56c>)
 800655c:	a819      	add	r0, sp, #100	; 0x64
 800655e:	f002 fe65 	bl	800922c <__match>
 8006562:	2800      	cmp	r0, #0
 8006564:	f43f aecc 	beq.w	8006300 <_strtod_l+0xa8>
 8006568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b28      	cmp	r3, #40	; 0x28
 800656e:	d12f      	bne.n	80065d0 <_strtod_l+0x378>
 8006570:	4995      	ldr	r1, [pc, #596]	; (80067c8 <_strtod_l+0x570>)
 8006572:	aa1c      	add	r2, sp, #112	; 0x70
 8006574:	a819      	add	r0, sp, #100	; 0x64
 8006576:	f002 fe6d 	bl	8009254 <__hexnan>
 800657a:	2805      	cmp	r0, #5
 800657c:	d128      	bne.n	80065d0 <_strtod_l+0x378>
 800657e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006580:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006584:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006588:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800658c:	e69d      	b.n	80062ca <_strtod_l+0x72>
 800658e:	210a      	movs	r1, #10
 8006590:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006592:	fb01 2107 	mla	r1, r1, r7, r2
 8006596:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800659a:	9209      	str	r2, [sp, #36]	; 0x24
 800659c:	e7b5      	b.n	800650a <_strtod_l+0x2b2>
 800659e:	2a6e      	cmp	r2, #110	; 0x6e
 80065a0:	e7d9      	b.n	8006556 <_strtod_l+0x2fe>
 80065a2:	498a      	ldr	r1, [pc, #552]	; (80067cc <_strtod_l+0x574>)
 80065a4:	a819      	add	r0, sp, #100	; 0x64
 80065a6:	f002 fe41 	bl	800922c <__match>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	f43f aea8 	beq.w	8006300 <_strtod_l+0xa8>
 80065b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065b2:	4987      	ldr	r1, [pc, #540]	; (80067d0 <_strtod_l+0x578>)
 80065b4:	3b01      	subs	r3, #1
 80065b6:	a819      	add	r0, sp, #100	; 0x64
 80065b8:	9319      	str	r3, [sp, #100]	; 0x64
 80065ba:	f002 fe37 	bl	800922c <__match>
 80065be:	b910      	cbnz	r0, 80065c6 <_strtod_l+0x36e>
 80065c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065c2:	3301      	adds	r3, #1
 80065c4:	9319      	str	r3, [sp, #100]	; 0x64
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80067d4 <_strtod_l+0x57c>
 80065ce:	e67c      	b.n	80062ca <_strtod_l+0x72>
 80065d0:	4881      	ldr	r0, [pc, #516]	; (80067d8 <_strtod_l+0x580>)
 80065d2:	f001 fcbf 	bl	8007f54 <nan>
 80065d6:	4680      	mov	r8, r0
 80065d8:	4689      	mov	r9, r1
 80065da:	e676      	b.n	80062ca <_strtod_l+0x72>
 80065dc:	9b08      	ldr	r3, [sp, #32]
 80065de:	f1bb 0f00 	cmp.w	fp, #0
 80065e2:	bf08      	it	eq
 80065e4:	46b3      	moveq	fp, r6
 80065e6:	1afb      	subs	r3, r7, r3
 80065e8:	2e10      	cmp	r6, #16
 80065ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80065ec:	4635      	mov	r5, r6
 80065ee:	9309      	str	r3, [sp, #36]	; 0x24
 80065f0:	bfa8      	it	ge
 80065f2:	2510      	movge	r5, #16
 80065f4:	f7f9 fef6 	bl	80003e4 <__aeabi_ui2d>
 80065f8:	2e09      	cmp	r6, #9
 80065fa:	4680      	mov	r8, r0
 80065fc:	4689      	mov	r9, r1
 80065fe:	dd13      	ble.n	8006628 <_strtod_l+0x3d0>
 8006600:	4b76      	ldr	r3, [pc, #472]	; (80067dc <_strtod_l+0x584>)
 8006602:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006606:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800660a:	f7f9 ff65 	bl	80004d8 <__aeabi_dmul>
 800660e:	4680      	mov	r8, r0
 8006610:	4650      	mov	r0, sl
 8006612:	4689      	mov	r9, r1
 8006614:	f7f9 fee6 	bl	80003e4 <__aeabi_ui2d>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	f7f9 fda4 	bl	800016c <__adddf3>
 8006624:	4680      	mov	r8, r0
 8006626:	4689      	mov	r9, r1
 8006628:	2e0f      	cmp	r6, #15
 800662a:	dc36      	bgt.n	800669a <_strtod_l+0x442>
 800662c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	f43f ae4b 	beq.w	80062ca <_strtod_l+0x72>
 8006634:	dd22      	ble.n	800667c <_strtod_l+0x424>
 8006636:	2b16      	cmp	r3, #22
 8006638:	dc09      	bgt.n	800664e <_strtod_l+0x3f6>
 800663a:	4968      	ldr	r1, [pc, #416]	; (80067dc <_strtod_l+0x584>)
 800663c:	4642      	mov	r2, r8
 800663e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006642:	464b      	mov	r3, r9
 8006644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006648:	f7f9 ff46 	bl	80004d8 <__aeabi_dmul>
 800664c:	e7c3      	b.n	80065d6 <_strtod_l+0x37e>
 800664e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006650:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006654:	4293      	cmp	r3, r2
 8006656:	db20      	blt.n	800669a <_strtod_l+0x442>
 8006658:	4c60      	ldr	r4, [pc, #384]	; (80067dc <_strtod_l+0x584>)
 800665a:	f1c6 060f 	rsb	r6, r6, #15
 800665e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006662:	4642      	mov	r2, r8
 8006664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006668:	464b      	mov	r3, r9
 800666a:	f7f9 ff35 	bl	80004d8 <__aeabi_dmul>
 800666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006670:	1b9e      	subs	r6, r3, r6
 8006672:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006676:	e9d4 2300 	ldrd	r2, r3, [r4]
 800667a:	e7e5      	b.n	8006648 <_strtod_l+0x3f0>
 800667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667e:	3316      	adds	r3, #22
 8006680:	db0b      	blt.n	800669a <_strtod_l+0x442>
 8006682:	9b08      	ldr	r3, [sp, #32]
 8006684:	4640      	mov	r0, r8
 8006686:	1bdf      	subs	r7, r3, r7
 8006688:	4b54      	ldr	r3, [pc, #336]	; (80067dc <_strtod_l+0x584>)
 800668a:	4649      	mov	r1, r9
 800668c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006694:	f7fa f84a 	bl	800072c <__aeabi_ddiv>
 8006698:	e79d      	b.n	80065d6 <_strtod_l+0x37e>
 800669a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669c:	1b75      	subs	r5, r6, r5
 800669e:	441d      	add	r5, r3
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	dd70      	ble.n	8006786 <_strtod_l+0x52e>
 80066a4:	f015 030f 	ands.w	r3, r5, #15
 80066a8:	d00a      	beq.n	80066c0 <_strtod_l+0x468>
 80066aa:	494c      	ldr	r1, [pc, #304]	; (80067dc <_strtod_l+0x584>)
 80066ac:	4642      	mov	r2, r8
 80066ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066b6:	464b      	mov	r3, r9
 80066b8:	f7f9 ff0e 	bl	80004d8 <__aeabi_dmul>
 80066bc:	4680      	mov	r8, r0
 80066be:	4689      	mov	r9, r1
 80066c0:	f035 050f 	bics.w	r5, r5, #15
 80066c4:	d04d      	beq.n	8006762 <_strtod_l+0x50a>
 80066c6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80066ca:	dd22      	ble.n	8006712 <_strtod_l+0x4ba>
 80066cc:	2600      	movs	r6, #0
 80066ce:	46b3      	mov	fp, r6
 80066d0:	960b      	str	r6, [sp, #44]	; 0x2c
 80066d2:	9608      	str	r6, [sp, #32]
 80066d4:	2322      	movs	r3, #34	; 0x22
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80067d4 <_strtod_l+0x57c>
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f43f adf1 	beq.w	80062ca <_strtod_l+0x72>
 80066e8:	4620      	mov	r0, r4
 80066ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066ec:	f002 ff54 	bl	8009598 <_Bfree>
 80066f0:	4620      	mov	r0, r4
 80066f2:	9908      	ldr	r1, [sp, #32]
 80066f4:	f002 ff50 	bl	8009598 <_Bfree>
 80066f8:	4659      	mov	r1, fp
 80066fa:	4620      	mov	r0, r4
 80066fc:	f002 ff4c 	bl	8009598 <_Bfree>
 8006700:	4620      	mov	r0, r4
 8006702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006704:	f002 ff48 	bl	8009598 <_Bfree>
 8006708:	4631      	mov	r1, r6
 800670a:	4620      	mov	r0, r4
 800670c:	f002 ff44 	bl	8009598 <_Bfree>
 8006710:	e5db      	b.n	80062ca <_strtod_l+0x72>
 8006712:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <_strtod_l+0x588>)
 8006714:	4640      	mov	r0, r8
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	2300      	movs	r3, #0
 800671a:	4649      	mov	r1, r9
 800671c:	469a      	mov	sl, r3
 800671e:	112d      	asrs	r5, r5, #4
 8006720:	2d01      	cmp	r5, #1
 8006722:	dc21      	bgt.n	8006768 <_strtod_l+0x510>
 8006724:	b10b      	cbz	r3, 800672a <_strtod_l+0x4d2>
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	492d      	ldr	r1, [pc, #180]	; (80067e0 <_strtod_l+0x588>)
 800672c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006730:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006734:	4642      	mov	r2, r8
 8006736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673a:	464b      	mov	r3, r9
 800673c:	f7f9 fecc 	bl	80004d8 <__aeabi_dmul>
 8006740:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <_strtod_l+0x57c>)
 8006742:	460a      	mov	r2, r1
 8006744:	400b      	ands	r3, r1
 8006746:	4927      	ldr	r1, [pc, #156]	; (80067e4 <_strtod_l+0x58c>)
 8006748:	4680      	mov	r8, r0
 800674a:	428b      	cmp	r3, r1
 800674c:	d8be      	bhi.n	80066cc <_strtod_l+0x474>
 800674e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006752:	428b      	cmp	r3, r1
 8006754:	bf86      	itte	hi
 8006756:	f04f 38ff 	movhi.w	r8, #4294967295
 800675a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80067e8 <_strtod_l+0x590>
 800675e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006762:	2300      	movs	r3, #0
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	e07b      	b.n	8006860 <_strtod_l+0x608>
 8006768:	07ea      	lsls	r2, r5, #31
 800676a:	d505      	bpl.n	8006778 <_strtod_l+0x520>
 800676c:	9b05      	ldr	r3, [sp, #20]
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 feb1 	bl	80004d8 <__aeabi_dmul>
 8006776:	2301      	movs	r3, #1
 8006778:	9a05      	ldr	r2, [sp, #20]
 800677a:	f10a 0a01 	add.w	sl, sl, #1
 800677e:	3208      	adds	r2, #8
 8006780:	106d      	asrs	r5, r5, #1
 8006782:	9205      	str	r2, [sp, #20]
 8006784:	e7cc      	b.n	8006720 <_strtod_l+0x4c8>
 8006786:	d0ec      	beq.n	8006762 <_strtod_l+0x50a>
 8006788:	426d      	negs	r5, r5
 800678a:	f015 020f 	ands.w	r2, r5, #15
 800678e:	d00a      	beq.n	80067a6 <_strtod_l+0x54e>
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <_strtod_l+0x584>)
 8006792:	4640      	mov	r0, r8
 8006794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006798:	4649      	mov	r1, r9
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f7f9 ffc5 	bl	800072c <__aeabi_ddiv>
 80067a2:	4680      	mov	r8, r0
 80067a4:	4689      	mov	r9, r1
 80067a6:	112d      	asrs	r5, r5, #4
 80067a8:	d0db      	beq.n	8006762 <_strtod_l+0x50a>
 80067aa:	2d1f      	cmp	r5, #31
 80067ac:	dd1e      	ble.n	80067ec <_strtod_l+0x594>
 80067ae:	2600      	movs	r6, #0
 80067b0:	46b3      	mov	fp, r6
 80067b2:	960b      	str	r6, [sp, #44]	; 0x2c
 80067b4:	9608      	str	r6, [sp, #32]
 80067b6:	2322      	movs	r3, #34	; 0x22
 80067b8:	f04f 0800 	mov.w	r8, #0
 80067bc:	f04f 0900 	mov.w	r9, #0
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	e78d      	b.n	80066e0 <_strtod_l+0x488>
 80067c4:	0800c59d 	.word	0x0800c59d
 80067c8:	0800c550 	.word	0x0800c550
 80067cc:	0800c595 	.word	0x0800c595
 80067d0:	0800c5d4 	.word	0x0800c5d4
 80067d4:	7ff00000 	.word	0x7ff00000
 80067d8:	0800c961 	.word	0x0800c961
 80067dc:	0800c740 	.word	0x0800c740
 80067e0:	0800c718 	.word	0x0800c718
 80067e4:	7ca00000 	.word	0x7ca00000
 80067e8:	7fefffff 	.word	0x7fefffff
 80067ec:	f015 0310 	ands.w	r3, r5, #16
 80067f0:	bf18      	it	ne
 80067f2:	236a      	movne	r3, #106	; 0x6a
 80067f4:	4640      	mov	r0, r8
 80067f6:	9305      	str	r3, [sp, #20]
 80067f8:	4649      	mov	r1, r9
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006ac8 <_strtod_l+0x870>
 8006800:	07ea      	lsls	r2, r5, #31
 8006802:	d504      	bpl.n	800680e <_strtod_l+0x5b6>
 8006804:	e9da 2300 	ldrd	r2, r3, [sl]
 8006808:	f7f9 fe66 	bl	80004d8 <__aeabi_dmul>
 800680c:	2301      	movs	r3, #1
 800680e:	106d      	asrs	r5, r5, #1
 8006810:	f10a 0a08 	add.w	sl, sl, #8
 8006814:	d1f4      	bne.n	8006800 <_strtod_l+0x5a8>
 8006816:	b10b      	cbz	r3, 800681c <_strtod_l+0x5c4>
 8006818:	4680      	mov	r8, r0
 800681a:	4689      	mov	r9, r1
 800681c:	9b05      	ldr	r3, [sp, #20]
 800681e:	b1bb      	cbz	r3, 8006850 <_strtod_l+0x5f8>
 8006820:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006824:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006828:	2b00      	cmp	r3, #0
 800682a:	4649      	mov	r1, r9
 800682c:	dd10      	ble.n	8006850 <_strtod_l+0x5f8>
 800682e:	2b1f      	cmp	r3, #31
 8006830:	f340 8128 	ble.w	8006a84 <_strtod_l+0x82c>
 8006834:	2b34      	cmp	r3, #52	; 0x34
 8006836:	bfd8      	it	le
 8006838:	f04f 33ff 	movle.w	r3, #4294967295
 800683c:	f04f 0800 	mov.w	r8, #0
 8006840:	bfcf      	iteee	gt
 8006842:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006846:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800684a:	4093      	lslle	r3, r2
 800684c:	ea03 0901 	andle.w	r9, r3, r1
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	4640      	mov	r0, r8
 8006856:	4649      	mov	r1, r9
 8006858:	f7fa f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800685c:	2800      	cmp	r0, #0
 800685e:	d1a6      	bne.n	80067ae <_strtod_l+0x556>
 8006860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006862:	465a      	mov	r2, fp
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4620      	mov	r0, r4
 8006868:	4633      	mov	r3, r6
 800686a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800686c:	f002 fefc 	bl	8009668 <__s2b>
 8006870:	900b      	str	r0, [sp, #44]	; 0x2c
 8006872:	2800      	cmp	r0, #0
 8006874:	f43f af2a 	beq.w	80066cc <_strtod_l+0x474>
 8006878:	2600      	movs	r6, #0
 800687a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800687c:	9b08      	ldr	r3, [sp, #32]
 800687e:	2a00      	cmp	r2, #0
 8006880:	eba3 0307 	sub.w	r3, r3, r7
 8006884:	bfa8      	it	ge
 8006886:	2300      	movge	r3, #0
 8006888:	46b3      	mov	fp, r6
 800688a:	9312      	str	r3, [sp, #72]	; 0x48
 800688c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006890:	9316      	str	r3, [sp, #88]	; 0x58
 8006892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006894:	4620      	mov	r0, r4
 8006896:	6859      	ldr	r1, [r3, #4]
 8006898:	f002 fe3e 	bl	8009518 <_Balloc>
 800689c:	9008      	str	r0, [sp, #32]
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f af18 	beq.w	80066d4 <_strtod_l+0x47c>
 80068a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a6:	300c      	adds	r0, #12
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	f103 010c 	add.w	r1, r3, #12
 80068ae:	3202      	adds	r2, #2
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	f001 fb40 	bl	8007f36 <memcpy>
 80068b6:	ab1c      	add	r3, sp, #112	; 0x70
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	ab1b      	add	r3, sp, #108	; 0x6c
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	4620      	mov	r0, r4
 80068c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80068c8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80068cc:	f003 f9f8 	bl	8009cc0 <__d2b>
 80068d0:	901a      	str	r0, [sp, #104]	; 0x68
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f43f aefe 	beq.w	80066d4 <_strtod_l+0x47c>
 80068d8:	2101      	movs	r1, #1
 80068da:	4620      	mov	r0, r4
 80068dc:	f002 ff5c 	bl	8009798 <__i2b>
 80068e0:	4683      	mov	fp, r0
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f43f aef6 	beq.w	80066d4 <_strtod_l+0x47c>
 80068e8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80068ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80068ec:	2f00      	cmp	r7, #0
 80068ee:	bfab      	itete	ge
 80068f0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80068f2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80068f4:	eb07 0a03 	addge.w	sl, r7, r3
 80068f8:	1bdd      	sublt	r5, r3, r7
 80068fa:	9b05      	ldr	r3, [sp, #20]
 80068fc:	bfa8      	it	ge
 80068fe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006900:	eba7 0703 	sub.w	r7, r7, r3
 8006904:	4417      	add	r7, r2
 8006906:	4b71      	ldr	r3, [pc, #452]	; (8006acc <_strtod_l+0x874>)
 8006908:	f107 37ff 	add.w	r7, r7, #4294967295
 800690c:	bfb8      	it	lt
 800690e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006912:	429f      	cmp	r7, r3
 8006914:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006918:	f280 80c7 	bge.w	8006aaa <_strtod_l+0x852>
 800691c:	1bdb      	subs	r3, r3, r7
 800691e:	2b1f      	cmp	r3, #31
 8006920:	f04f 0101 	mov.w	r1, #1
 8006924:	eba2 0203 	sub.w	r2, r2, r3
 8006928:	f300 80b3 	bgt.w	8006a92 <_strtod_l+0x83a>
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	9313      	str	r3, [sp, #76]	; 0x4c
 8006932:	2300      	movs	r3, #0
 8006934:	9310      	str	r3, [sp, #64]	; 0x40
 8006936:	eb0a 0702 	add.w	r7, sl, r2
 800693a:	9b05      	ldr	r3, [sp, #20]
 800693c:	45ba      	cmp	sl, r7
 800693e:	4415      	add	r5, r2
 8006940:	441d      	add	r5, r3
 8006942:	4653      	mov	r3, sl
 8006944:	bfa8      	it	ge
 8006946:	463b      	movge	r3, r7
 8006948:	42ab      	cmp	r3, r5
 800694a:	bfa8      	it	ge
 800694c:	462b      	movge	r3, r5
 800694e:	2b00      	cmp	r3, #0
 8006950:	bfc2      	ittt	gt
 8006952:	1aff      	subgt	r7, r7, r3
 8006954:	1aed      	subgt	r5, r5, r3
 8006956:	ebaa 0a03 	subgt.w	sl, sl, r3
 800695a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800695c:	2b00      	cmp	r3, #0
 800695e:	dd17      	ble.n	8006990 <_strtod_l+0x738>
 8006960:	4659      	mov	r1, fp
 8006962:	461a      	mov	r2, r3
 8006964:	4620      	mov	r0, r4
 8006966:	f002 ffd5 	bl	8009914 <__pow5mult>
 800696a:	4683      	mov	fp, r0
 800696c:	2800      	cmp	r0, #0
 800696e:	f43f aeb1 	beq.w	80066d4 <_strtod_l+0x47c>
 8006972:	4601      	mov	r1, r0
 8006974:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006976:	4620      	mov	r0, r4
 8006978:	f002 ff24 	bl	80097c4 <__multiply>
 800697c:	900a      	str	r0, [sp, #40]	; 0x28
 800697e:	2800      	cmp	r0, #0
 8006980:	f43f aea8 	beq.w	80066d4 <_strtod_l+0x47c>
 8006984:	4620      	mov	r0, r4
 8006986:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006988:	f002 fe06 	bl	8009598 <_Bfree>
 800698c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698e:	931a      	str	r3, [sp, #104]	; 0x68
 8006990:	2f00      	cmp	r7, #0
 8006992:	f300 808f 	bgt.w	8006ab4 <_strtod_l+0x85c>
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	dd08      	ble.n	80069ae <_strtod_l+0x756>
 800699c:	4620      	mov	r0, r4
 800699e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80069a0:	9908      	ldr	r1, [sp, #32]
 80069a2:	f002 ffb7 	bl	8009914 <__pow5mult>
 80069a6:	9008      	str	r0, [sp, #32]
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f43f ae93 	beq.w	80066d4 <_strtod_l+0x47c>
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	dd08      	ble.n	80069c4 <_strtod_l+0x76c>
 80069b2:	462a      	mov	r2, r5
 80069b4:	4620      	mov	r0, r4
 80069b6:	9908      	ldr	r1, [sp, #32]
 80069b8:	f003 f806 	bl	80099c8 <__lshift>
 80069bc:	9008      	str	r0, [sp, #32]
 80069be:	2800      	cmp	r0, #0
 80069c0:	f43f ae88 	beq.w	80066d4 <_strtod_l+0x47c>
 80069c4:	f1ba 0f00 	cmp.w	sl, #0
 80069c8:	dd08      	ble.n	80069dc <_strtod_l+0x784>
 80069ca:	4659      	mov	r1, fp
 80069cc:	4652      	mov	r2, sl
 80069ce:	4620      	mov	r0, r4
 80069d0:	f002 fffa 	bl	80099c8 <__lshift>
 80069d4:	4683      	mov	fp, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f ae7c 	beq.w	80066d4 <_strtod_l+0x47c>
 80069dc:	4620      	mov	r0, r4
 80069de:	9a08      	ldr	r2, [sp, #32]
 80069e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069e2:	f003 f879 	bl	8009ad8 <__mdiff>
 80069e6:	4606      	mov	r6, r0
 80069e8:	2800      	cmp	r0, #0
 80069ea:	f43f ae73 	beq.w	80066d4 <_strtod_l+0x47c>
 80069ee:	2500      	movs	r5, #0
 80069f0:	68c3      	ldr	r3, [r0, #12]
 80069f2:	4659      	mov	r1, fp
 80069f4:	60c5      	str	r5, [r0, #12]
 80069f6:	930a      	str	r3, [sp, #40]	; 0x28
 80069f8:	f003 f852 	bl	8009aa0 <__mcmp>
 80069fc:	42a8      	cmp	r0, r5
 80069fe:	da6b      	bge.n	8006ad8 <_strtod_l+0x880>
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	ea53 0308 	orrs.w	r3, r3, r8
 8006a06:	f040 808f 	bne.w	8006b28 <_strtod_l+0x8d0>
 8006a0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 808a 	bne.w	8006b28 <_strtod_l+0x8d0>
 8006a14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	051b      	lsls	r3, r3, #20
 8006a1c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a20:	f240 8082 	bls.w	8006b28 <_strtod_l+0x8d0>
 8006a24:	6973      	ldr	r3, [r6, #20]
 8006a26:	b913      	cbnz	r3, 8006a2e <_strtod_l+0x7d6>
 8006a28:	6933      	ldr	r3, [r6, #16]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	dd7c      	ble.n	8006b28 <_strtod_l+0x8d0>
 8006a2e:	4631      	mov	r1, r6
 8006a30:	2201      	movs	r2, #1
 8006a32:	4620      	mov	r0, r4
 8006a34:	f002 ffc8 	bl	80099c8 <__lshift>
 8006a38:	4659      	mov	r1, fp
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	f003 f830 	bl	8009aa0 <__mcmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	dd71      	ble.n	8006b28 <_strtod_l+0x8d0>
 8006a44:	9905      	ldr	r1, [sp, #20]
 8006a46:	464b      	mov	r3, r9
 8006a48:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <_strtod_l+0x878>)
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	f000 808d 	beq.w	8006b6a <_strtod_l+0x912>
 8006a50:	ea02 0109 	and.w	r1, r2, r9
 8006a54:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a58:	f300 8087 	bgt.w	8006b6a <_strtod_l+0x912>
 8006a5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a60:	f77f aea9 	ble.w	80067b6 <_strtod_l+0x55e>
 8006a64:	4640      	mov	r0, r8
 8006a66:	4649      	mov	r1, r9
 8006a68:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <_strtod_l+0x87c>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f7f9 fd34 	bl	80004d8 <__aeabi_dmul>
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <_strtod_l+0x878>)
 8006a72:	4680      	mov	r8, r0
 8006a74:	400b      	ands	r3, r1
 8006a76:	4689      	mov	r9, r1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f ae35 	bne.w	80066e8 <_strtod_l+0x490>
 8006a7e:	2322      	movs	r3, #34	; 0x22
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	e631      	b.n	80066e8 <_strtod_l+0x490>
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	ea03 0808 	and.w	r8, r3, r8
 8006a90:	e6de      	b.n	8006850 <_strtod_l+0x5f8>
 8006a92:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006a96:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006a9a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006a9e:	37e2      	adds	r7, #226	; 0xe2
 8006aa0:	fa01 f307 	lsl.w	r3, r1, r7
 8006aa4:	9310      	str	r3, [sp, #64]	; 0x40
 8006aa6:	9113      	str	r1, [sp, #76]	; 0x4c
 8006aa8:	e745      	b.n	8006936 <_strtod_l+0x6de>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9310      	str	r3, [sp, #64]	; 0x40
 8006aae:	2301      	movs	r3, #1
 8006ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ab2:	e740      	b.n	8006936 <_strtod_l+0x6de>
 8006ab4:	463a      	mov	r2, r7
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006aba:	f002 ff85 	bl	80099c8 <__lshift>
 8006abe:	901a      	str	r0, [sp, #104]	; 0x68
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f47f af68 	bne.w	8006996 <_strtod_l+0x73e>
 8006ac6:	e605      	b.n	80066d4 <_strtod_l+0x47c>
 8006ac8:	0800c568 	.word	0x0800c568
 8006acc:	fffffc02 	.word	0xfffffc02
 8006ad0:	7ff00000 	.word	0x7ff00000
 8006ad4:	39500000 	.word	0x39500000
 8006ad8:	46ca      	mov	sl, r9
 8006ada:	d165      	bne.n	8006ba8 <_strtod_l+0x950>
 8006adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ade:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ae2:	b352      	cbz	r2, 8006b3a <_strtod_l+0x8e2>
 8006ae4:	4a9e      	ldr	r2, [pc, #632]	; (8006d60 <_strtod_l+0xb08>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d12a      	bne.n	8006b40 <_strtod_l+0x8e8>
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	4641      	mov	r1, r8
 8006aee:	b1fb      	cbz	r3, 8006b30 <_strtod_l+0x8d8>
 8006af0:	4b9c      	ldr	r3, [pc, #624]	; (8006d64 <_strtod_l+0xb0c>)
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	ea09 0303 	and.w	r3, r9, r3
 8006afa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006afe:	d81a      	bhi.n	8006b36 <_strtod_l+0x8de>
 8006b00:	0d1b      	lsrs	r3, r3, #20
 8006b02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	d118      	bne.n	8006b40 <_strtod_l+0x8e8>
 8006b0e:	4b96      	ldr	r3, [pc, #600]	; (8006d68 <_strtod_l+0xb10>)
 8006b10:	459a      	cmp	sl, r3
 8006b12:	d102      	bne.n	8006b1a <_strtod_l+0x8c2>
 8006b14:	3101      	adds	r1, #1
 8006b16:	f43f addd 	beq.w	80066d4 <_strtod_l+0x47c>
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	4b91      	ldr	r3, [pc, #580]	; (8006d64 <_strtod_l+0xb0c>)
 8006b20:	ea0a 0303 	and.w	r3, sl, r3
 8006b24:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d19a      	bne.n	8006a64 <_strtod_l+0x80c>
 8006b2e:	e5db      	b.n	80066e8 <_strtod_l+0x490>
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
 8006b34:	e7e9      	b.n	8006b0a <_strtod_l+0x8b2>
 8006b36:	4613      	mov	r3, r2
 8006b38:	e7e7      	b.n	8006b0a <_strtod_l+0x8b2>
 8006b3a:	ea53 0308 	orrs.w	r3, r3, r8
 8006b3e:	d081      	beq.n	8006a44 <_strtod_l+0x7ec>
 8006b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b42:	b1e3      	cbz	r3, 8006b7e <_strtod_l+0x926>
 8006b44:	ea13 0f0a 	tst.w	r3, sl
 8006b48:	d0ee      	beq.n	8006b28 <_strtod_l+0x8d0>
 8006b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4649      	mov	r1, r9
 8006b50:	9a05      	ldr	r2, [sp, #20]
 8006b52:	b1c3      	cbz	r3, 8006b86 <_strtod_l+0x92e>
 8006b54:	f7ff fb5d 	bl	8006212 <sulp>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b60:	f7f9 fb04 	bl	800016c <__adddf3>
 8006b64:	4680      	mov	r8, r0
 8006b66:	4689      	mov	r9, r1
 8006b68:	e7de      	b.n	8006b28 <_strtod_l+0x8d0>
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006b74:	f04f 38ff 	mov.w	r8, #4294967295
 8006b78:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006b7c:	e7d4      	b.n	8006b28 <_strtod_l+0x8d0>
 8006b7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b80:	ea13 0f08 	tst.w	r3, r8
 8006b84:	e7e0      	b.n	8006b48 <_strtod_l+0x8f0>
 8006b86:	f7ff fb44 	bl	8006212 <sulp>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b92:	f7f9 fae9 	bl	8000168 <__aeabi_dsub>
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	4689      	mov	r9, r1
 8006b9e:	f7f9 ff03 	bl	80009a8 <__aeabi_dcmpeq>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0c0      	beq.n	8006b28 <_strtod_l+0x8d0>
 8006ba6:	e606      	b.n	80067b6 <_strtod_l+0x55e>
 8006ba8:	4659      	mov	r1, fp
 8006baa:	4630      	mov	r0, r6
 8006bac:	f003 f8de 	bl	8009d6c <__ratio>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bbe:	f7f9 ff07 	bl	80009d0 <__aeabi_dcmple>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d06f      	beq.n	8006ca6 <_strtod_l+0xa4e>
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d17c      	bne.n	8006cc6 <_strtod_l+0xa6e>
 8006bcc:	f1b8 0f00 	cmp.w	r8, #0
 8006bd0:	d159      	bne.n	8006c86 <_strtod_l+0xa2e>
 8006bd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d17b      	bne.n	8006cd2 <_strtod_l+0xa7a>
 8006bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bde:	2200      	movs	r2, #0
 8006be0:	4b62      	ldr	r3, [pc, #392]	; (8006d6c <_strtod_l+0xb14>)
 8006be2:	f7f9 feeb 	bl	80009bc <__aeabi_dcmplt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d15a      	bne.n	8006ca0 <_strtod_l+0xa48>
 8006bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4b5f      	ldr	r3, [pc, #380]	; (8006d70 <_strtod_l+0xb18>)
 8006bf2:	f7f9 fc71 	bl	80004d8 <__aeabi_dmul>
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006bfe:	9506      	str	r5, [sp, #24]
 8006c00:	9307      	str	r3, [sp, #28]
 8006c02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c0a:	4b56      	ldr	r3, [pc, #344]	; (8006d64 <_strtod_l+0xb0c>)
 8006c0c:	4a55      	ldr	r2, [pc, #340]	; (8006d64 <_strtod_l+0xb0c>)
 8006c0e:	ea0a 0303 	and.w	r3, sl, r3
 8006c12:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c14:	4b57      	ldr	r3, [pc, #348]	; (8006d74 <_strtod_l+0xb1c>)
 8006c16:	ea0a 0202 	and.w	r2, sl, r2
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f040 80b0 	bne.w	8006d80 <_strtod_l+0xb28>
 8006c20:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f002 ffe2 	bl	8009bf0 <__ulp>
 8006c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c30:	f7f9 fc52 	bl	80004d8 <__aeabi_dmul>
 8006c34:	4642      	mov	r2, r8
 8006c36:	464b      	mov	r3, r9
 8006c38:	f7f9 fa98 	bl	800016c <__adddf3>
 8006c3c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006d64 <_strtod_l+0xb0c>
 8006c40:	4a4d      	ldr	r2, [pc, #308]	; (8006d78 <_strtod_l+0xb20>)
 8006c42:	ea01 0a0a 	and.w	sl, r1, sl
 8006c46:	4592      	cmp	sl, r2
 8006c48:	4680      	mov	r8, r0
 8006c4a:	d948      	bls.n	8006cde <_strtod_l+0xa86>
 8006c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c4e:	4b46      	ldr	r3, [pc, #280]	; (8006d68 <_strtod_l+0xb10>)
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d103      	bne.n	8006c5c <_strtod_l+0xa04>
 8006c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c56:	3301      	adds	r3, #1
 8006c58:	f43f ad3c 	beq.w	80066d4 <_strtod_l+0x47c>
 8006c5c:	f04f 38ff 	mov.w	r8, #4294967295
 8006c60:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006d68 <_strtod_l+0xb10>
 8006c64:	4620      	mov	r0, r4
 8006c66:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c68:	f002 fc96 	bl	8009598 <_Bfree>
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	9908      	ldr	r1, [sp, #32]
 8006c70:	f002 fc92 	bl	8009598 <_Bfree>
 8006c74:	4659      	mov	r1, fp
 8006c76:	4620      	mov	r0, r4
 8006c78:	f002 fc8e 	bl	8009598 <_Bfree>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f002 fc8a 	bl	8009598 <_Bfree>
 8006c84:	e605      	b.n	8006892 <_strtod_l+0x63a>
 8006c86:	f1b8 0f01 	cmp.w	r8, #1
 8006c8a:	d103      	bne.n	8006c94 <_strtod_l+0xa3c>
 8006c8c:	f1b9 0f00 	cmp.w	r9, #0
 8006c90:	f43f ad91 	beq.w	80067b6 <_strtod_l+0x55e>
 8006c94:	2200      	movs	r2, #0
 8006c96:	4b39      	ldr	r3, [pc, #228]	; (8006d7c <_strtod_l+0xb24>)
 8006c98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006c9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c9e:	e016      	b.n	8006cce <_strtod_l+0xa76>
 8006ca0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006ca2:	4f33      	ldr	r7, [pc, #204]	; (8006d70 <_strtod_l+0xb18>)
 8006ca4:	e7a9      	b.n	8006bfa <_strtod_l+0x9a2>
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <_strtod_l+0xb18>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cae:	f7f9 fc13 	bl	80004d8 <__aeabi_dmul>
 8006cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d09e      	beq.n	8006bfa <_strtod_l+0x9a2>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cc4:	e79d      	b.n	8006c02 <_strtod_l+0x9aa>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <_strtod_l+0xb14>)
 8006cca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cce:	4f27      	ldr	r7, [pc, #156]	; (8006d6c <_strtod_l+0xb14>)
 8006cd0:	e797      	b.n	8006c02 <_strtod_l+0x9aa>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <_strtod_l+0xb24>)
 8006cd6:	4645      	mov	r5, r8
 8006cd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cdc:	e7f7      	b.n	8006cce <_strtod_l+0xa76>
 8006cde:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	46ca      	mov	sl, r9
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1bc      	bne.n	8006c64 <_strtod_l+0xa0c>
 8006cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cf0:	0d1b      	lsrs	r3, r3, #20
 8006cf2:	051b      	lsls	r3, r3, #20
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1b5      	bne.n	8006c64 <_strtod_l+0xa0c>
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f7fa fa08 	bl	8001110 <__aeabi_d2lz>
 8006d00:	f7f9 fbbc 	bl	800047c <__aeabi_l2d>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4628      	mov	r0, r5
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 fa2c 	bl	8000168 <__aeabi_dsub>
 8006d10:	460b      	mov	r3, r1
 8006d12:	4602      	mov	r2, r0
 8006d14:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006d18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	ea4a 0a08 	orr.w	sl, sl, r8
 8006d22:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006d26:	d06c      	beq.n	8006e02 <_strtod_l+0xbaa>
 8006d28:	a309      	add	r3, pc, #36	; (adr r3, 8006d50 <_strtod_l+0xaf8>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fe45 	bl	80009bc <__aeabi_dcmplt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f47f acd8 	bne.w	80066e8 <_strtod_l+0x490>
 8006d38:	a307      	add	r3, pc, #28	; (adr r3, 8006d58 <_strtod_l+0xb00>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d42:	f7f9 fe59 	bl	80009f8 <__aeabi_dcmpgt>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d08c      	beq.n	8006c64 <_strtod_l+0xa0c>
 8006d4a:	e4cd      	b.n	80066e8 <_strtod_l+0x490>
 8006d4c:	f3af 8000 	nop.w
 8006d50:	94a03595 	.word	0x94a03595
 8006d54:	3fdfffff 	.word	0x3fdfffff
 8006d58:	35afe535 	.word	0x35afe535
 8006d5c:	3fe00000 	.word	0x3fe00000
 8006d60:	000fffff 	.word	0x000fffff
 8006d64:	7ff00000 	.word	0x7ff00000
 8006d68:	7fefffff 	.word	0x7fefffff
 8006d6c:	3ff00000 	.word	0x3ff00000
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	7fe00000 	.word	0x7fe00000
 8006d78:	7c9fffff 	.word	0x7c9fffff
 8006d7c:	bff00000 	.word	0xbff00000
 8006d80:	9b05      	ldr	r3, [sp, #20]
 8006d82:	b333      	cbz	r3, 8006dd2 <_strtod_l+0xb7a>
 8006d84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d8a:	d822      	bhi.n	8006dd2 <_strtod_l+0xb7a>
 8006d8c:	a328      	add	r3, pc, #160	; (adr r3, 8006e30 <_strtod_l+0xbd8>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	4628      	mov	r0, r5
 8006d94:	4639      	mov	r1, r7
 8006d96:	f7f9 fe1b 	bl	80009d0 <__aeabi_dcmple>
 8006d9a:	b1a0      	cbz	r0, 8006dc6 <_strtod_l+0xb6e>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7f9 fe72 	bl	8000a88 <__aeabi_d2uiz>
 8006da4:	2801      	cmp	r0, #1
 8006da6:	bf38      	it	cc
 8006da8:	2001      	movcc	r0, #1
 8006daa:	f7f9 fb1b 	bl	80003e4 <__aeabi_ui2d>
 8006dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db0:	4605      	mov	r5, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	bb03      	cbnz	r3, 8006df8 <_strtod_l+0xba0>
 8006db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dba:	9014      	str	r0, [sp, #80]	; 0x50
 8006dbc:	9315      	str	r3, [sp, #84]	; 0x54
 8006dbe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006dc2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006dca:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	9311      	str	r3, [sp, #68]	; 0x44
 8006dd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006dd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006dd6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006dda:	f002 ff09 	bl	8009bf0 <__ulp>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fb77 	bl	80004d8 <__aeabi_dmul>
 8006dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dee:	f7f9 f9bd 	bl	800016c <__adddf3>
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	e774      	b.n	8006ce2 <_strtod_l+0xa8a>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006e00:	e7dd      	b.n	8006dbe <_strtod_l+0xb66>
 8006e02:	a30d      	add	r3, pc, #52	; (adr r3, 8006e38 <_strtod_l+0xbe0>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 fdd8 	bl	80009bc <__aeabi_dcmplt>
 8006e0c:	e79b      	b.n	8006d46 <_strtod_l+0xaee>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	930e      	str	r3, [sp, #56]	; 0x38
 8006e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	f7ff ba5b 	b.w	80062d2 <_strtod_l+0x7a>
 8006e1c:	2a65      	cmp	r2, #101	; 0x65
 8006e1e:	f43f ab52 	beq.w	80064c6 <_strtod_l+0x26e>
 8006e22:	2a45      	cmp	r2, #69	; 0x45
 8006e24:	f43f ab4f 	beq.w	80064c6 <_strtod_l+0x26e>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f7ff bb87 	b.w	800653c <_strtod_l+0x2e4>
 8006e2e:	bf00      	nop
 8006e30:	ffc00000 	.word	0xffc00000
 8006e34:	41dfffff 	.word	0x41dfffff
 8006e38:	94a03595 	.word	0x94a03595
 8006e3c:	3fcfffff 	.word	0x3fcfffff

08006e40 <_strtod_r>:
 8006e40:	4b01      	ldr	r3, [pc, #4]	; (8006e48 <_strtod_r+0x8>)
 8006e42:	f7ff ba09 	b.w	8006258 <_strtod_l>
 8006e46:	bf00      	nop
 8006e48:	20000024 	.word	0x20000024

08006e4c <strtod>:
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	4601      	mov	r1, r0
 8006e50:	4802      	ldr	r0, [pc, #8]	; (8006e5c <strtod+0x10>)
 8006e52:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <strtod+0x14>)
 8006e54:	6800      	ldr	r0, [r0, #0]
 8006e56:	f7ff b9ff 	b.w	8006258 <_strtod_l>
 8006e5a:	bf00      	nop
 8006e5c:	200001dc 	.word	0x200001dc
 8006e60:	20000024 	.word	0x20000024

08006e64 <__cvt>:
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6a:	461f      	mov	r7, r3
 8006e6c:	bfbb      	ittet	lt
 8006e6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	461f      	movlt	r7, r3
 8006e74:	2300      	movge	r3, #0
 8006e76:	232d      	movlt	r3, #45	; 0x2d
 8006e78:	b088      	sub	sp, #32
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e80:	7013      	strb	r3, [r2, #0]
 8006e82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006e88:	f023 0820 	bic.w	r8, r3, #32
 8006e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e90:	d005      	beq.n	8006e9e <__cvt+0x3a>
 8006e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e96:	d100      	bne.n	8006e9a <__cvt+0x36>
 8006e98:	3501      	adds	r5, #1
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e000      	b.n	8006ea0 <__cvt+0x3c>
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	aa07      	add	r2, sp, #28
 8006ea2:	9204      	str	r2, [sp, #16]
 8006ea4:	aa06      	add	r2, sp, #24
 8006ea6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006eaa:	e9cd 3500 	strd	r3, r5, [sp]
 8006eae:	4622      	mov	r2, r4
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	f001 f8e5 	bl	8008080 <_dtoa_r>
 8006eb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eba:	4606      	mov	r6, r0
 8006ebc:	d102      	bne.n	8006ec4 <__cvt+0x60>
 8006ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ec0:	07db      	lsls	r3, r3, #31
 8006ec2:	d522      	bpl.n	8006f0a <__cvt+0xa6>
 8006ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ec8:	eb06 0905 	add.w	r9, r6, r5
 8006ecc:	d110      	bne.n	8006ef0 <__cvt+0x8c>
 8006ece:	7833      	ldrb	r3, [r6, #0]
 8006ed0:	2b30      	cmp	r3, #48	; 0x30
 8006ed2:	d10a      	bne.n	8006eea <__cvt+0x86>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8006ee0:	b918      	cbnz	r0, 8006eea <__cvt+0x86>
 8006ee2:	f1c5 0501 	rsb	r5, r5, #1
 8006ee6:	f8ca 5000 	str.w	r5, [sl]
 8006eea:	f8da 3000 	ldr.w	r3, [sl]
 8006eee:	4499      	add	r9, r3
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f7f9 fd56 	bl	80009a8 <__aeabi_dcmpeq>
 8006efc:	b108      	cbz	r0, 8006f02 <__cvt+0x9e>
 8006efe:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f02:	2230      	movs	r2, #48	; 0x30
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	454b      	cmp	r3, r9
 8006f08:	d307      	bcc.n	8006f1a <__cvt+0xb6>
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f10:	1b9b      	subs	r3, r3, r6
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	b008      	add	sp, #32
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	1c59      	adds	r1, r3, #1
 8006f1c:	9107      	str	r1, [sp, #28]
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e7f0      	b.n	8006f04 <__cvt+0xa0>

08006f22 <__exponent>:
 8006f22:	4603      	mov	r3, r0
 8006f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f26:	2900      	cmp	r1, #0
 8006f28:	f803 2b02 	strb.w	r2, [r3], #2
 8006f2c:	bfb6      	itet	lt
 8006f2e:	222d      	movlt	r2, #45	; 0x2d
 8006f30:	222b      	movge	r2, #43	; 0x2b
 8006f32:	4249      	neglt	r1, r1
 8006f34:	2909      	cmp	r1, #9
 8006f36:	7042      	strb	r2, [r0, #1]
 8006f38:	dd2a      	ble.n	8006f90 <__exponent+0x6e>
 8006f3a:	f10d 0207 	add.w	r2, sp, #7
 8006f3e:	4617      	mov	r7, r2
 8006f40:	260a      	movs	r6, #10
 8006f42:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f46:	4694      	mov	ip, r2
 8006f48:	fb06 1415 	mls	r4, r6, r5, r1
 8006f4c:	3430      	adds	r4, #48	; 0x30
 8006f4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f52:	460c      	mov	r4, r1
 8006f54:	2c63      	cmp	r4, #99	; 0x63
 8006f56:	4629      	mov	r1, r5
 8006f58:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f5c:	dcf1      	bgt.n	8006f42 <__exponent+0x20>
 8006f5e:	3130      	adds	r1, #48	; 0x30
 8006f60:	f1ac 0402 	sub.w	r4, ip, #2
 8006f64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f68:	4622      	mov	r2, r4
 8006f6a:	1c41      	adds	r1, r0, #1
 8006f6c:	42ba      	cmp	r2, r7
 8006f6e:	d30a      	bcc.n	8006f86 <__exponent+0x64>
 8006f70:	f10d 0209 	add.w	r2, sp, #9
 8006f74:	eba2 020c 	sub.w	r2, r2, ip
 8006f78:	42bc      	cmp	r4, r7
 8006f7a:	bf88      	it	hi
 8006f7c:	2200      	movhi	r2, #0
 8006f7e:	4413      	add	r3, r2
 8006f80:	1a18      	subs	r0, r3, r0
 8006f82:	b003      	add	sp, #12
 8006f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f8e:	e7ed      	b.n	8006f6c <__exponent+0x4a>
 8006f90:	2330      	movs	r3, #48	; 0x30
 8006f92:	3130      	adds	r1, #48	; 0x30
 8006f94:	7083      	strb	r3, [r0, #2]
 8006f96:	70c1      	strb	r1, [r0, #3]
 8006f98:	1d03      	adds	r3, r0, #4
 8006f9a:	e7f1      	b.n	8006f80 <__exponent+0x5e>

08006f9c <_printf_float>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	b091      	sub	sp, #68	; 0x44
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006fa8:	4616      	mov	r6, r2
 8006faa:	461f      	mov	r7, r3
 8006fac:	4605      	mov	r5, r0
 8006fae:	f000 ff3d 	bl	8007e2c <_localeconv_r>
 8006fb2:	6803      	ldr	r3, [r0, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb8:	f7f9 f8ca 	bl	8000150 <strlen>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8006fc6:	3307      	adds	r3, #7
 8006fc8:	f023 0307 	bic.w	r3, r3, #7
 8006fcc:	f103 0208 	add.w	r2, r3, #8
 8006fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006fd4:	f8d4 b000 	ldr.w	fp, [r4]
 8006fd8:	f8c8 2000 	str.w	r2, [r8]
 8006fdc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	4643      	mov	r3, r8
 8006fe4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006fe8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	4b9c      	ldr	r3, [pc, #624]	; (8007268 <_printf_float+0x2cc>)
 8006ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ff8:	f7f9 fd08 	bl	8000a0c <__aeabi_dcmpun>
 8006ffc:	bb70      	cbnz	r0, 800705c <_printf_float+0xc0>
 8006ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8007002:	4650      	mov	r0, sl
 8007004:	4b98      	ldr	r3, [pc, #608]	; (8007268 <_printf_float+0x2cc>)
 8007006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007008:	f7f9 fce2 	bl	80009d0 <__aeabi_dcmple>
 800700c:	bb30      	cbnz	r0, 800705c <_printf_float+0xc0>
 800700e:	2200      	movs	r2, #0
 8007010:	2300      	movs	r3, #0
 8007012:	4650      	mov	r0, sl
 8007014:	4641      	mov	r1, r8
 8007016:	f7f9 fcd1 	bl	80009bc <__aeabi_dcmplt>
 800701a:	b110      	cbz	r0, 8007022 <_printf_float+0x86>
 800701c:	232d      	movs	r3, #45	; 0x2d
 800701e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007022:	4a92      	ldr	r2, [pc, #584]	; (800726c <_printf_float+0x2d0>)
 8007024:	4b92      	ldr	r3, [pc, #584]	; (8007270 <_printf_float+0x2d4>)
 8007026:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800702a:	bf94      	ite	ls
 800702c:	4690      	movls	r8, r2
 800702e:	4698      	movhi	r8, r3
 8007030:	2303      	movs	r3, #3
 8007032:	f04f 0a00 	mov.w	sl, #0
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	f02b 0304 	bic.w	r3, fp, #4
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	4633      	mov	r3, r6
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
 8007044:	9700      	str	r7, [sp, #0]
 8007046:	aa0f      	add	r2, sp, #60	; 0x3c
 8007048:	f000 f9d6 	bl	80073f8 <_printf_common>
 800704c:	3001      	adds	r0, #1
 800704e:	f040 8090 	bne.w	8007172 <_printf_float+0x1d6>
 8007052:	f04f 30ff 	mov.w	r0, #4294967295
 8007056:	b011      	add	sp, #68	; 0x44
 8007058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705c:	4652      	mov	r2, sl
 800705e:	4643      	mov	r3, r8
 8007060:	4650      	mov	r0, sl
 8007062:	4641      	mov	r1, r8
 8007064:	f7f9 fcd2 	bl	8000a0c <__aeabi_dcmpun>
 8007068:	b148      	cbz	r0, 800707e <_printf_float+0xe2>
 800706a:	f1b8 0f00 	cmp.w	r8, #0
 800706e:	bfb8      	it	lt
 8007070:	232d      	movlt	r3, #45	; 0x2d
 8007072:	4a80      	ldr	r2, [pc, #512]	; (8007274 <_printf_float+0x2d8>)
 8007074:	bfb8      	it	lt
 8007076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800707a:	4b7f      	ldr	r3, [pc, #508]	; (8007278 <_printf_float+0x2dc>)
 800707c:	e7d3      	b.n	8007026 <_printf_float+0x8a>
 800707e:	6863      	ldr	r3, [r4, #4]
 8007080:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	d142      	bne.n	800710e <_printf_float+0x172>
 8007088:	2306      	movs	r3, #6
 800708a:	6063      	str	r3, [r4, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	9206      	str	r2, [sp, #24]
 8007090:	aa0e      	add	r2, sp, #56	; 0x38
 8007092:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007096:	aa0d      	add	r2, sp, #52	; 0x34
 8007098:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800709c:	9203      	str	r2, [sp, #12]
 800709e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80070a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	4652      	mov	r2, sl
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4628      	mov	r0, r5
 80070b0:	4643      	mov	r3, r8
 80070b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80070b4:	f7ff fed6 	bl	8006e64 <__cvt>
 80070b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ba:	4680      	mov	r8, r0
 80070bc:	2947      	cmp	r1, #71	; 0x47
 80070be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070c0:	d108      	bne.n	80070d4 <_printf_float+0x138>
 80070c2:	1cc8      	adds	r0, r1, #3
 80070c4:	db02      	blt.n	80070cc <_printf_float+0x130>
 80070c6:	6863      	ldr	r3, [r4, #4]
 80070c8:	4299      	cmp	r1, r3
 80070ca:	dd40      	ble.n	800714e <_printf_float+0x1b2>
 80070cc:	f1a9 0902 	sub.w	r9, r9, #2
 80070d0:	fa5f f989 	uxtb.w	r9, r9
 80070d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070d8:	d81f      	bhi.n	800711a <_printf_float+0x17e>
 80070da:	464a      	mov	r2, r9
 80070dc:	3901      	subs	r1, #1
 80070de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070e2:	910d      	str	r1, [sp, #52]	; 0x34
 80070e4:	f7ff ff1d 	bl	8006f22 <__exponent>
 80070e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ea:	4682      	mov	sl, r0
 80070ec:	1813      	adds	r3, r2, r0
 80070ee:	2a01      	cmp	r2, #1
 80070f0:	6123      	str	r3, [r4, #16]
 80070f2:	dc02      	bgt.n	80070fa <_printf_float+0x15e>
 80070f4:	6822      	ldr	r2, [r4, #0]
 80070f6:	07d2      	lsls	r2, r2, #31
 80070f8:	d501      	bpl.n	80070fe <_printf_float+0x162>
 80070fa:	3301      	adds	r3, #1
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007102:	2b00      	cmp	r3, #0
 8007104:	d09b      	beq.n	800703e <_printf_float+0xa2>
 8007106:	232d      	movs	r3, #45	; 0x2d
 8007108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800710c:	e797      	b.n	800703e <_printf_float+0xa2>
 800710e:	2947      	cmp	r1, #71	; 0x47
 8007110:	d1bc      	bne.n	800708c <_printf_float+0xf0>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ba      	bne.n	800708c <_printf_float+0xf0>
 8007116:	2301      	movs	r3, #1
 8007118:	e7b7      	b.n	800708a <_printf_float+0xee>
 800711a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800711e:	d118      	bne.n	8007152 <_printf_float+0x1b6>
 8007120:	2900      	cmp	r1, #0
 8007122:	6863      	ldr	r3, [r4, #4]
 8007124:	dd0b      	ble.n	800713e <_printf_float+0x1a2>
 8007126:	6121      	str	r1, [r4, #16]
 8007128:	b913      	cbnz	r3, 8007130 <_printf_float+0x194>
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	07d0      	lsls	r0, r2, #31
 800712e:	d502      	bpl.n	8007136 <_printf_float+0x19a>
 8007130:	3301      	adds	r3, #1
 8007132:	440b      	add	r3, r1
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	65a1      	str	r1, [r4, #88]	; 0x58
 800713c:	e7df      	b.n	80070fe <_printf_float+0x162>
 800713e:	b913      	cbnz	r3, 8007146 <_printf_float+0x1aa>
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	07d2      	lsls	r2, r2, #31
 8007144:	d501      	bpl.n	800714a <_printf_float+0x1ae>
 8007146:	3302      	adds	r3, #2
 8007148:	e7f4      	b.n	8007134 <_printf_float+0x198>
 800714a:	2301      	movs	r3, #1
 800714c:	e7f2      	b.n	8007134 <_printf_float+0x198>
 800714e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007154:	4299      	cmp	r1, r3
 8007156:	db05      	blt.n	8007164 <_printf_float+0x1c8>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	6121      	str	r1, [r4, #16]
 800715c:	07d8      	lsls	r0, r3, #31
 800715e:	d5ea      	bpl.n	8007136 <_printf_float+0x19a>
 8007160:	1c4b      	adds	r3, r1, #1
 8007162:	e7e7      	b.n	8007134 <_printf_float+0x198>
 8007164:	2900      	cmp	r1, #0
 8007166:	bfcc      	ite	gt
 8007168:	2201      	movgt	r2, #1
 800716a:	f1c1 0202 	rsble	r2, r1, #2
 800716e:	4413      	add	r3, r2
 8007170:	e7e0      	b.n	8007134 <_printf_float+0x198>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	055a      	lsls	r2, r3, #21
 8007176:	d407      	bmi.n	8007188 <_printf_float+0x1ec>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	4642      	mov	r2, r8
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	d12b      	bne.n	80071de <_printf_float+0x242>
 8007186:	e764      	b.n	8007052 <_printf_float+0xb6>
 8007188:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800718c:	f240 80dd 	bls.w	800734a <_printf_float+0x3ae>
 8007190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	f7f9 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800719c:	2800      	cmp	r0, #0
 800719e:	d033      	beq.n	8007208 <_printf_float+0x26c>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	4a35      	ldr	r2, [pc, #212]	; (800727c <_printf_float+0x2e0>)
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f af51 	beq.w	8007052 <_printf_float+0xb6>
 80071b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071b4:	429a      	cmp	r2, r3
 80071b6:	db02      	blt.n	80071be <_printf_float+0x222>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	07d8      	lsls	r0, r3, #31
 80071bc:	d50f      	bpl.n	80071de <_printf_float+0x242>
 80071be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f af42 	beq.w	8007052 <_printf_float+0xb6>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	f104 091a 	add.w	r9, r4, #26
 80071d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d8:	3b01      	subs	r3, #1
 80071da:	4543      	cmp	r3, r8
 80071dc:	dc09      	bgt.n	80071f2 <_printf_float+0x256>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	079b      	lsls	r3, r3, #30
 80071e2:	f100 8104 	bmi.w	80073ee <_printf_float+0x452>
 80071e6:	68e0      	ldr	r0, [r4, #12]
 80071e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071ea:	4298      	cmp	r0, r3
 80071ec:	bfb8      	it	lt
 80071ee:	4618      	movlt	r0, r3
 80071f0:	e731      	b.n	8007056 <_printf_float+0xba>
 80071f2:	2301      	movs	r3, #1
 80071f4:	464a      	mov	r2, r9
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f af28 	beq.w	8007052 <_printf_float+0xb6>
 8007202:	f108 0801 	add.w	r8, r8, #1
 8007206:	e7e6      	b.n	80071d6 <_printf_float+0x23a>
 8007208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800720a:	2b00      	cmp	r3, #0
 800720c:	dc38      	bgt.n	8007280 <_printf_float+0x2e4>
 800720e:	2301      	movs	r3, #1
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <_printf_float+0x2e0>)
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f af1a 	beq.w	8007052 <_printf_float+0xb6>
 800721e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007222:	4313      	orrs	r3, r2
 8007224:	d102      	bne.n	800722c <_printf_float+0x290>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	07d9      	lsls	r1, r3, #31
 800722a:	d5d8      	bpl.n	80071de <_printf_float+0x242>
 800722c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f af0b 	beq.w	8007052 <_printf_float+0xb6>
 800723c:	f04f 0900 	mov.w	r9, #0
 8007240:	f104 0a1a 	add.w	sl, r4, #26
 8007244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007246:	425b      	negs	r3, r3
 8007248:	454b      	cmp	r3, r9
 800724a:	dc01      	bgt.n	8007250 <_printf_float+0x2b4>
 800724c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724e:	e794      	b.n	800717a <_printf_float+0x1de>
 8007250:	2301      	movs	r3, #1
 8007252:	4652      	mov	r2, sl
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f aef9 	beq.w	8007052 <_printf_float+0xb6>
 8007260:	f109 0901 	add.w	r9, r9, #1
 8007264:	e7ee      	b.n	8007244 <_printf_float+0x2a8>
 8007266:	bf00      	nop
 8007268:	7fefffff 	.word	0x7fefffff
 800726c:	0800c590 	.word	0x0800c590
 8007270:	0800c594 	.word	0x0800c594
 8007274:	0800c598 	.word	0x0800c598
 8007278:	0800c59c 	.word	0x0800c59c
 800727c:	0800c5a0 	.word	0x0800c5a0
 8007280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007284:	429a      	cmp	r2, r3
 8007286:	bfa8      	it	ge
 8007288:	461a      	movge	r2, r3
 800728a:	2a00      	cmp	r2, #0
 800728c:	4691      	mov	r9, r2
 800728e:	dc37      	bgt.n	8007300 <_printf_float+0x364>
 8007290:	f04f 0b00 	mov.w	fp, #0
 8007294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007298:	f104 021a 	add.w	r2, r4, #26
 800729c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80072a0:	ebaa 0309 	sub.w	r3, sl, r9
 80072a4:	455b      	cmp	r3, fp
 80072a6:	dc33      	bgt.n	8007310 <_printf_float+0x374>
 80072a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072ac:	429a      	cmp	r2, r3
 80072ae:	db3b      	blt.n	8007328 <_printf_float+0x38c>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	07da      	lsls	r2, r3, #31
 80072b4:	d438      	bmi.n	8007328 <_printf_float+0x38c>
 80072b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80072ba:	eba2 0903 	sub.w	r9, r2, r3
 80072be:	eba2 020a 	sub.w	r2, r2, sl
 80072c2:	4591      	cmp	r9, r2
 80072c4:	bfa8      	it	ge
 80072c6:	4691      	movge	r9, r2
 80072c8:	f1b9 0f00 	cmp.w	r9, #0
 80072cc:	dc34      	bgt.n	8007338 <_printf_float+0x39c>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072d6:	f104 0a1a 	add.w	sl, r4, #26
 80072da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	eba3 0309 	sub.w	r3, r3, r9
 80072e4:	4543      	cmp	r3, r8
 80072e6:	f77f af7a 	ble.w	80071de <_printf_float+0x242>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f aeac 	beq.w	8007052 <_printf_float+0xb6>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	e7ec      	b.n	80072da <_printf_float+0x33e>
 8007300:	4613      	mov	r3, r2
 8007302:	4631      	mov	r1, r6
 8007304:	4642      	mov	r2, r8
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	d1c0      	bne.n	8007290 <_printf_float+0x2f4>
 800730e:	e6a0      	b.n	8007052 <_printf_float+0xb6>
 8007310:	2301      	movs	r3, #1
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	920b      	str	r2, [sp, #44]	; 0x2c
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f ae99 	beq.w	8007052 <_printf_float+0xb6>
 8007320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007322:	f10b 0b01 	add.w	fp, fp, #1
 8007326:	e7b9      	b.n	800729c <_printf_float+0x300>
 8007328:	4631      	mov	r1, r6
 800732a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800732e:	4628      	mov	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	3001      	adds	r0, #1
 8007334:	d1bf      	bne.n	80072b6 <_printf_float+0x31a>
 8007336:	e68c      	b.n	8007052 <_printf_float+0xb6>
 8007338:	464b      	mov	r3, r9
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	eb08 020a 	add.w	r2, r8, sl
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	d1c2      	bne.n	80072ce <_printf_float+0x332>
 8007348:	e683      	b.n	8007052 <_printf_float+0xb6>
 800734a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800734c:	2a01      	cmp	r2, #1
 800734e:	dc01      	bgt.n	8007354 <_printf_float+0x3b8>
 8007350:	07db      	lsls	r3, r3, #31
 8007352:	d539      	bpl.n	80073c8 <_printf_float+0x42c>
 8007354:	2301      	movs	r3, #1
 8007356:	4642      	mov	r2, r8
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f ae77 	beq.w	8007052 <_printf_float+0xb6>
 8007364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f ae6f 	beq.w	8007052 <_printf_float+0xb6>
 8007374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007380:	f7f9 fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8007384:	b9d8      	cbnz	r0, 80073be <_printf_float+0x422>
 8007386:	f109 33ff 	add.w	r3, r9, #4294967295
 800738a:	f108 0201 	add.w	r2, r8, #1
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	d10e      	bne.n	80073b6 <_printf_float+0x41a>
 8007398:	e65b      	b.n	8007052 <_printf_float+0xb6>
 800739a:	2301      	movs	r3, #1
 800739c:	464a      	mov	r2, r9
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae54 	beq.w	8007052 <_printf_float+0xb6>
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b0:	3b01      	subs	r3, #1
 80073b2:	4543      	cmp	r3, r8
 80073b4:	dcf1      	bgt.n	800739a <_printf_float+0x3fe>
 80073b6:	4653      	mov	r3, sl
 80073b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073bc:	e6de      	b.n	800717c <_printf_float+0x1e0>
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	f104 091a 	add.w	r9, r4, #26
 80073c6:	e7f2      	b.n	80073ae <_printf_float+0x412>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4642      	mov	r2, r8
 80073cc:	e7df      	b.n	800738e <_printf_float+0x3f2>
 80073ce:	2301      	movs	r3, #1
 80073d0:	464a      	mov	r2, r9
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	f43f ae3a 	beq.w	8007052 <_printf_float+0xb6>
 80073de:	f108 0801 	add.w	r8, r8, #1
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073e6:	1a5b      	subs	r3, r3, r1
 80073e8:	4543      	cmp	r3, r8
 80073ea:	dcf0      	bgt.n	80073ce <_printf_float+0x432>
 80073ec:	e6fb      	b.n	80071e6 <_printf_float+0x24a>
 80073ee:	f04f 0800 	mov.w	r8, #0
 80073f2:	f104 0919 	add.w	r9, r4, #25
 80073f6:	e7f4      	b.n	80073e2 <_printf_float+0x446>

080073f8 <_printf_common>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4616      	mov	r6, r2
 80073fe:	4699      	mov	r9, r3
 8007400:	688a      	ldr	r2, [r1, #8]
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	4607      	mov	r7, r0
 8007406:	4293      	cmp	r3, r2
 8007408:	bfb8      	it	lt
 800740a:	4613      	movlt	r3, r2
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007412:	460c      	mov	r4, r1
 8007414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007418:	b10a      	cbz	r2, 800741e <_printf_common+0x26>
 800741a:	3301      	adds	r3, #1
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	0699      	lsls	r1, r3, #26
 8007422:	bf42      	ittt	mi
 8007424:	6833      	ldrmi	r3, [r6, #0]
 8007426:	3302      	addmi	r3, #2
 8007428:	6033      	strmi	r3, [r6, #0]
 800742a:	6825      	ldr	r5, [r4, #0]
 800742c:	f015 0506 	ands.w	r5, r5, #6
 8007430:	d106      	bne.n	8007440 <_printf_common+0x48>
 8007432:	f104 0a19 	add.w	sl, r4, #25
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	6832      	ldr	r2, [r6, #0]
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	42ab      	cmp	r3, r5
 800743e:	dc2b      	bgt.n	8007498 <_printf_common+0xa0>
 8007440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007444:	1e13      	subs	r3, r2, #0
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	bf18      	it	ne
 800744a:	2301      	movne	r3, #1
 800744c:	0692      	lsls	r2, r2, #26
 800744e:	d430      	bmi.n	80074b2 <_printf_common+0xba>
 8007450:	4649      	mov	r1, r9
 8007452:	4638      	mov	r0, r7
 8007454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007458:	47c0      	blx	r8
 800745a:	3001      	adds	r0, #1
 800745c:	d023      	beq.n	80074a6 <_printf_common+0xae>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	6922      	ldr	r2, [r4, #16]
 8007462:	f003 0306 	and.w	r3, r3, #6
 8007466:	2b04      	cmp	r3, #4
 8007468:	bf14      	ite	ne
 800746a:	2500      	movne	r5, #0
 800746c:	6833      	ldreq	r3, [r6, #0]
 800746e:	f04f 0600 	mov.w	r6, #0
 8007472:	bf08      	it	eq
 8007474:	68e5      	ldreq	r5, [r4, #12]
 8007476:	f104 041a 	add.w	r4, r4, #26
 800747a:	bf08      	it	eq
 800747c:	1aed      	subeq	r5, r5, r3
 800747e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007482:	bf08      	it	eq
 8007484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007488:	4293      	cmp	r3, r2
 800748a:	bfc4      	itt	gt
 800748c:	1a9b      	subgt	r3, r3, r2
 800748e:	18ed      	addgt	r5, r5, r3
 8007490:	42b5      	cmp	r5, r6
 8007492:	d11a      	bne.n	80074ca <_printf_common+0xd2>
 8007494:	2000      	movs	r0, #0
 8007496:	e008      	b.n	80074aa <_printf_common+0xb2>
 8007498:	2301      	movs	r3, #1
 800749a:	4652      	mov	r2, sl
 800749c:	4649      	mov	r1, r9
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d103      	bne.n	80074ae <_printf_common+0xb6>
 80074a6:	f04f 30ff 	mov.w	r0, #4294967295
 80074aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ae:	3501      	adds	r5, #1
 80074b0:	e7c1      	b.n	8007436 <_printf_common+0x3e>
 80074b2:	2030      	movs	r0, #48	; 0x30
 80074b4:	18e1      	adds	r1, r4, r3
 80074b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074c0:	4422      	add	r2, r4
 80074c2:	3302      	adds	r3, #2
 80074c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074c8:	e7c2      	b.n	8007450 <_printf_common+0x58>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4622      	mov	r2, r4
 80074ce:	4649      	mov	r1, r9
 80074d0:	4638      	mov	r0, r7
 80074d2:	47c0      	blx	r8
 80074d4:	3001      	adds	r0, #1
 80074d6:	d0e6      	beq.n	80074a6 <_printf_common+0xae>
 80074d8:	3601      	adds	r6, #1
 80074da:	e7d9      	b.n	8007490 <_printf_common+0x98>

080074dc <_printf_i>:
 80074dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	7e0f      	ldrb	r7, [r1, #24]
 80074e2:	4691      	mov	r9, r2
 80074e4:	2f78      	cmp	r7, #120	; 0x78
 80074e6:	4680      	mov	r8, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	469a      	mov	sl, r3
 80074ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074f2:	d807      	bhi.n	8007504 <_printf_i+0x28>
 80074f4:	2f62      	cmp	r7, #98	; 0x62
 80074f6:	d80a      	bhi.n	800750e <_printf_i+0x32>
 80074f8:	2f00      	cmp	r7, #0
 80074fa:	f000 80d5 	beq.w	80076a8 <_printf_i+0x1cc>
 80074fe:	2f58      	cmp	r7, #88	; 0x58
 8007500:	f000 80c1 	beq.w	8007686 <_printf_i+0x1aa>
 8007504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800750c:	e03a      	b.n	8007584 <_printf_i+0xa8>
 800750e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007512:	2b15      	cmp	r3, #21
 8007514:	d8f6      	bhi.n	8007504 <_printf_i+0x28>
 8007516:	a101      	add	r1, pc, #4	; (adr r1, 800751c <_printf_i+0x40>)
 8007518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800751c:	08007575 	.word	0x08007575
 8007520:	08007589 	.word	0x08007589
 8007524:	08007505 	.word	0x08007505
 8007528:	08007505 	.word	0x08007505
 800752c:	08007505 	.word	0x08007505
 8007530:	08007505 	.word	0x08007505
 8007534:	08007589 	.word	0x08007589
 8007538:	08007505 	.word	0x08007505
 800753c:	08007505 	.word	0x08007505
 8007540:	08007505 	.word	0x08007505
 8007544:	08007505 	.word	0x08007505
 8007548:	0800768f 	.word	0x0800768f
 800754c:	080075b5 	.word	0x080075b5
 8007550:	08007649 	.word	0x08007649
 8007554:	08007505 	.word	0x08007505
 8007558:	08007505 	.word	0x08007505
 800755c:	080076b1 	.word	0x080076b1
 8007560:	08007505 	.word	0x08007505
 8007564:	080075b5 	.word	0x080075b5
 8007568:	08007505 	.word	0x08007505
 800756c:	08007505 	.word	0x08007505
 8007570:	08007651 	.word	0x08007651
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	602a      	str	r2, [r5, #0]
 800757c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007584:	2301      	movs	r3, #1
 8007586:	e0a0      	b.n	80076ca <_printf_i+0x1ee>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	0607      	lsls	r7, r0, #24
 800758e:	f103 0104 	add.w	r1, r3, #4
 8007592:	6029      	str	r1, [r5, #0]
 8007594:	d501      	bpl.n	800759a <_printf_i+0xbe>
 8007596:	681e      	ldr	r6, [r3, #0]
 8007598:	e003      	b.n	80075a2 <_printf_i+0xc6>
 800759a:	0646      	lsls	r6, r0, #25
 800759c:	d5fb      	bpl.n	8007596 <_printf_i+0xba>
 800759e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	da03      	bge.n	80075ae <_printf_i+0xd2>
 80075a6:	232d      	movs	r3, #45	; 0x2d
 80075a8:	4276      	negs	r6, r6
 80075aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ae:	230a      	movs	r3, #10
 80075b0:	4859      	ldr	r0, [pc, #356]	; (8007718 <_printf_i+0x23c>)
 80075b2:	e012      	b.n	80075da <_printf_i+0xfe>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	1d19      	adds	r1, r3, #4
 80075ba:	6029      	str	r1, [r5, #0]
 80075bc:	0605      	lsls	r5, r0, #24
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0xe8>
 80075c0:	681e      	ldr	r6, [r3, #0]
 80075c2:	e002      	b.n	80075ca <_printf_i+0xee>
 80075c4:	0641      	lsls	r1, r0, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0xe4>
 80075c8:	881e      	ldrh	r6, [r3, #0]
 80075ca:	2f6f      	cmp	r7, #111	; 0x6f
 80075cc:	bf0c      	ite	eq
 80075ce:	2308      	moveq	r3, #8
 80075d0:	230a      	movne	r3, #10
 80075d2:	4851      	ldr	r0, [pc, #324]	; (8007718 <_printf_i+0x23c>)
 80075d4:	2100      	movs	r1, #0
 80075d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075da:	6865      	ldr	r5, [r4, #4]
 80075dc:	2d00      	cmp	r5, #0
 80075de:	bfa8      	it	ge
 80075e0:	6821      	ldrge	r1, [r4, #0]
 80075e2:	60a5      	str	r5, [r4, #8]
 80075e4:	bfa4      	itt	ge
 80075e6:	f021 0104 	bicge.w	r1, r1, #4
 80075ea:	6021      	strge	r1, [r4, #0]
 80075ec:	b90e      	cbnz	r6, 80075f2 <_printf_i+0x116>
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	d04b      	beq.n	800768a <_printf_i+0x1ae>
 80075f2:	4615      	mov	r5, r2
 80075f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80075f8:	fb03 6711 	mls	r7, r3, r1, r6
 80075fc:	5dc7      	ldrb	r7, [r0, r7]
 80075fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007602:	4637      	mov	r7, r6
 8007604:	42bb      	cmp	r3, r7
 8007606:	460e      	mov	r6, r1
 8007608:	d9f4      	bls.n	80075f4 <_printf_i+0x118>
 800760a:	2b08      	cmp	r3, #8
 800760c:	d10b      	bne.n	8007626 <_printf_i+0x14a>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	07de      	lsls	r6, r3, #31
 8007612:	d508      	bpl.n	8007626 <_printf_i+0x14a>
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	6861      	ldr	r1, [r4, #4]
 8007618:	4299      	cmp	r1, r3
 800761a:	bfde      	ittt	le
 800761c:	2330      	movle	r3, #48	; 0x30
 800761e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007622:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007626:	1b52      	subs	r2, r2, r5
 8007628:	6122      	str	r2, [r4, #16]
 800762a:	464b      	mov	r3, r9
 800762c:	4621      	mov	r1, r4
 800762e:	4640      	mov	r0, r8
 8007630:	f8cd a000 	str.w	sl, [sp]
 8007634:	aa03      	add	r2, sp, #12
 8007636:	f7ff fedf 	bl	80073f8 <_printf_common>
 800763a:	3001      	adds	r0, #1
 800763c:	d14a      	bne.n	80076d4 <_printf_i+0x1f8>
 800763e:	f04f 30ff 	mov.w	r0, #4294967295
 8007642:	b004      	add	sp, #16
 8007644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	f043 0320 	orr.w	r3, r3, #32
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	2778      	movs	r7, #120	; 0x78
 8007652:	4832      	ldr	r0, [pc, #200]	; (800771c <_printf_i+0x240>)
 8007654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	6829      	ldr	r1, [r5, #0]
 800765c:	061f      	lsls	r7, r3, #24
 800765e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007662:	d402      	bmi.n	800766a <_printf_i+0x18e>
 8007664:	065f      	lsls	r7, r3, #25
 8007666:	bf48      	it	mi
 8007668:	b2b6      	uxthmi	r6, r6
 800766a:	07df      	lsls	r7, r3, #31
 800766c:	bf48      	it	mi
 800766e:	f043 0320 	orrmi.w	r3, r3, #32
 8007672:	6029      	str	r1, [r5, #0]
 8007674:	bf48      	it	mi
 8007676:	6023      	strmi	r3, [r4, #0]
 8007678:	b91e      	cbnz	r6, 8007682 <_printf_i+0x1a6>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f023 0320 	bic.w	r3, r3, #32
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	2310      	movs	r3, #16
 8007684:	e7a6      	b.n	80075d4 <_printf_i+0xf8>
 8007686:	4824      	ldr	r0, [pc, #144]	; (8007718 <_printf_i+0x23c>)
 8007688:	e7e4      	b.n	8007654 <_printf_i+0x178>
 800768a:	4615      	mov	r5, r2
 800768c:	e7bd      	b.n	800760a <_printf_i+0x12e>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	6826      	ldr	r6, [r4, #0]
 8007692:	1d18      	adds	r0, r3, #4
 8007694:	6961      	ldr	r1, [r4, #20]
 8007696:	6028      	str	r0, [r5, #0]
 8007698:	0635      	lsls	r5, r6, #24
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	d501      	bpl.n	80076a2 <_printf_i+0x1c6>
 800769e:	6019      	str	r1, [r3, #0]
 80076a0:	e002      	b.n	80076a8 <_printf_i+0x1cc>
 80076a2:	0670      	lsls	r0, r6, #25
 80076a4:	d5fb      	bpl.n	800769e <_printf_i+0x1c2>
 80076a6:	8019      	strh	r1, [r3, #0]
 80076a8:	2300      	movs	r3, #0
 80076aa:	4615      	mov	r5, r2
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	e7bc      	b.n	800762a <_printf_i+0x14e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	2100      	movs	r1, #0
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	602a      	str	r2, [r5, #0]
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	6862      	ldr	r2, [r4, #4]
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 fc2c 	bl	8007f1a <memchr>
 80076c2:	b108      	cbz	r0, 80076c8 <_printf_i+0x1ec>
 80076c4:	1b40      	subs	r0, r0, r5
 80076c6:	6060      	str	r0, [r4, #4]
 80076c8:	6863      	ldr	r3, [r4, #4]
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	2300      	movs	r3, #0
 80076ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d2:	e7aa      	b.n	800762a <_printf_i+0x14e>
 80076d4:	462a      	mov	r2, r5
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	47d0      	blx	sl
 80076de:	3001      	adds	r0, #1
 80076e0:	d0ad      	beq.n	800763e <_printf_i+0x162>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	079b      	lsls	r3, r3, #30
 80076e6:	d413      	bmi.n	8007710 <_printf_i+0x234>
 80076e8:	68e0      	ldr	r0, [r4, #12]
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	4298      	cmp	r0, r3
 80076ee:	bfb8      	it	lt
 80076f0:	4618      	movlt	r0, r3
 80076f2:	e7a6      	b.n	8007642 <_printf_i+0x166>
 80076f4:	2301      	movs	r3, #1
 80076f6:	4632      	mov	r2, r6
 80076f8:	4649      	mov	r1, r9
 80076fa:	4640      	mov	r0, r8
 80076fc:	47d0      	blx	sl
 80076fe:	3001      	adds	r0, #1
 8007700:	d09d      	beq.n	800763e <_printf_i+0x162>
 8007702:	3501      	adds	r5, #1
 8007704:	68e3      	ldr	r3, [r4, #12]
 8007706:	9903      	ldr	r1, [sp, #12]
 8007708:	1a5b      	subs	r3, r3, r1
 800770a:	42ab      	cmp	r3, r5
 800770c:	dcf2      	bgt.n	80076f4 <_printf_i+0x218>
 800770e:	e7eb      	b.n	80076e8 <_printf_i+0x20c>
 8007710:	2500      	movs	r5, #0
 8007712:	f104 0619 	add.w	r6, r4, #25
 8007716:	e7f5      	b.n	8007704 <_printf_i+0x228>
 8007718:	0800c5a2 	.word	0x0800c5a2
 800771c:	0800c5b3 	.word	0x0800c5b3

08007720 <_scanf_float>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	b087      	sub	sp, #28
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	688b      	ldr	r3, [r1, #8]
 800772a:	4617      	mov	r7, r2
 800772c:	1e5a      	subs	r2, r3, #1
 800772e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007732:	bf85      	ittet	hi
 8007734:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007738:	195b      	addhi	r3, r3, r5
 800773a:	2300      	movls	r3, #0
 800773c:	9302      	strhi	r3, [sp, #8]
 800773e:	bf88      	it	hi
 8007740:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007744:	468b      	mov	fp, r1
 8007746:	f04f 0500 	mov.w	r5, #0
 800774a:	bf8c      	ite	hi
 800774c:	608b      	strhi	r3, [r1, #8]
 800774e:	9302      	strls	r3, [sp, #8]
 8007750:	680b      	ldr	r3, [r1, #0]
 8007752:	4680      	mov	r8, r0
 8007754:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007758:	f84b 3b1c 	str.w	r3, [fp], #28
 800775c:	460c      	mov	r4, r1
 800775e:	465e      	mov	r6, fp
 8007760:	46aa      	mov	sl, r5
 8007762:	46a9      	mov	r9, r5
 8007764:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007768:	9501      	str	r5, [sp, #4]
 800776a:	68a2      	ldr	r2, [r4, #8]
 800776c:	b152      	cbz	r2, 8007784 <_scanf_float+0x64>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b4e      	cmp	r3, #78	; 0x4e
 8007774:	d864      	bhi.n	8007840 <_scanf_float+0x120>
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d83c      	bhi.n	80077f4 <_scanf_float+0xd4>
 800777a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800777e:	b2c8      	uxtb	r0, r1
 8007780:	280e      	cmp	r0, #14
 8007782:	d93a      	bls.n	80077fa <_scanf_float+0xda>
 8007784:	f1b9 0f00 	cmp.w	r9, #0
 8007788:	d003      	beq.n	8007792 <_scanf_float+0x72>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007796:	f1ba 0f01 	cmp.w	sl, #1
 800779a:	f200 8113 	bhi.w	80079c4 <_scanf_float+0x2a4>
 800779e:	455e      	cmp	r6, fp
 80077a0:	f200 8105 	bhi.w	80079ae <_scanf_float+0x28e>
 80077a4:	2501      	movs	r5, #1
 80077a6:	4628      	mov	r0, r5
 80077a8:	b007      	add	sp, #28
 80077aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80077b2:	2a0d      	cmp	r2, #13
 80077b4:	d8e6      	bhi.n	8007784 <_scanf_float+0x64>
 80077b6:	a101      	add	r1, pc, #4	; (adr r1, 80077bc <_scanf_float+0x9c>)
 80077b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80077bc:	080078fb 	.word	0x080078fb
 80077c0:	08007785 	.word	0x08007785
 80077c4:	08007785 	.word	0x08007785
 80077c8:	08007785 	.word	0x08007785
 80077cc:	0800795b 	.word	0x0800795b
 80077d0:	08007933 	.word	0x08007933
 80077d4:	08007785 	.word	0x08007785
 80077d8:	08007785 	.word	0x08007785
 80077dc:	08007909 	.word	0x08007909
 80077e0:	08007785 	.word	0x08007785
 80077e4:	08007785 	.word	0x08007785
 80077e8:	08007785 	.word	0x08007785
 80077ec:	08007785 	.word	0x08007785
 80077f0:	080078c1 	.word	0x080078c1
 80077f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80077f8:	e7db      	b.n	80077b2 <_scanf_float+0x92>
 80077fa:	290e      	cmp	r1, #14
 80077fc:	d8c2      	bhi.n	8007784 <_scanf_float+0x64>
 80077fe:	a001      	add	r0, pc, #4	; (adr r0, 8007804 <_scanf_float+0xe4>)
 8007800:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007804:	080078b3 	.word	0x080078b3
 8007808:	08007785 	.word	0x08007785
 800780c:	080078b3 	.word	0x080078b3
 8007810:	08007947 	.word	0x08007947
 8007814:	08007785 	.word	0x08007785
 8007818:	08007861 	.word	0x08007861
 800781c:	0800789d 	.word	0x0800789d
 8007820:	0800789d 	.word	0x0800789d
 8007824:	0800789d 	.word	0x0800789d
 8007828:	0800789d 	.word	0x0800789d
 800782c:	0800789d 	.word	0x0800789d
 8007830:	0800789d 	.word	0x0800789d
 8007834:	0800789d 	.word	0x0800789d
 8007838:	0800789d 	.word	0x0800789d
 800783c:	0800789d 	.word	0x0800789d
 8007840:	2b6e      	cmp	r3, #110	; 0x6e
 8007842:	d809      	bhi.n	8007858 <_scanf_float+0x138>
 8007844:	2b60      	cmp	r3, #96	; 0x60
 8007846:	d8b2      	bhi.n	80077ae <_scanf_float+0x8e>
 8007848:	2b54      	cmp	r3, #84	; 0x54
 800784a:	d077      	beq.n	800793c <_scanf_float+0x21c>
 800784c:	2b59      	cmp	r3, #89	; 0x59
 800784e:	d199      	bne.n	8007784 <_scanf_float+0x64>
 8007850:	2d07      	cmp	r5, #7
 8007852:	d197      	bne.n	8007784 <_scanf_float+0x64>
 8007854:	2508      	movs	r5, #8
 8007856:	e029      	b.n	80078ac <_scanf_float+0x18c>
 8007858:	2b74      	cmp	r3, #116	; 0x74
 800785a:	d06f      	beq.n	800793c <_scanf_float+0x21c>
 800785c:	2b79      	cmp	r3, #121	; 0x79
 800785e:	e7f6      	b.n	800784e <_scanf_float+0x12e>
 8007860:	6821      	ldr	r1, [r4, #0]
 8007862:	05c8      	lsls	r0, r1, #23
 8007864:	d51a      	bpl.n	800789c <_scanf_float+0x17c>
 8007866:	9b02      	ldr	r3, [sp, #8]
 8007868:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800786c:	6021      	str	r1, [r4, #0]
 800786e:	f109 0901 	add.w	r9, r9, #1
 8007872:	b11b      	cbz	r3, 800787c <_scanf_float+0x15c>
 8007874:	3b01      	subs	r3, #1
 8007876:	3201      	adds	r2, #1
 8007878:	9302      	str	r3, [sp, #8]
 800787a:	60a2      	str	r2, [r4, #8]
 800787c:	68a3      	ldr	r3, [r4, #8]
 800787e:	3b01      	subs	r3, #1
 8007880:	60a3      	str	r3, [r4, #8]
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	3301      	adds	r3, #1
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3b01      	subs	r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	f340 8084 	ble.w	800799c <_scanf_float+0x27c>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3301      	adds	r3, #1
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	e766      	b.n	800776a <_scanf_float+0x4a>
 800789c:	eb1a 0f05 	cmn.w	sl, r5
 80078a0:	f47f af70 	bne.w	8007784 <_scanf_float+0x64>
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80078aa:	6022      	str	r2, [r4, #0]
 80078ac:	f806 3b01 	strb.w	r3, [r6], #1
 80078b0:	e7e4      	b.n	800787c <_scanf_float+0x15c>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	0610      	lsls	r0, r2, #24
 80078b6:	f57f af65 	bpl.w	8007784 <_scanf_float+0x64>
 80078ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078be:	e7f4      	b.n	80078aa <_scanf_float+0x18a>
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	d10e      	bne.n	80078e4 <_scanf_float+0x1c4>
 80078c6:	f1b9 0f00 	cmp.w	r9, #0
 80078ca:	d10e      	bne.n	80078ea <_scanf_float+0x1ca>
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80078d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078d6:	d108      	bne.n	80078ea <_scanf_float+0x1ca>
 80078d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078dc:	f04f 0a01 	mov.w	sl, #1
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	e7e3      	b.n	80078ac <_scanf_float+0x18c>
 80078e4:	f1ba 0f02 	cmp.w	sl, #2
 80078e8:	d055      	beq.n	8007996 <_scanf_float+0x276>
 80078ea:	2d01      	cmp	r5, #1
 80078ec:	d002      	beq.n	80078f4 <_scanf_float+0x1d4>
 80078ee:	2d04      	cmp	r5, #4
 80078f0:	f47f af48 	bne.w	8007784 <_scanf_float+0x64>
 80078f4:	3501      	adds	r5, #1
 80078f6:	b2ed      	uxtb	r5, r5
 80078f8:	e7d8      	b.n	80078ac <_scanf_float+0x18c>
 80078fa:	f1ba 0f01 	cmp.w	sl, #1
 80078fe:	f47f af41 	bne.w	8007784 <_scanf_float+0x64>
 8007902:	f04f 0a02 	mov.w	sl, #2
 8007906:	e7d1      	b.n	80078ac <_scanf_float+0x18c>
 8007908:	b97d      	cbnz	r5, 800792a <_scanf_float+0x20a>
 800790a:	f1b9 0f00 	cmp.w	r9, #0
 800790e:	f47f af3c 	bne.w	800778a <_scanf_float+0x6a>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007918:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800791c:	f47f af39 	bne.w	8007792 <_scanf_float+0x72>
 8007920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007924:	2501      	movs	r5, #1
 8007926:	6022      	str	r2, [r4, #0]
 8007928:	e7c0      	b.n	80078ac <_scanf_float+0x18c>
 800792a:	2d03      	cmp	r5, #3
 800792c:	d0e2      	beq.n	80078f4 <_scanf_float+0x1d4>
 800792e:	2d05      	cmp	r5, #5
 8007930:	e7de      	b.n	80078f0 <_scanf_float+0x1d0>
 8007932:	2d02      	cmp	r5, #2
 8007934:	f47f af26 	bne.w	8007784 <_scanf_float+0x64>
 8007938:	2503      	movs	r5, #3
 800793a:	e7b7      	b.n	80078ac <_scanf_float+0x18c>
 800793c:	2d06      	cmp	r5, #6
 800793e:	f47f af21 	bne.w	8007784 <_scanf_float+0x64>
 8007942:	2507      	movs	r5, #7
 8007944:	e7b2      	b.n	80078ac <_scanf_float+0x18c>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	0591      	lsls	r1, r2, #22
 800794a:	f57f af1b 	bpl.w	8007784 <_scanf_float+0x64>
 800794e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	f8cd 9004 	str.w	r9, [sp, #4]
 8007958:	e7a8      	b.n	80078ac <_scanf_float+0x18c>
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007960:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007964:	d006      	beq.n	8007974 <_scanf_float+0x254>
 8007966:	0550      	lsls	r0, r2, #21
 8007968:	f57f af0c 	bpl.w	8007784 <_scanf_float+0x64>
 800796c:	f1b9 0f00 	cmp.w	r9, #0
 8007970:	f43f af0f 	beq.w	8007792 <_scanf_float+0x72>
 8007974:	0591      	lsls	r1, r2, #22
 8007976:	bf58      	it	pl
 8007978:	9901      	ldrpl	r1, [sp, #4]
 800797a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800797e:	bf58      	it	pl
 8007980:	eba9 0101 	subpl.w	r1, r9, r1
 8007984:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007988:	f04f 0900 	mov.w	r9, #0
 800798c:	bf58      	it	pl
 800798e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007992:	6022      	str	r2, [r4, #0]
 8007994:	e78a      	b.n	80078ac <_scanf_float+0x18c>
 8007996:	f04f 0a03 	mov.w	sl, #3
 800799a:	e787      	b.n	80078ac <_scanf_float+0x18c>
 800799c:	4639      	mov	r1, r7
 800799e:	4640      	mov	r0, r8
 80079a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079a4:	4798      	blx	r3
 80079a6:	2800      	cmp	r0, #0
 80079a8:	f43f aedf 	beq.w	800776a <_scanf_float+0x4a>
 80079ac:	e6ea      	b.n	8007784 <_scanf_float+0x64>
 80079ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079b2:	463a      	mov	r2, r7
 80079b4:	4640      	mov	r0, r8
 80079b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079ba:	4798      	blx	r3
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	3b01      	subs	r3, #1
 80079c0:	6123      	str	r3, [r4, #16]
 80079c2:	e6ec      	b.n	800779e <_scanf_float+0x7e>
 80079c4:	1e6b      	subs	r3, r5, #1
 80079c6:	2b06      	cmp	r3, #6
 80079c8:	d825      	bhi.n	8007a16 <_scanf_float+0x2f6>
 80079ca:	2d02      	cmp	r5, #2
 80079cc:	d836      	bhi.n	8007a3c <_scanf_float+0x31c>
 80079ce:	455e      	cmp	r6, fp
 80079d0:	f67f aee8 	bls.w	80077a4 <_scanf_float+0x84>
 80079d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079d8:	463a      	mov	r2, r7
 80079da:	4640      	mov	r0, r8
 80079dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079e0:	4798      	blx	r3
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	e7f1      	b.n	80079ce <_scanf_float+0x2ae>
 80079ea:	9802      	ldr	r0, [sp, #8]
 80079ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80079f4:	463a      	mov	r2, r7
 80079f6:	9002      	str	r0, [sp, #8]
 80079f8:	4640      	mov	r0, r8
 80079fa:	4798      	blx	r3
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a06:	fa5f fa8a 	uxtb.w	sl, sl
 8007a0a:	f1ba 0f02 	cmp.w	sl, #2
 8007a0e:	d1ec      	bne.n	80079ea <_scanf_float+0x2ca>
 8007a10:	3d03      	subs	r5, #3
 8007a12:	b2ed      	uxtb	r5, r5
 8007a14:	1b76      	subs	r6, r6, r5
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	05da      	lsls	r2, r3, #23
 8007a1a:	d52f      	bpl.n	8007a7c <_scanf_float+0x35c>
 8007a1c:	055b      	lsls	r3, r3, #21
 8007a1e:	d510      	bpl.n	8007a42 <_scanf_float+0x322>
 8007a20:	455e      	cmp	r6, fp
 8007a22:	f67f aebf 	bls.w	80077a4 <_scanf_float+0x84>
 8007a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a32:	4798      	blx	r3
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	6123      	str	r3, [r4, #16]
 8007a3a:	e7f1      	b.n	8007a20 <_scanf_float+0x300>
 8007a3c:	46aa      	mov	sl, r5
 8007a3e:	9602      	str	r6, [sp, #8]
 8007a40:	e7df      	b.n	8007a02 <_scanf_float+0x2e2>
 8007a42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	2965      	cmp	r1, #101	; 0x65
 8007a4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	d00c      	beq.n	8007a70 <_scanf_float+0x350>
 8007a56:	2945      	cmp	r1, #69	; 0x45
 8007a58:	d00a      	beq.n	8007a70 <_scanf_float+0x350>
 8007a5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a5e:	463a      	mov	r2, r7
 8007a60:	4640      	mov	r0, r8
 8007a62:	4798      	blx	r3
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	1eb5      	subs	r5, r6, #2
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	463a      	mov	r2, r7
 8007a72:	4640      	mov	r0, r8
 8007a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a78:	4798      	blx	r3
 8007a7a:	462e      	mov	r6, r5
 8007a7c:	6825      	ldr	r5, [r4, #0]
 8007a7e:	f015 0510 	ands.w	r5, r5, #16
 8007a82:	d155      	bne.n	8007b30 <_scanf_float+0x410>
 8007a84:	7035      	strb	r5, [r6, #0]
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a90:	d11d      	bne.n	8007ace <_scanf_float+0x3ae>
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	454b      	cmp	r3, r9
 8007a96:	eba3 0209 	sub.w	r2, r3, r9
 8007a9a:	d125      	bne.n	8007ae8 <_scanf_float+0x3c8>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4659      	mov	r1, fp
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	f7ff f9cd 	bl	8006e40 <_strtod_r>
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	f8d4 c000 	ldr.w	ip, [r4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f01c 0f02 	tst.w	ip, #2
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	f103 0204 	add.w	r2, r3, #4
 8007aba:	d020      	beq.n	8007afe <_scanf_float+0x3de>
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	600a      	str	r2, [r1, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	e9c3 6700 	strd	r6, r7, [r3]
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60e3      	str	r3, [r4, #12]
 8007acc:	e66b      	b.n	80077a6 <_scanf_float+0x86>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0e3      	beq.n	8007a9c <_scanf_float+0x37c>
 8007ad4:	9905      	ldr	r1, [sp, #20]
 8007ad6:	230a      	movs	r3, #10
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4640      	mov	r0, r8
 8007adc:	3101      	adds	r1, #1
 8007ade:	f002 fa35 	bl	8009f4c <_strtol_r>
 8007ae2:	9b04      	ldr	r3, [sp, #16]
 8007ae4:	9e05      	ldr	r6, [sp, #20]
 8007ae6:	1ac2      	subs	r2, r0, r3
 8007ae8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007aec:	429e      	cmp	r6, r3
 8007aee:	bf28      	it	cs
 8007af0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007af4:	4630      	mov	r0, r6
 8007af6:	490f      	ldr	r1, [pc, #60]	; (8007b34 <_scanf_float+0x414>)
 8007af8:	f000 f8e2 	bl	8007cc0 <siprintf>
 8007afc:	e7ce      	b.n	8007a9c <_scanf_float+0x37c>
 8007afe:	f01c 0f04 	tst.w	ip, #4
 8007b02:	d1db      	bne.n	8007abc <_scanf_float+0x39c>
 8007b04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007b08:	f8cc 2000 	str.w	r2, [ip]
 8007b0c:	f8d3 8000 	ldr.w	r8, [r3]
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	f7f8 ff7a 	bl	8000a0c <__aeabi_dcmpun>
 8007b18:	b128      	cbz	r0, 8007b26 <_scanf_float+0x406>
 8007b1a:	4807      	ldr	r0, [pc, #28]	; (8007b38 <_scanf_float+0x418>)
 8007b1c:	f000 fa20 	bl	8007f60 <nanf>
 8007b20:	f8c8 0000 	str.w	r0, [r8]
 8007b24:	e7cf      	b.n	8007ac6 <_scanf_float+0x3a6>
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 ffcd 	bl	8000ac8 <__aeabi_d2f>
 8007b2e:	e7f7      	b.n	8007b20 <_scanf_float+0x400>
 8007b30:	2500      	movs	r5, #0
 8007b32:	e638      	b.n	80077a6 <_scanf_float+0x86>
 8007b34:	0800c5c4 	.word	0x0800c5c4
 8007b38:	0800c961 	.word	0x0800c961

08007b3c <std>:
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
 8007b42:	e9c0 3300 	strd	r3, r3, [r0]
 8007b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4a:	6083      	str	r3, [r0, #8]
 8007b4c:	8181      	strh	r1, [r0, #12]
 8007b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b50:	81c2      	strh	r2, [r0, #14]
 8007b52:	6183      	str	r3, [r0, #24]
 8007b54:	4619      	mov	r1, r3
 8007b56:	2208      	movs	r2, #8
 8007b58:	305c      	adds	r0, #92	; 0x5c
 8007b5a:	f000 f914 	bl	8007d86 <memset>
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <std+0x58>)
 8007b60:	6224      	str	r4, [r4, #32]
 8007b62:	6263      	str	r3, [r4, #36]	; 0x24
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <std+0x5c>)
 8007b66:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <std+0x60>)
 8007b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <std+0x64>)
 8007b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b70:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <std+0x68>)
 8007b72:	429c      	cmp	r4, r3
 8007b74:	d006      	beq.n	8007b84 <std+0x48>
 8007b76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b7a:	4294      	cmp	r4, r2
 8007b7c:	d002      	beq.n	8007b84 <std+0x48>
 8007b7e:	33d0      	adds	r3, #208	; 0xd0
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d105      	bne.n	8007b90 <std+0x54>
 8007b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	f000 b9c2 	b.w	8007f14 <__retarget_lock_init_recursive>
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08007d01 	.word	0x08007d01
 8007b98:	08007d23 	.word	0x08007d23
 8007b9c:	08007d5b 	.word	0x08007d5b
 8007ba0:	08007d7f 	.word	0x08007d7f
 8007ba4:	20000800 	.word	0x20000800

08007ba8 <stdio_exit_handler>:
 8007ba8:	4a02      	ldr	r2, [pc, #8]	; (8007bb4 <stdio_exit_handler+0xc>)
 8007baa:	4903      	ldr	r1, [pc, #12]	; (8007bb8 <stdio_exit_handler+0x10>)
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <stdio_exit_handler+0x14>)
 8007bae:	f000 b869 	b.w	8007c84 <_fwalk_sglue>
 8007bb2:	bf00      	nop
 8007bb4:	20000018 	.word	0x20000018
 8007bb8:	0800a321 	.word	0x0800a321
 8007bbc:	20000190 	.word	0x20000190

08007bc0 <cleanup_stdio>:
 8007bc0:	6841      	ldr	r1, [r0, #4]
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <cleanup_stdio+0x34>)
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	4604      	mov	r4, r0
 8007bca:	d001      	beq.n	8007bd0 <cleanup_stdio+0x10>
 8007bcc:	f002 fba8 	bl	800a320 <_fflush_r>
 8007bd0:	68a1      	ldr	r1, [r4, #8]
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <cleanup_stdio+0x38>)
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d002      	beq.n	8007bde <cleanup_stdio+0x1e>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f002 fba1 	bl	800a320 <_fflush_r>
 8007bde:	68e1      	ldr	r1, [r4, #12]
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <cleanup_stdio+0x3c>)
 8007be2:	4299      	cmp	r1, r3
 8007be4:	d004      	beq.n	8007bf0 <cleanup_stdio+0x30>
 8007be6:	4620      	mov	r0, r4
 8007be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bec:	f002 bb98 	b.w	800a320 <_fflush_r>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000800 	.word	0x20000800
 8007bf8:	20000868 	.word	0x20000868
 8007bfc:	200008d0 	.word	0x200008d0

08007c00 <global_stdio_init.part.0>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <global_stdio_init.part.0+0x30>)
 8007c04:	4c0b      	ldr	r4, [pc, #44]	; (8007c34 <global_stdio_init.part.0+0x34>)
 8007c06:	4a0c      	ldr	r2, [pc, #48]	; (8007c38 <global_stdio_init.part.0+0x38>)
 8007c08:	4620      	mov	r0, r4
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7ff ff94 	bl	8007b3c <std>
 8007c14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2109      	movs	r1, #9
 8007c1c:	f7ff ff8e 	bl	8007b3c <std>
 8007c20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c24:	2202      	movs	r2, #2
 8007c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2a:	2112      	movs	r1, #18
 8007c2c:	f7ff bf86 	b.w	8007b3c <std>
 8007c30:	20000938 	.word	0x20000938
 8007c34:	20000800 	.word	0x20000800
 8007c38:	08007ba9 	.word	0x08007ba9

08007c3c <__sfp_lock_acquire>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__sfp_lock_acquire+0x8>)
 8007c3e:	f000 b96a 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	20000941 	.word	0x20000941

08007c48 <__sfp_lock_release>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__sfp_lock_release+0x8>)
 8007c4a:	f000 b965 	b.w	8007f18 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20000941 	.word	0x20000941

08007c54 <__sinit>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	f7ff fff0 	bl	8007c3c <__sfp_lock_acquire>
 8007c5c:	6a23      	ldr	r3, [r4, #32]
 8007c5e:	b11b      	cbz	r3, 8007c68 <__sinit+0x14>
 8007c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c64:	f7ff bff0 	b.w	8007c48 <__sfp_lock_release>
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <__sinit+0x28>)
 8007c6a:	6223      	str	r3, [r4, #32]
 8007c6c:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <__sinit+0x2c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1f5      	bne.n	8007c60 <__sinit+0xc>
 8007c74:	f7ff ffc4 	bl	8007c00 <global_stdio_init.part.0>
 8007c78:	e7f2      	b.n	8007c60 <__sinit+0xc>
 8007c7a:	bf00      	nop
 8007c7c:	08007bc1 	.word	0x08007bc1
 8007c80:	20000938 	.word	0x20000938

08007c84 <_fwalk_sglue>:
 8007c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c88:	4607      	mov	r7, r0
 8007c8a:	4688      	mov	r8, r1
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	2600      	movs	r6, #0
 8007c90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c94:	f1b9 0901 	subs.w	r9, r9, #1
 8007c98:	d505      	bpl.n	8007ca6 <_fwalk_sglue+0x22>
 8007c9a:	6824      	ldr	r4, [r4, #0]
 8007c9c:	2c00      	cmp	r4, #0
 8007c9e:	d1f7      	bne.n	8007c90 <_fwalk_sglue+0xc>
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d907      	bls.n	8007cbc <_fwalk_sglue+0x38>
 8007cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	d003      	beq.n	8007cbc <_fwalk_sglue+0x38>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c0      	blx	r8
 8007cba:	4306      	orrs	r6, r0
 8007cbc:	3568      	adds	r5, #104	; 0x68
 8007cbe:	e7e9      	b.n	8007c94 <_fwalk_sglue+0x10>

08007cc0 <siprintf>:
 8007cc0:	b40e      	push	{r1, r2, r3}
 8007cc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cc6:	b500      	push	{lr}
 8007cc8:	b09c      	sub	sp, #112	; 0x70
 8007cca:	ab1d      	add	r3, sp, #116	; 0x74
 8007ccc:	9002      	str	r0, [sp, #8]
 8007cce:	9006      	str	r0, [sp, #24]
 8007cd0:	9107      	str	r1, [sp, #28]
 8007cd2:	9104      	str	r1, [sp, #16]
 8007cd4:	4808      	ldr	r0, [pc, #32]	; (8007cf8 <siprintf+0x38>)
 8007cd6:	4909      	ldr	r1, [pc, #36]	; (8007cfc <siprintf+0x3c>)
 8007cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	6800      	ldr	r0, [r0, #0]
 8007ce0:	a902      	add	r1, sp, #8
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	f002 f99c 	bl	800a020 <_svfiprintf_r>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	b01c      	add	sp, #112	; 0x70
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	b003      	add	sp, #12
 8007cf6:	4770      	bx	lr
 8007cf8:	200001dc 	.word	0x200001dc
 8007cfc:	ffff0208 	.word	0xffff0208

08007d00 <__sread>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	460c      	mov	r4, r1
 8007d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d08:	f000 f8b6 	bl	8007e78 <_read_r>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	bfab      	itete	ge
 8007d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d12:	89a3      	ldrhlt	r3, [r4, #12]
 8007d14:	181b      	addge	r3, r3, r0
 8007d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d1a:	bfac      	ite	ge
 8007d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d1e:	81a3      	strhlt	r3, [r4, #12]
 8007d20:	bd10      	pop	{r4, pc}

08007d22 <__swrite>:
 8007d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d26:	461f      	mov	r7, r3
 8007d28:	898b      	ldrh	r3, [r1, #12]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	05db      	lsls	r3, r3, #23
 8007d2e:	460c      	mov	r4, r1
 8007d30:	4616      	mov	r6, r2
 8007d32:	d505      	bpl.n	8007d40 <__swrite+0x1e>
 8007d34:	2302      	movs	r3, #2
 8007d36:	2200      	movs	r2, #0
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	f000 f88a 	bl	8007e54 <_lseek_r>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	4632      	mov	r2, r6
 8007d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	f000 b8a1 	b.w	8007e9c <_write_r>

08007d5a <__sseek>:
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 f877 	bl	8007e54 <_lseek_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	bf15      	itete	ne
 8007d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d76:	81a3      	strheq	r3, [r4, #12]
 8007d78:	bf18      	it	ne
 8007d7a:	81a3      	strhne	r3, [r4, #12]
 8007d7c:	bd10      	pop	{r4, pc}

08007d7e <__sclose>:
 8007d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d82:	f000 b857 	b.w	8007e34 <_close_r>

08007d86 <memset>:
 8007d86:	4603      	mov	r3, r0
 8007d88:	4402      	add	r2, r0
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d100      	bne.n	8007d90 <memset+0xa>
 8007d8e:	4770      	bx	lr
 8007d90:	f803 1b01 	strb.w	r1, [r3], #1
 8007d94:	e7f9      	b.n	8007d8a <memset+0x4>

08007d96 <strcat>:
 8007d96:	4602      	mov	r2, r0
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	7814      	ldrb	r4, [r2, #0]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	3201      	adds	r2, #1
 8007da0:	2c00      	cmp	r4, #0
 8007da2:	d1fa      	bne.n	8007d9a <strcat+0x4>
 8007da4:	3b01      	subs	r3, #1
 8007da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	d1f9      	bne.n	8007da6 <strcat+0x10>
 8007db2:	bd10      	pop	{r4, pc}

08007db4 <strncmp>:
 8007db4:	b510      	push	{r4, lr}
 8007db6:	b16a      	cbz	r2, 8007dd4 <strncmp+0x20>
 8007db8:	3901      	subs	r1, #1
 8007dba:	1884      	adds	r4, r0, r2
 8007dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d103      	bne.n	8007dd0 <strncmp+0x1c>
 8007dc8:	42a0      	cmp	r0, r4
 8007dca:	d001      	beq.n	8007dd0 <strncmp+0x1c>
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d1f5      	bne.n	8007dbc <strncmp+0x8>
 8007dd0:	1ad0      	subs	r0, r2, r3
 8007dd2:	bd10      	pop	{r4, pc}
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	e7fc      	b.n	8007dd2 <strncmp+0x1e>

08007dd8 <strncpy>:
 8007dd8:	4603      	mov	r3, r0
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	3901      	subs	r1, #1
 8007dde:	b132      	cbz	r2, 8007dee <strncpy+0x16>
 8007de0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007de4:	3a01      	subs	r2, #1
 8007de6:	f803 4b01 	strb.w	r4, [r3], #1
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	d1f7      	bne.n	8007dde <strncpy+0x6>
 8007dee:	2100      	movs	r1, #0
 8007df0:	441a      	add	r2, r3
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d100      	bne.n	8007df8 <strncpy+0x20>
 8007df6:	bd10      	pop	{r4, pc}
 8007df8:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfc:	e7f9      	b.n	8007df2 <strncpy+0x1a>

08007dfe <strstr>:
 8007dfe:	780a      	ldrb	r2, [r1, #0]
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	b96a      	cbnz	r2, 8007e20 <strstr+0x22>
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d109      	bne.n	8007e1e <strstr+0x20>
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f6      	beq.n	8007e04 <strstr+0x6>
 8007e16:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007e1a:	429e      	cmp	r6, r3
 8007e1c:	d0f7      	beq.n	8007e0e <strstr+0x10>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	7803      	ldrb	r3, [r0, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ef      	bne.n	8007e06 <strstr+0x8>
 8007e26:	4618      	mov	r0, r3
 8007e28:	e7ec      	b.n	8007e04 <strstr+0x6>
	...

08007e2c <_localeconv_r>:
 8007e2c:	4800      	ldr	r0, [pc, #0]	; (8007e30 <_localeconv_r+0x4>)
 8007e2e:	4770      	bx	lr
 8007e30:	20000114 	.word	0x20000114

08007e34 <_close_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	2300      	movs	r3, #0
 8007e38:	4d05      	ldr	r5, [pc, #20]	; (8007e50 <_close_r+0x1c>)
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7fa fe96 	bl	8002b70 <_close>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_close_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_close_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	2000093c 	.word	0x2000093c

08007e54 <_lseek_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4d05      	ldr	r5, [pc, #20]	; (8007e74 <_lseek_r+0x20>)
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7fa fea8 	bl	8002bb8 <_lseek>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_lseek_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_lseek_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	2000093c 	.word	0x2000093c

08007e78 <_read_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	2200      	movs	r2, #0
 8007e82:	4d05      	ldr	r5, [pc, #20]	; (8007e98 <_read_r+0x20>)
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f7fa fe39 	bl	8002afe <_read>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_read_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_read_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	2000093c 	.word	0x2000093c

08007e9c <_write_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4d05      	ldr	r5, [pc, #20]	; (8007ebc <_write_r+0x20>)
 8007ea8:	602a      	str	r2, [r5, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7fa fe44 	bl	8002b38 <_write>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_write_r+0x1e>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_write_r+0x1e>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	2000093c 	.word	0x2000093c

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	; (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	200001dc 	.word	0x200001dc

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	2600      	movs	r6, #0
 8007ed0:	4d0c      	ldr	r5, [pc, #48]	; (8007f04 <__libc_init_array+0x38>)
 8007ed2:	4c0d      	ldr	r4, [pc, #52]	; (8007f08 <__libc_init_array+0x3c>)
 8007ed4:	1b64      	subs	r4, r4, r5
 8007ed6:	10a4      	asrs	r4, r4, #2
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	f003 ff06 	bl	800bcec <_init>
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	4d0a      	ldr	r5, [pc, #40]	; (8007f0c <__libc_init_array+0x40>)
 8007ee4:	4c0a      	ldr	r4, [pc, #40]	; (8007f10 <__libc_init_array+0x44>)
 8007ee6:	1b64      	subs	r4, r4, r5
 8007ee8:	10a4      	asrs	r4, r4, #2
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef4:	4798      	blx	r3
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efe:	4798      	blx	r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	0800c998 	.word	0x0800c998
 8007f08:	0800c998 	.word	0x0800c998
 8007f0c:	0800c998 	.word	0x0800c998
 8007f10:	0800c99c 	.word	0x0800c99c

08007f14 <__retarget_lock_init_recursive>:
 8007f14:	4770      	bx	lr

08007f16 <__retarget_lock_acquire_recursive>:
 8007f16:	4770      	bx	lr

08007f18 <__retarget_lock_release_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <memchr>:
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	b2c9      	uxtb	r1, r1
 8007f20:	4402      	add	r2, r0
 8007f22:	4293      	cmp	r3, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	d101      	bne.n	8007f2c <memchr+0x12>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e003      	b.n	8007f34 <memchr+0x1a>
 8007f2c:	7804      	ldrb	r4, [r0, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	428c      	cmp	r4, r1
 8007f32:	d1f6      	bne.n	8007f22 <memchr+0x8>
 8007f34:	bd10      	pop	{r4, pc}

08007f36 <memcpy>:
 8007f36:	440a      	add	r2, r1
 8007f38:	4291      	cmp	r1, r2
 8007f3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f3e:	d100      	bne.n	8007f42 <memcpy+0xc>
 8007f40:	4770      	bx	lr
 8007f42:	b510      	push	{r4, lr}
 8007f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f48:	4291      	cmp	r1, r2
 8007f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4e:	d1f9      	bne.n	8007f44 <memcpy+0xe>
 8007f50:	bd10      	pop	{r4, pc}
	...

08007f54 <nan>:
 8007f54:	2000      	movs	r0, #0
 8007f56:	4901      	ldr	r1, [pc, #4]	; (8007f5c <nan+0x8>)
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	7ff80000 	.word	0x7ff80000

08007f60 <nanf>:
 8007f60:	4800      	ldr	r0, [pc, #0]	; (8007f64 <nanf+0x4>)
 8007f62:	4770      	bx	lr
 8007f64:	7fc00000 	.word	0x7fc00000

08007f68 <quorem>:
 8007f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	6903      	ldr	r3, [r0, #16]
 8007f6e:	690c      	ldr	r4, [r1, #16]
 8007f70:	4607      	mov	r7, r0
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	db7f      	blt.n	8008076 <quorem+0x10e>
 8007f76:	3c01      	subs	r4, #1
 8007f78:	f100 0514 	add.w	r5, r0, #20
 8007f7c:	f101 0814 	add.w	r8, r1, #20
 8007f80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	429a      	cmp	r2, r3
 8007f92:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f9e:	d331      	bcc.n	8008004 <quorem+0x9c>
 8007fa0:	f04f 0e00 	mov.w	lr, #0
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	46ac      	mov	ip, r5
 8007fa8:	46f2      	mov	sl, lr
 8007faa:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fae:	b293      	uxth	r3, r2
 8007fb0:	fb06 e303 	mla	r3, r6, r3, lr
 8007fb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fb8:	0c1a      	lsrs	r2, r3, #16
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	fb06 220e 	mla	r2, r6, lr, r2
 8007fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8007fc4:	f8dc a000 	ldr.w	sl, [ip]
 8007fc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fcc:	fa1f fa8a 	uxth.w	sl, sl
 8007fd0:	4453      	add	r3, sl
 8007fd2:	f8dc a000 	ldr.w	sl, [ip]
 8007fd6:	b292      	uxth	r2, r2
 8007fd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fe6:	4581      	cmp	r9, r0
 8007fe8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fec:	f84c 3b04 	str.w	r3, [ip], #4
 8007ff0:	d2db      	bcs.n	8007faa <quorem+0x42>
 8007ff2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ff6:	b92b      	cbnz	r3, 8008004 <quorem+0x9c>
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	3b04      	subs	r3, #4
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	d32d      	bcc.n	800805e <quorem+0xf6>
 8008002:	613c      	str	r4, [r7, #16]
 8008004:	4638      	mov	r0, r7
 8008006:	f001 fd4b 	bl	8009aa0 <__mcmp>
 800800a:	2800      	cmp	r0, #0
 800800c:	db23      	blt.n	8008056 <quorem+0xee>
 800800e:	4629      	mov	r1, r5
 8008010:	2000      	movs	r0, #0
 8008012:	3601      	adds	r6, #1
 8008014:	f858 2b04 	ldr.w	r2, [r8], #4
 8008018:	f8d1 c000 	ldr.w	ip, [r1]
 800801c:	b293      	uxth	r3, r2
 800801e:	1ac3      	subs	r3, r0, r3
 8008020:	0c12      	lsrs	r2, r2, #16
 8008022:	fa1f f08c 	uxth.w	r0, ip
 8008026:	4403      	add	r3, r0
 8008028:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800802c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008030:	b29b      	uxth	r3, r3
 8008032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008036:	45c1      	cmp	r9, r8
 8008038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800803c:	f841 3b04 	str.w	r3, [r1], #4
 8008040:	d2e8      	bcs.n	8008014 <quorem+0xac>
 8008042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800804a:	b922      	cbnz	r2, 8008056 <quorem+0xee>
 800804c:	3b04      	subs	r3, #4
 800804e:	429d      	cmp	r5, r3
 8008050:	461a      	mov	r2, r3
 8008052:	d30a      	bcc.n	800806a <quorem+0x102>
 8008054:	613c      	str	r4, [r7, #16]
 8008056:	4630      	mov	r0, r6
 8008058:	b003      	add	sp, #12
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	6812      	ldr	r2, [r2, #0]
 8008060:	3b04      	subs	r3, #4
 8008062:	2a00      	cmp	r2, #0
 8008064:	d1cd      	bne.n	8008002 <quorem+0x9a>
 8008066:	3c01      	subs	r4, #1
 8008068:	e7c8      	b.n	8007ffc <quorem+0x94>
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	3b04      	subs	r3, #4
 800806e:	2a00      	cmp	r2, #0
 8008070:	d1f0      	bne.n	8008054 <quorem+0xec>
 8008072:	3c01      	subs	r4, #1
 8008074:	e7eb      	b.n	800804e <quorem+0xe6>
 8008076:	2000      	movs	r0, #0
 8008078:	e7ee      	b.n	8008058 <quorem+0xf0>
 800807a:	0000      	movs	r0, r0
 800807c:	0000      	movs	r0, r0
	...

08008080 <_dtoa_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	4616      	mov	r6, r2
 8008086:	461f      	mov	r7, r3
 8008088:	69c4      	ldr	r4, [r0, #28]
 800808a:	b099      	sub	sp, #100	; 0x64
 800808c:	4605      	mov	r5, r0
 800808e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008092:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008096:	b974      	cbnz	r4, 80080b6 <_dtoa_r+0x36>
 8008098:	2010      	movs	r0, #16
 800809a:	f001 f977 	bl	800938c <malloc>
 800809e:	4602      	mov	r2, r0
 80080a0:	61e8      	str	r0, [r5, #28]
 80080a2:	b920      	cbnz	r0, 80080ae <_dtoa_r+0x2e>
 80080a4:	21ef      	movs	r1, #239	; 0xef
 80080a6:	4bac      	ldr	r3, [pc, #688]	; (8008358 <_dtoa_r+0x2d8>)
 80080a8:	48ac      	ldr	r0, [pc, #688]	; (800835c <_dtoa_r+0x2dc>)
 80080aa:	f002 f98b 	bl	800a3c4 <__assert_func>
 80080ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080b2:	6004      	str	r4, [r0, #0]
 80080b4:	60c4      	str	r4, [r0, #12]
 80080b6:	69eb      	ldr	r3, [r5, #28]
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	b151      	cbz	r1, 80080d2 <_dtoa_r+0x52>
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	2301      	movs	r3, #1
 80080c0:	4093      	lsls	r3, r2
 80080c2:	604a      	str	r2, [r1, #4]
 80080c4:	608b      	str	r3, [r1, #8]
 80080c6:	4628      	mov	r0, r5
 80080c8:	f001 fa66 	bl	8009598 <_Bfree>
 80080cc:	2200      	movs	r2, #0
 80080ce:	69eb      	ldr	r3, [r5, #28]
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	1e3b      	subs	r3, r7, #0
 80080d4:	bfaf      	iteee	ge
 80080d6:	2300      	movge	r3, #0
 80080d8:	2201      	movlt	r2, #1
 80080da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080de:	9305      	strlt	r3, [sp, #20]
 80080e0:	bfa8      	it	ge
 80080e2:	f8c8 3000 	strge.w	r3, [r8]
 80080e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80080ea:	4b9d      	ldr	r3, [pc, #628]	; (8008360 <_dtoa_r+0x2e0>)
 80080ec:	bfb8      	it	lt
 80080ee:	f8c8 2000 	strlt.w	r2, [r8]
 80080f2:	ea33 0309 	bics.w	r3, r3, r9
 80080f6:	d119      	bne.n	800812c <_dtoa_r+0xac>
 80080f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80080fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008104:	4333      	orrs	r3, r6
 8008106:	f000 8589 	beq.w	8008c1c <_dtoa_r+0xb9c>
 800810a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800810c:	b953      	cbnz	r3, 8008124 <_dtoa_r+0xa4>
 800810e:	4b95      	ldr	r3, [pc, #596]	; (8008364 <_dtoa_r+0x2e4>)
 8008110:	e023      	b.n	800815a <_dtoa_r+0xda>
 8008112:	4b95      	ldr	r3, [pc, #596]	; (8008368 <_dtoa_r+0x2e8>)
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	3308      	adds	r3, #8
 8008118:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	9803      	ldr	r0, [sp, #12]
 800811e:	b019      	add	sp, #100	; 0x64
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	4b8f      	ldr	r3, [pc, #572]	; (8008364 <_dtoa_r+0x2e4>)
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	3303      	adds	r3, #3
 800812a:	e7f5      	b.n	8008118 <_dtoa_r+0x98>
 800812c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008130:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008138:	2200      	movs	r2, #0
 800813a:	2300      	movs	r3, #0
 800813c:	f7f8 fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8008140:	4680      	mov	r8, r0
 8008142:	b160      	cbz	r0, 800815e <_dtoa_r+0xde>
 8008144:	2301      	movs	r3, #1
 8008146:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8562 	beq.w	8008c16 <_dtoa_r+0xb96>
 8008152:	4b86      	ldr	r3, [pc, #536]	; (800836c <_dtoa_r+0x2ec>)
 8008154:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	3b01      	subs	r3, #1
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	e7de      	b.n	800811c <_dtoa_r+0x9c>
 800815e:	ab16      	add	r3, sp, #88	; 0x58
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	ab17      	add	r3, sp, #92	; 0x5c
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	4628      	mov	r0, r5
 8008168:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800816c:	f001 fda8 	bl	8009cc0 <__d2b>
 8008170:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008174:	4682      	mov	sl, r0
 8008176:	2c00      	cmp	r4, #0
 8008178:	d07e      	beq.n	8008278 <_dtoa_r+0x1f8>
 800817a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800817e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008180:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008188:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800818c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008190:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008194:	4619      	mov	r1, r3
 8008196:	2200      	movs	r2, #0
 8008198:	4b75      	ldr	r3, [pc, #468]	; (8008370 <_dtoa_r+0x2f0>)
 800819a:	f7f7 ffe5 	bl	8000168 <__aeabi_dsub>
 800819e:	a368      	add	r3, pc, #416	; (adr r3, 8008340 <_dtoa_r+0x2c0>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 f998 	bl	80004d8 <__aeabi_dmul>
 80081a8:	a367      	add	r3, pc, #412	; (adr r3, 8008348 <_dtoa_r+0x2c8>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f7 ffdd 	bl	800016c <__adddf3>
 80081b2:	4606      	mov	r6, r0
 80081b4:	4620      	mov	r0, r4
 80081b6:	460f      	mov	r7, r1
 80081b8:	f7f8 f924 	bl	8000404 <__aeabi_i2d>
 80081bc:	a364      	add	r3, pc, #400	; (adr r3, 8008350 <_dtoa_r+0x2d0>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f989 	bl	80004d8 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f7 ffcd 	bl	800016c <__adddf3>
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	f7f8 fc2f 	bl	8000a38 <__aeabi_d2iz>
 80081da:	2200      	movs	r2, #0
 80081dc:	4683      	mov	fp, r0
 80081de:	2300      	movs	r3, #0
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 fbea 	bl	80009bc <__aeabi_dcmplt>
 80081e8:	b148      	cbz	r0, 80081fe <_dtoa_r+0x17e>
 80081ea:	4658      	mov	r0, fp
 80081ec:	f7f8 f90a 	bl	8000404 <__aeabi_i2d>
 80081f0:	4632      	mov	r2, r6
 80081f2:	463b      	mov	r3, r7
 80081f4:	f7f8 fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80081f8:	b908      	cbnz	r0, 80081fe <_dtoa_r+0x17e>
 80081fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081fe:	f1bb 0f16 	cmp.w	fp, #22
 8008202:	d857      	bhi.n	80082b4 <_dtoa_r+0x234>
 8008204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008208:	4b5a      	ldr	r3, [pc, #360]	; (8008374 <_dtoa_r+0x2f4>)
 800820a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 fbd3 	bl	80009bc <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	d04e      	beq.n	80082b8 <_dtoa_r+0x238>
 800821a:	2300      	movs	r3, #0
 800821c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008220:	930f      	str	r3, [sp, #60]	; 0x3c
 8008222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008224:	1b1b      	subs	r3, r3, r4
 8008226:	1e5a      	subs	r2, r3, #1
 8008228:	bf46      	itte	mi
 800822a:	f1c3 0901 	rsbmi	r9, r3, #1
 800822e:	2300      	movmi	r3, #0
 8008230:	f04f 0900 	movpl.w	r9, #0
 8008234:	9209      	str	r2, [sp, #36]	; 0x24
 8008236:	bf48      	it	mi
 8008238:	9309      	strmi	r3, [sp, #36]	; 0x24
 800823a:	f1bb 0f00 	cmp.w	fp, #0
 800823e:	db3d      	blt.n	80082bc <_dtoa_r+0x23c>
 8008240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008242:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008246:	445b      	add	r3, fp
 8008248:	9309      	str	r3, [sp, #36]	; 0x24
 800824a:	2300      	movs	r3, #0
 800824c:	930a      	str	r3, [sp, #40]	; 0x28
 800824e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008250:	2b09      	cmp	r3, #9
 8008252:	d867      	bhi.n	8008324 <_dtoa_r+0x2a4>
 8008254:	2b05      	cmp	r3, #5
 8008256:	bfc4      	itt	gt
 8008258:	3b04      	subgt	r3, #4
 800825a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800825c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800825e:	bfc8      	it	gt
 8008260:	2400      	movgt	r4, #0
 8008262:	f1a3 0302 	sub.w	r3, r3, #2
 8008266:	bfd8      	it	le
 8008268:	2401      	movle	r4, #1
 800826a:	2b03      	cmp	r3, #3
 800826c:	f200 8086 	bhi.w	800837c <_dtoa_r+0x2fc>
 8008270:	e8df f003 	tbb	[pc, r3]
 8008274:	5637392c 	.word	0x5637392c
 8008278:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800827c:	441c      	add	r4, r3
 800827e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008282:	2b20      	cmp	r3, #32
 8008284:	bfc1      	itttt	gt
 8008286:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800828a:	fa09 f903 	lslgt.w	r9, r9, r3
 800828e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008292:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008296:	bfd6      	itet	le
 8008298:	f1c3 0320 	rsble	r3, r3, #32
 800829c:	ea49 0003 	orrgt.w	r0, r9, r3
 80082a0:	fa06 f003 	lslle.w	r0, r6, r3
 80082a4:	f7f8 f89e 	bl	80003e4 <__aeabi_ui2d>
 80082a8:	2201      	movs	r2, #1
 80082aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80082ae:	3c01      	subs	r4, #1
 80082b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80082b2:	e76f      	b.n	8008194 <_dtoa_r+0x114>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7b3      	b.n	8008220 <_dtoa_r+0x1a0>
 80082b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082ba:	e7b2      	b.n	8008222 <_dtoa_r+0x1a2>
 80082bc:	f1cb 0300 	rsb	r3, fp, #0
 80082c0:	930a      	str	r3, [sp, #40]	; 0x28
 80082c2:	2300      	movs	r3, #0
 80082c4:	eba9 090b 	sub.w	r9, r9, fp
 80082c8:	930e      	str	r3, [sp, #56]	; 0x38
 80082ca:	e7c0      	b.n	800824e <_dtoa_r+0x1ce>
 80082cc:	2300      	movs	r3, #0
 80082ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dc55      	bgt.n	8008382 <_dtoa_r+0x302>
 80082d6:	2301      	movs	r3, #1
 80082d8:	461a      	mov	r2, r3
 80082da:	9306      	str	r3, [sp, #24]
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	9223      	str	r2, [sp, #140]	; 0x8c
 80082e0:	e00b      	b.n	80082fa <_dtoa_r+0x27a>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f3      	b.n	80082ce <_dtoa_r+0x24e>
 80082e6:	2300      	movs	r3, #0
 80082e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ec:	445b      	add	r3, fp
 80082ee:	9306      	str	r3, [sp, #24]
 80082f0:	3301      	adds	r3, #1
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	9308      	str	r3, [sp, #32]
 80082f6:	bfb8      	it	lt
 80082f8:	2301      	movlt	r3, #1
 80082fa:	2100      	movs	r1, #0
 80082fc:	2204      	movs	r2, #4
 80082fe:	69e8      	ldr	r0, [r5, #28]
 8008300:	f102 0614 	add.w	r6, r2, #20
 8008304:	429e      	cmp	r6, r3
 8008306:	d940      	bls.n	800838a <_dtoa_r+0x30a>
 8008308:	6041      	str	r1, [r0, #4]
 800830a:	4628      	mov	r0, r5
 800830c:	f001 f904 	bl	8009518 <_Balloc>
 8008310:	9003      	str	r0, [sp, #12]
 8008312:	2800      	cmp	r0, #0
 8008314:	d13c      	bne.n	8008390 <_dtoa_r+0x310>
 8008316:	4602      	mov	r2, r0
 8008318:	f240 11af 	movw	r1, #431	; 0x1af
 800831c:	4b16      	ldr	r3, [pc, #88]	; (8008378 <_dtoa_r+0x2f8>)
 800831e:	e6c3      	b.n	80080a8 <_dtoa_r+0x28>
 8008320:	2301      	movs	r3, #1
 8008322:	e7e1      	b.n	80082e8 <_dtoa_r+0x268>
 8008324:	2401      	movs	r4, #1
 8008326:	2300      	movs	r3, #0
 8008328:	940b      	str	r4, [sp, #44]	; 0x2c
 800832a:	9322      	str	r3, [sp, #136]	; 0x88
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	2200      	movs	r2, #0
 8008332:	9306      	str	r3, [sp, #24]
 8008334:	9308      	str	r3, [sp, #32]
 8008336:	2312      	movs	r3, #18
 8008338:	e7d1      	b.n	80082de <_dtoa_r+0x25e>
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w
 8008340:	636f4361 	.word	0x636f4361
 8008344:	3fd287a7 	.word	0x3fd287a7
 8008348:	8b60c8b3 	.word	0x8b60c8b3
 800834c:	3fc68a28 	.word	0x3fc68a28
 8008350:	509f79fb 	.word	0x509f79fb
 8008354:	3fd34413 	.word	0x3fd34413
 8008358:	0800c5de 	.word	0x0800c5de
 800835c:	0800c5f5 	.word	0x0800c5f5
 8008360:	7ff00000 	.word	0x7ff00000
 8008364:	0800c5da 	.word	0x0800c5da
 8008368:	0800c5d1 	.word	0x0800c5d1
 800836c:	0800c5a1 	.word	0x0800c5a1
 8008370:	3ff80000 	.word	0x3ff80000
 8008374:	0800c740 	.word	0x0800c740
 8008378:	0800c64d 	.word	0x0800c64d
 800837c:	2301      	movs	r3, #1
 800837e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008380:	e7d4      	b.n	800832c <_dtoa_r+0x2ac>
 8008382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008384:	9306      	str	r3, [sp, #24]
 8008386:	9308      	str	r3, [sp, #32]
 8008388:	e7b7      	b.n	80082fa <_dtoa_r+0x27a>
 800838a:	3101      	adds	r1, #1
 800838c:	0052      	lsls	r2, r2, #1
 800838e:	e7b7      	b.n	8008300 <_dtoa_r+0x280>
 8008390:	69eb      	ldr	r3, [r5, #28]
 8008392:	9a03      	ldr	r2, [sp, #12]
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	9b08      	ldr	r3, [sp, #32]
 8008398:	2b0e      	cmp	r3, #14
 800839a:	f200 80a8 	bhi.w	80084ee <_dtoa_r+0x46e>
 800839e:	2c00      	cmp	r4, #0
 80083a0:	f000 80a5 	beq.w	80084ee <_dtoa_r+0x46e>
 80083a4:	f1bb 0f00 	cmp.w	fp, #0
 80083a8:	dd34      	ble.n	8008414 <_dtoa_r+0x394>
 80083aa:	4b9a      	ldr	r3, [pc, #616]	; (8008614 <_dtoa_r+0x594>)
 80083ac:	f00b 020f 	and.w	r2, fp, #15
 80083b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80083c4:	d016      	beq.n	80083f4 <_dtoa_r+0x374>
 80083c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083ca:	4b93      	ldr	r3, [pc, #588]	; (8008618 <_dtoa_r+0x598>)
 80083cc:	2703      	movs	r7, #3
 80083ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083d2:	f7f8 f9ab 	bl	800072c <__aeabi_ddiv>
 80083d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083da:	f004 040f 	and.w	r4, r4, #15
 80083de:	4e8e      	ldr	r6, [pc, #568]	; (8008618 <_dtoa_r+0x598>)
 80083e0:	b954      	cbnz	r4, 80083f8 <_dtoa_r+0x378>
 80083e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ea:	f7f8 f99f 	bl	800072c <__aeabi_ddiv>
 80083ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083f2:	e029      	b.n	8008448 <_dtoa_r+0x3c8>
 80083f4:	2702      	movs	r7, #2
 80083f6:	e7f2      	b.n	80083de <_dtoa_r+0x35e>
 80083f8:	07e1      	lsls	r1, r4, #31
 80083fa:	d508      	bpl.n	800840e <_dtoa_r+0x38e>
 80083fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008400:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008404:	f7f8 f868 	bl	80004d8 <__aeabi_dmul>
 8008408:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800840c:	3701      	adds	r7, #1
 800840e:	1064      	asrs	r4, r4, #1
 8008410:	3608      	adds	r6, #8
 8008412:	e7e5      	b.n	80083e0 <_dtoa_r+0x360>
 8008414:	f000 80a5 	beq.w	8008562 <_dtoa_r+0x4e2>
 8008418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800841c:	f1cb 0400 	rsb	r4, fp, #0
 8008420:	4b7c      	ldr	r3, [pc, #496]	; (8008614 <_dtoa_r+0x594>)
 8008422:	f004 020f 	and.w	r2, r4, #15
 8008426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f8 f853 	bl	80004d8 <__aeabi_dmul>
 8008432:	2702      	movs	r7, #2
 8008434:	2300      	movs	r3, #0
 8008436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800843a:	4e77      	ldr	r6, [pc, #476]	; (8008618 <_dtoa_r+0x598>)
 800843c:	1124      	asrs	r4, r4, #4
 800843e:	2c00      	cmp	r4, #0
 8008440:	f040 8084 	bne.w	800854c <_dtoa_r+0x4cc>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1d2      	bne.n	80083ee <_dtoa_r+0x36e>
 8008448:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800844c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8087 	beq.w	8008566 <_dtoa_r+0x4e6>
 8008458:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800845c:	2200      	movs	r2, #0
 800845e:	4b6f      	ldr	r3, [pc, #444]	; (800861c <_dtoa_r+0x59c>)
 8008460:	f7f8 faac 	bl	80009bc <__aeabi_dcmplt>
 8008464:	2800      	cmp	r0, #0
 8008466:	d07e      	beq.n	8008566 <_dtoa_r+0x4e6>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d07b      	beq.n	8008566 <_dtoa_r+0x4e6>
 800846e:	9b06      	ldr	r3, [sp, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	dd38      	ble.n	80084e6 <_dtoa_r+0x466>
 8008474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008478:	2200      	movs	r2, #0
 800847a:	4b69      	ldr	r3, [pc, #420]	; (8008620 <_dtoa_r+0x5a0>)
 800847c:	f7f8 f82c 	bl	80004d8 <__aeabi_dmul>
 8008480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008484:	9c06      	ldr	r4, [sp, #24]
 8008486:	f10b 38ff 	add.w	r8, fp, #4294967295
 800848a:	3701      	adds	r7, #1
 800848c:	4638      	mov	r0, r7
 800848e:	f7f7 ffb9 	bl	8000404 <__aeabi_i2d>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	f7f8 f81f 	bl	80004d8 <__aeabi_dmul>
 800849a:	2200      	movs	r2, #0
 800849c:	4b61      	ldr	r3, [pc, #388]	; (8008624 <_dtoa_r+0x5a4>)
 800849e:	f7f7 fe65 	bl	800016c <__adddf3>
 80084a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084aa:	9611      	str	r6, [sp, #68]	; 0x44
 80084ac:	2c00      	cmp	r4, #0
 80084ae:	d15d      	bne.n	800856c <_dtoa_r+0x4ec>
 80084b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b4:	2200      	movs	r2, #0
 80084b6:	4b5c      	ldr	r3, [pc, #368]	; (8008628 <_dtoa_r+0x5a8>)
 80084b8:	f7f7 fe56 	bl	8000168 <__aeabi_dsub>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084c4:	4633      	mov	r3, r6
 80084c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c8:	f7f8 fa96 	bl	80009f8 <__aeabi_dcmpgt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f040 8295 	bne.w	80089fc <_dtoa_r+0x97c>
 80084d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084dc:	f7f8 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f040 8289 	bne.w	80089f8 <_dtoa_r+0x978>
 80084e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f2c0 8151 	blt.w	8008798 <_dtoa_r+0x718>
 80084f6:	f1bb 0f0e 	cmp.w	fp, #14
 80084fa:	f300 814d 	bgt.w	8008798 <_dtoa_r+0x718>
 80084fe:	4b45      	ldr	r3, [pc, #276]	; (8008614 <_dtoa_r+0x594>)
 8008500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008504:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008508:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800850c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800850e:	2b00      	cmp	r3, #0
 8008510:	f280 80da 	bge.w	80086c8 <_dtoa_r+0x648>
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f300 80d6 	bgt.w	80086c8 <_dtoa_r+0x648>
 800851c:	f040 826b 	bne.w	80089f6 <_dtoa_r+0x976>
 8008520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008524:	2200      	movs	r2, #0
 8008526:	4b40      	ldr	r3, [pc, #256]	; (8008628 <_dtoa_r+0x5a8>)
 8008528:	f7f7 ffd6 	bl	80004d8 <__aeabi_dmul>
 800852c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008530:	f7f8 fa58 	bl	80009e4 <__aeabi_dcmpge>
 8008534:	9c08      	ldr	r4, [sp, #32]
 8008536:	4626      	mov	r6, r4
 8008538:	2800      	cmp	r0, #0
 800853a:	f040 8241 	bne.w	80089c0 <_dtoa_r+0x940>
 800853e:	2331      	movs	r3, #49	; 0x31
 8008540:	9f03      	ldr	r7, [sp, #12]
 8008542:	f10b 0b01 	add.w	fp, fp, #1
 8008546:	f807 3b01 	strb.w	r3, [r7], #1
 800854a:	e23d      	b.n	80089c8 <_dtoa_r+0x948>
 800854c:	07e2      	lsls	r2, r4, #31
 800854e:	d505      	bpl.n	800855c <_dtoa_r+0x4dc>
 8008550:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008554:	f7f7 ffc0 	bl	80004d8 <__aeabi_dmul>
 8008558:	2301      	movs	r3, #1
 800855a:	3701      	adds	r7, #1
 800855c:	1064      	asrs	r4, r4, #1
 800855e:	3608      	adds	r6, #8
 8008560:	e76d      	b.n	800843e <_dtoa_r+0x3be>
 8008562:	2702      	movs	r7, #2
 8008564:	e770      	b.n	8008448 <_dtoa_r+0x3c8>
 8008566:	46d8      	mov	r8, fp
 8008568:	9c08      	ldr	r4, [sp, #32]
 800856a:	e78f      	b.n	800848c <_dtoa_r+0x40c>
 800856c:	9903      	ldr	r1, [sp, #12]
 800856e:	4b29      	ldr	r3, [pc, #164]	; (8008614 <_dtoa_r+0x594>)
 8008570:	4421      	add	r1, r4
 8008572:	9112      	str	r1, [sp, #72]	; 0x48
 8008574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008576:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800857a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800857e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008582:	2900      	cmp	r1, #0
 8008584:	d054      	beq.n	8008630 <_dtoa_r+0x5b0>
 8008586:	2000      	movs	r0, #0
 8008588:	4928      	ldr	r1, [pc, #160]	; (800862c <_dtoa_r+0x5ac>)
 800858a:	f7f8 f8cf 	bl	800072c <__aeabi_ddiv>
 800858e:	463b      	mov	r3, r7
 8008590:	4632      	mov	r2, r6
 8008592:	f7f7 fde9 	bl	8000168 <__aeabi_dsub>
 8008596:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800859a:	9f03      	ldr	r7, [sp, #12]
 800859c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a0:	f7f8 fa4a 	bl	8000a38 <__aeabi_d2iz>
 80085a4:	4604      	mov	r4, r0
 80085a6:	f7f7 ff2d 	bl	8000404 <__aeabi_i2d>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085b2:	f7f7 fdd9 	bl	8000168 <__aeabi_dsub>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	3430      	adds	r4, #48	; 0x30
 80085bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085c4:	f807 4b01 	strb.w	r4, [r7], #1
 80085c8:	f7f8 f9f8 	bl	80009bc <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d173      	bne.n	80086b8 <_dtoa_r+0x638>
 80085d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085d4:	2000      	movs	r0, #0
 80085d6:	4911      	ldr	r1, [pc, #68]	; (800861c <_dtoa_r+0x59c>)
 80085d8:	f7f7 fdc6 	bl	8000168 <__aeabi_dsub>
 80085dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085e0:	f7f8 f9ec 	bl	80009bc <__aeabi_dcmplt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f040 80b6 	bne.w	8008756 <_dtoa_r+0x6d6>
 80085ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ec:	429f      	cmp	r7, r3
 80085ee:	f43f af7a 	beq.w	80084e6 <_dtoa_r+0x466>
 80085f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085f6:	2200      	movs	r2, #0
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <_dtoa_r+0x5a0>)
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	2200      	movs	r2, #0
 8008600:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <_dtoa_r+0x5a0>)
 800860a:	f7f7 ff65 	bl	80004d8 <__aeabi_dmul>
 800860e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008612:	e7c3      	b.n	800859c <_dtoa_r+0x51c>
 8008614:	0800c740 	.word	0x0800c740
 8008618:	0800c718 	.word	0x0800c718
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	40240000 	.word	0x40240000
 8008624:	401c0000 	.word	0x401c0000
 8008628:	40140000 	.word	0x40140000
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f7 ff50 	bl	80004d8 <__aeabi_dmul>
 8008638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800863a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800863e:	9c03      	ldr	r4, [sp, #12]
 8008640:	9314      	str	r3, [sp, #80]	; 0x50
 8008642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008646:	f7f8 f9f7 	bl	8000a38 <__aeabi_d2iz>
 800864a:	9015      	str	r0, [sp, #84]	; 0x54
 800864c:	f7f7 feda 	bl	8000404 <__aeabi_i2d>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008658:	f7f7 fd86 	bl	8000168 <__aeabi_dsub>
 800865c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865e:	4606      	mov	r6, r0
 8008660:	3330      	adds	r3, #48	; 0x30
 8008662:	f804 3b01 	strb.w	r3, [r4], #1
 8008666:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008668:	460f      	mov	r7, r1
 800866a:	429c      	cmp	r4, r3
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	d124      	bne.n	80086bc <_dtoa_r+0x63c>
 8008672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008676:	4baf      	ldr	r3, [pc, #700]	; (8008934 <_dtoa_r+0x8b4>)
 8008678:	f7f7 fd78 	bl	800016c <__adddf3>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 f9b8 	bl	80009f8 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	d163      	bne.n	8008754 <_dtoa_r+0x6d4>
 800868c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008690:	2000      	movs	r0, #0
 8008692:	49a8      	ldr	r1, [pc, #672]	; (8008934 <_dtoa_r+0x8b4>)
 8008694:	f7f7 fd68 	bl	8000168 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f7f8 f98c 	bl	80009bc <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f af1e 	beq.w	80084e6 <_dtoa_r+0x466>
 80086aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086ac:	1e7b      	subs	r3, r7, #1
 80086ae:	9314      	str	r3, [sp, #80]	; 0x50
 80086b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80086b4:	2b30      	cmp	r3, #48	; 0x30
 80086b6:	d0f8      	beq.n	80086aa <_dtoa_r+0x62a>
 80086b8:	46c3      	mov	fp, r8
 80086ba:	e03b      	b.n	8008734 <_dtoa_r+0x6b4>
 80086bc:	4b9e      	ldr	r3, [pc, #632]	; (8008938 <_dtoa_r+0x8b8>)
 80086be:	f7f7 ff0b 	bl	80004d8 <__aeabi_dmul>
 80086c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c6:	e7bc      	b.n	8008642 <_dtoa_r+0x5c2>
 80086c8:	9f03      	ldr	r7, [sp, #12]
 80086ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80086ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f7f8 f829 	bl	800072c <__aeabi_ddiv>
 80086da:	f7f8 f9ad 	bl	8000a38 <__aeabi_d2iz>
 80086de:	4604      	mov	r4, r0
 80086e0:	f7f7 fe90 	bl	8000404 <__aeabi_i2d>
 80086e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086e8:	f7f7 fef6 	bl	80004d8 <__aeabi_dmul>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f7 fd38 	bl	8000168 <__aeabi_dsub>
 80086f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086fc:	f807 6b01 	strb.w	r6, [r7], #1
 8008700:	9e03      	ldr	r6, [sp, #12]
 8008702:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008706:	1bbe      	subs	r6, r7, r6
 8008708:	45b4      	cmp	ip, r6
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	d136      	bne.n	800877e <_dtoa_r+0x6fe>
 8008710:	f7f7 fd2c 	bl	800016c <__adddf3>
 8008714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008718:	4680      	mov	r8, r0
 800871a:	4689      	mov	r9, r1
 800871c:	f7f8 f96c 	bl	80009f8 <__aeabi_dcmpgt>
 8008720:	bb58      	cbnz	r0, 800877a <_dtoa_r+0x6fa>
 8008722:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 f93d 	bl	80009a8 <__aeabi_dcmpeq>
 800872e:	b108      	cbz	r0, 8008734 <_dtoa_r+0x6b4>
 8008730:	07e3      	lsls	r3, r4, #31
 8008732:	d422      	bmi.n	800877a <_dtoa_r+0x6fa>
 8008734:	4651      	mov	r1, sl
 8008736:	4628      	mov	r0, r5
 8008738:	f000 ff2e 	bl	8009598 <_Bfree>
 800873c:	2300      	movs	r3, #0
 800873e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008740:	703b      	strb	r3, [r7, #0]
 8008742:	f10b 0301 	add.w	r3, fp, #1
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800874a:	2b00      	cmp	r3, #0
 800874c:	f43f ace6 	beq.w	800811c <_dtoa_r+0x9c>
 8008750:	601f      	str	r7, [r3, #0]
 8008752:	e4e3      	b.n	800811c <_dtoa_r+0x9c>
 8008754:	4627      	mov	r7, r4
 8008756:	463b      	mov	r3, r7
 8008758:	461f      	mov	r7, r3
 800875a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800875e:	2a39      	cmp	r2, #57	; 0x39
 8008760:	d107      	bne.n	8008772 <_dtoa_r+0x6f2>
 8008762:	9a03      	ldr	r2, [sp, #12]
 8008764:	429a      	cmp	r2, r3
 8008766:	d1f7      	bne.n	8008758 <_dtoa_r+0x6d8>
 8008768:	2230      	movs	r2, #48	; 0x30
 800876a:	9903      	ldr	r1, [sp, #12]
 800876c:	f108 0801 	add.w	r8, r8, #1
 8008770:	700a      	strb	r2, [r1, #0]
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	3201      	adds	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]
 8008778:	e79e      	b.n	80086b8 <_dtoa_r+0x638>
 800877a:	46d8      	mov	r8, fp
 800877c:	e7eb      	b.n	8008756 <_dtoa_r+0x6d6>
 800877e:	2200      	movs	r2, #0
 8008780:	4b6d      	ldr	r3, [pc, #436]	; (8008938 <_dtoa_r+0x8b8>)
 8008782:	f7f7 fea9 	bl	80004d8 <__aeabi_dmul>
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4680      	mov	r8, r0
 800878c:	4689      	mov	r9, r1
 800878e:	f7f8 f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8008792:	2800      	cmp	r0, #0
 8008794:	d09b      	beq.n	80086ce <_dtoa_r+0x64e>
 8008796:	e7cd      	b.n	8008734 <_dtoa_r+0x6b4>
 8008798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800879a:	2a00      	cmp	r2, #0
 800879c:	f000 80c4 	beq.w	8008928 <_dtoa_r+0x8a8>
 80087a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087a2:	2a01      	cmp	r2, #1
 80087a4:	f300 80a8 	bgt.w	80088f8 <_dtoa_r+0x878>
 80087a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	f000 80a0 	beq.w	80088f0 <_dtoa_r+0x870>
 80087b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087b4:	464f      	mov	r7, r9
 80087b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ba:	2101      	movs	r1, #1
 80087bc:	441a      	add	r2, r3
 80087be:	4628      	mov	r0, r5
 80087c0:	4499      	add	r9, r3
 80087c2:	9209      	str	r2, [sp, #36]	; 0x24
 80087c4:	f000 ffe8 	bl	8009798 <__i2b>
 80087c8:	4606      	mov	r6, r0
 80087ca:	b15f      	cbz	r7, 80087e4 <_dtoa_r+0x764>
 80087cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd08      	ble.n	80087e4 <_dtoa_r+0x764>
 80087d2:	42bb      	cmp	r3, r7
 80087d4:	bfa8      	it	ge
 80087d6:	463b      	movge	r3, r7
 80087d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087da:	eba9 0903 	sub.w	r9, r9, r3
 80087de:	1aff      	subs	r7, r7, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e6:	b1f3      	cbz	r3, 8008826 <_dtoa_r+0x7a6>
 80087e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80a0 	beq.w	8008930 <_dtoa_r+0x8b0>
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	dd10      	ble.n	8008816 <_dtoa_r+0x796>
 80087f4:	4631      	mov	r1, r6
 80087f6:	4622      	mov	r2, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f001 f88b 	bl	8009914 <__pow5mult>
 80087fe:	4652      	mov	r2, sl
 8008800:	4601      	mov	r1, r0
 8008802:	4606      	mov	r6, r0
 8008804:	4628      	mov	r0, r5
 8008806:	f000 ffdd 	bl	80097c4 <__multiply>
 800880a:	4680      	mov	r8, r0
 800880c:	4651      	mov	r1, sl
 800880e:	4628      	mov	r0, r5
 8008810:	f000 fec2 	bl	8009598 <_Bfree>
 8008814:	46c2      	mov	sl, r8
 8008816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008818:	1b1a      	subs	r2, r3, r4
 800881a:	d004      	beq.n	8008826 <_dtoa_r+0x7a6>
 800881c:	4651      	mov	r1, sl
 800881e:	4628      	mov	r0, r5
 8008820:	f001 f878 	bl	8009914 <__pow5mult>
 8008824:	4682      	mov	sl, r0
 8008826:	2101      	movs	r1, #1
 8008828:	4628      	mov	r0, r5
 800882a:	f000 ffb5 	bl	8009798 <__i2b>
 800882e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008830:	4604      	mov	r4, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f340 8082 	ble.w	800893c <_dtoa_r+0x8bc>
 8008838:	461a      	mov	r2, r3
 800883a:	4601      	mov	r1, r0
 800883c:	4628      	mov	r0, r5
 800883e:	f001 f869 	bl	8009914 <__pow5mult>
 8008842:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008844:	4604      	mov	r4, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	dd7b      	ble.n	8008942 <_dtoa_r+0x8c2>
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008854:	6918      	ldr	r0, [r3, #16]
 8008856:	f000 ff51 	bl	80096fc <__hi0bits>
 800885a:	f1c0 0020 	rsb	r0, r0, #32
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	4418      	add	r0, r3
 8008862:	f010 001f 	ands.w	r0, r0, #31
 8008866:	f000 8092 	beq.w	800898e <_dtoa_r+0x90e>
 800886a:	f1c0 0320 	rsb	r3, r0, #32
 800886e:	2b04      	cmp	r3, #4
 8008870:	f340 8085 	ble.w	800897e <_dtoa_r+0x8fe>
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	f1c0 001c 	rsb	r0, r0, #28
 800887a:	4403      	add	r3, r0
 800887c:	4481      	add	r9, r0
 800887e:	4407      	add	r7, r0
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	dd05      	ble.n	8008894 <_dtoa_r+0x814>
 8008888:	4651      	mov	r1, sl
 800888a:	464a      	mov	r2, r9
 800888c:	4628      	mov	r0, r5
 800888e:	f001 f89b 	bl	80099c8 <__lshift>
 8008892:	4682      	mov	sl, r0
 8008894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	dd05      	ble.n	80088a6 <_dtoa_r+0x826>
 800889a:	4621      	mov	r1, r4
 800889c:	461a      	mov	r2, r3
 800889e:	4628      	mov	r0, r5
 80088a0:	f001 f892 	bl	80099c8 <__lshift>
 80088a4:	4604      	mov	r4, r0
 80088a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d072      	beq.n	8008992 <_dtoa_r+0x912>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4650      	mov	r0, sl
 80088b0:	f001 f8f6 	bl	8009aa0 <__mcmp>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	da6c      	bge.n	8008992 <_dtoa_r+0x912>
 80088b8:	2300      	movs	r3, #0
 80088ba:	4651      	mov	r1, sl
 80088bc:	220a      	movs	r2, #10
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 fe8c 	bl	80095dc <__multadd>
 80088c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c6:	4682      	mov	sl, r0
 80088c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 81ac 	beq.w	8008c2a <_dtoa_r+0xbaa>
 80088d2:	2300      	movs	r3, #0
 80088d4:	4631      	mov	r1, r6
 80088d6:	220a      	movs	r2, #10
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 fe7f 	bl	80095dc <__multadd>
 80088de:	9b06      	ldr	r3, [sp, #24]
 80088e0:	4606      	mov	r6, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f300 8093 	bgt.w	8008a0e <_dtoa_r+0x98e>
 80088e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	dc59      	bgt.n	80089a2 <_dtoa_r+0x922>
 80088ee:	e08e      	b.n	8008a0e <_dtoa_r+0x98e>
 80088f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088f6:	e75d      	b.n	80087b4 <_dtoa_r+0x734>
 80088f8:	9b08      	ldr	r3, [sp, #32]
 80088fa:	1e5c      	subs	r4, r3, #1
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	42a3      	cmp	r3, r4
 8008900:	bfbf      	itttt	lt
 8008902:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008904:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008906:	1ae3      	sublt	r3, r4, r3
 8008908:	18d2      	addlt	r2, r2, r3
 800890a:	bfa8      	it	ge
 800890c:	1b1c      	subge	r4, r3, r4
 800890e:	9b08      	ldr	r3, [sp, #32]
 8008910:	bfbe      	ittt	lt
 8008912:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008914:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008916:	2400      	movlt	r4, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfb5      	itete	lt
 800891c:	eba9 0703 	sublt.w	r7, r9, r3
 8008920:	464f      	movge	r7, r9
 8008922:	2300      	movlt	r3, #0
 8008924:	9b08      	ldrge	r3, [sp, #32]
 8008926:	e747      	b.n	80087b8 <_dtoa_r+0x738>
 8008928:	464f      	mov	r7, r9
 800892a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800892c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800892e:	e74c      	b.n	80087ca <_dtoa_r+0x74a>
 8008930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008932:	e773      	b.n	800881c <_dtoa_r+0x79c>
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	40240000 	.word	0x40240000
 800893c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800893e:	2b01      	cmp	r3, #1
 8008940:	dc18      	bgt.n	8008974 <_dtoa_r+0x8f4>
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	b9b3      	cbnz	r3, 8008974 <_dtoa_r+0x8f4>
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800894c:	b993      	cbnz	r3, 8008974 <_dtoa_r+0x8f4>
 800894e:	9b05      	ldr	r3, [sp, #20]
 8008950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008954:	0d1b      	lsrs	r3, r3, #20
 8008956:	051b      	lsls	r3, r3, #20
 8008958:	b17b      	cbz	r3, 800897a <_dtoa_r+0x8fa>
 800895a:	f04f 0801 	mov.w	r8, #1
 800895e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008960:	f109 0901 	add.w	r9, r9, #1
 8008964:	3301      	adds	r3, #1
 8008966:	9309      	str	r3, [sp, #36]	; 0x24
 8008968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800896a:	2b00      	cmp	r3, #0
 800896c:	f47f af6f 	bne.w	800884e <_dtoa_r+0x7ce>
 8008970:	2001      	movs	r0, #1
 8008972:	e774      	b.n	800885e <_dtoa_r+0x7de>
 8008974:	f04f 0800 	mov.w	r8, #0
 8008978:	e7f6      	b.n	8008968 <_dtoa_r+0x8e8>
 800897a:	4698      	mov	r8, r3
 800897c:	e7f4      	b.n	8008968 <_dtoa_r+0x8e8>
 800897e:	d080      	beq.n	8008882 <_dtoa_r+0x802>
 8008980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008982:	331c      	adds	r3, #28
 8008984:	441a      	add	r2, r3
 8008986:	4499      	add	r9, r3
 8008988:	441f      	add	r7, r3
 800898a:	9209      	str	r2, [sp, #36]	; 0x24
 800898c:	e779      	b.n	8008882 <_dtoa_r+0x802>
 800898e:	4603      	mov	r3, r0
 8008990:	e7f6      	b.n	8008980 <_dtoa_r+0x900>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dc34      	bgt.n	8008a02 <_dtoa_r+0x982>
 8008998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899a:	2b02      	cmp	r3, #2
 800899c:	dd31      	ble.n	8008a02 <_dtoa_r+0x982>
 800899e:	9b08      	ldr	r3, [sp, #32]
 80089a0:	9306      	str	r3, [sp, #24]
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	b963      	cbnz	r3, 80089c0 <_dtoa_r+0x940>
 80089a6:	4621      	mov	r1, r4
 80089a8:	2205      	movs	r2, #5
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 fe16 	bl	80095dc <__multadd>
 80089b0:	4601      	mov	r1, r0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4650      	mov	r0, sl
 80089b6:	f001 f873 	bl	8009aa0 <__mcmp>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f73f adbf 	bgt.w	800853e <_dtoa_r+0x4be>
 80089c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089c2:	9f03      	ldr	r7, [sp, #12]
 80089c4:	ea6f 0b03 	mvn.w	fp, r3
 80089c8:	f04f 0800 	mov.w	r8, #0
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 fde2 	bl	8009598 <_Bfree>
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	f43f aead 	beq.w	8008734 <_dtoa_r+0x6b4>
 80089da:	f1b8 0f00 	cmp.w	r8, #0
 80089de:	d005      	beq.n	80089ec <_dtoa_r+0x96c>
 80089e0:	45b0      	cmp	r8, r6
 80089e2:	d003      	beq.n	80089ec <_dtoa_r+0x96c>
 80089e4:	4641      	mov	r1, r8
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 fdd6 	bl	8009598 <_Bfree>
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 fdd2 	bl	8009598 <_Bfree>
 80089f4:	e69e      	b.n	8008734 <_dtoa_r+0x6b4>
 80089f6:	2400      	movs	r4, #0
 80089f8:	4626      	mov	r6, r4
 80089fa:	e7e1      	b.n	80089c0 <_dtoa_r+0x940>
 80089fc:	46c3      	mov	fp, r8
 80089fe:	4626      	mov	r6, r4
 8008a00:	e59d      	b.n	800853e <_dtoa_r+0x4be>
 8008a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80c8 	beq.w	8008b9a <_dtoa_r+0xb1a>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	9306      	str	r3, [sp, #24]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	dd05      	ble.n	8008a1e <_dtoa_r+0x99e>
 8008a12:	4631      	mov	r1, r6
 8008a14:	463a      	mov	r2, r7
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 ffd6 	bl	80099c8 <__lshift>
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	f1b8 0f00 	cmp.w	r8, #0
 8008a22:	d05b      	beq.n	8008adc <_dtoa_r+0xa5c>
 8008a24:	4628      	mov	r0, r5
 8008a26:	6871      	ldr	r1, [r6, #4]
 8008a28:	f000 fd76 	bl	8009518 <_Balloc>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	b928      	cbnz	r0, 8008a3c <_dtoa_r+0x9bc>
 8008a30:	4602      	mov	r2, r0
 8008a32:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a36:	4b81      	ldr	r3, [pc, #516]	; (8008c3c <_dtoa_r+0xbbc>)
 8008a38:	f7ff bb36 	b.w	80080a8 <_dtoa_r+0x28>
 8008a3c:	6932      	ldr	r2, [r6, #16]
 8008a3e:	f106 010c 	add.w	r1, r6, #12
 8008a42:	3202      	adds	r2, #2
 8008a44:	0092      	lsls	r2, r2, #2
 8008a46:	300c      	adds	r0, #12
 8008a48:	f7ff fa75 	bl	8007f36 <memcpy>
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 ffb9 	bl	80099c8 <__lshift>
 8008a56:	46b0      	mov	r8, r6
 8008a58:	4606      	mov	r6, r0
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	9a03      	ldr	r2, [sp, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9b06      	ldr	r3, [sp, #24]
 8008a64:	4413      	add	r3, r2
 8008a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	4621      	mov	r1, r4
 8008a74:	3b01      	subs	r3, #1
 8008a76:	4650      	mov	r0, sl
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	f7ff fa75 	bl	8007f68 <quorem>
 8008a7e:	4641      	mov	r1, r8
 8008a80:	9006      	str	r0, [sp, #24]
 8008a82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a86:	4650      	mov	r0, sl
 8008a88:	f001 f80a 	bl	8009aa0 <__mcmp>
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	9009      	str	r0, [sp, #36]	; 0x24
 8008a90:	4621      	mov	r1, r4
 8008a92:	4628      	mov	r0, r5
 8008a94:	f001 f820 	bl	8009ad8 <__mdiff>
 8008a98:	68c2      	ldr	r2, [r0, #12]
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	bb02      	cbnz	r2, 8008ae0 <_dtoa_r+0xa60>
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	f000 fffd 	bl	8009aa0 <__mcmp>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	4628      	mov	r0, r5
 8008aac:	920c      	str	r2, [sp, #48]	; 0x30
 8008aae:	f000 fd73 	bl	8009598 <_Bfree>
 8008ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab6:	9f08      	ldr	r7, [sp, #32]
 8008ab8:	ea43 0102 	orr.w	r1, r3, r2
 8008abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abe:	4319      	orrs	r1, r3
 8008ac0:	d110      	bne.n	8008ae4 <_dtoa_r+0xa64>
 8008ac2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ac6:	d029      	beq.n	8008b1c <_dtoa_r+0xa9c>
 8008ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	dd02      	ble.n	8008ad4 <_dtoa_r+0xa54>
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	f883 9000 	strb.w	r9, [r3]
 8008ada:	e777      	b.n	80089cc <_dtoa_r+0x94c>
 8008adc:	4630      	mov	r0, r6
 8008ade:	e7ba      	b.n	8008a56 <_dtoa_r+0x9d6>
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	e7e1      	b.n	8008aa8 <_dtoa_r+0xa28>
 8008ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	db04      	blt.n	8008af4 <_dtoa_r+0xa74>
 8008aea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008aec:	430b      	orrs	r3, r1
 8008aee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008af0:	430b      	orrs	r3, r1
 8008af2:	d120      	bne.n	8008b36 <_dtoa_r+0xab6>
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	dded      	ble.n	8008ad4 <_dtoa_r+0xa54>
 8008af8:	4651      	mov	r1, sl
 8008afa:	2201      	movs	r2, #1
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 ff63 	bl	80099c8 <__lshift>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4682      	mov	sl, r0
 8008b06:	f000 ffcb 	bl	8009aa0 <__mcmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	dc03      	bgt.n	8008b16 <_dtoa_r+0xa96>
 8008b0e:	d1e1      	bne.n	8008ad4 <_dtoa_r+0xa54>
 8008b10:	f019 0f01 	tst.w	r9, #1
 8008b14:	d0de      	beq.n	8008ad4 <_dtoa_r+0xa54>
 8008b16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b1a:	d1d8      	bne.n	8008ace <_dtoa_r+0xa4e>
 8008b1c:	2339      	movs	r3, #57	; 0x39
 8008b1e:	9a04      	ldr	r2, [sp, #16]
 8008b20:	7013      	strb	r3, [r2, #0]
 8008b22:	463b      	mov	r3, r7
 8008b24:	461f      	mov	r7, r3
 8008b26:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	2a39      	cmp	r2, #57	; 0x39
 8008b2e:	d06b      	beq.n	8008c08 <_dtoa_r+0xb88>
 8008b30:	3201      	adds	r2, #1
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	e74a      	b.n	80089cc <_dtoa_r+0x94c>
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	dd07      	ble.n	8008b4a <_dtoa_r+0xaca>
 8008b3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b3e:	d0ed      	beq.n	8008b1c <_dtoa_r+0xa9c>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	f109 0301 	add.w	r3, r9, #1
 8008b46:	7013      	strb	r3, [r2, #0]
 8008b48:	e740      	b.n	80089cc <_dtoa_r+0x94c>
 8008b4a:	9b08      	ldr	r3, [sp, #32]
 8008b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b4e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d042      	beq.n	8008bdc <_dtoa_r+0xb5c>
 8008b56:	4651      	mov	r1, sl
 8008b58:	2300      	movs	r3, #0
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fd3d 	bl	80095dc <__multadd>
 8008b62:	45b0      	cmp	r8, r6
 8008b64:	4682      	mov	sl, r0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	f04f 020a 	mov.w	r2, #10
 8008b6e:	4641      	mov	r1, r8
 8008b70:	4628      	mov	r0, r5
 8008b72:	d107      	bne.n	8008b84 <_dtoa_r+0xb04>
 8008b74:	f000 fd32 	bl	80095dc <__multadd>
 8008b78:	4680      	mov	r8, r0
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	9b08      	ldr	r3, [sp, #32]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	e775      	b.n	8008a70 <_dtoa_r+0x9f0>
 8008b84:	f000 fd2a 	bl	80095dc <__multadd>
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	220a      	movs	r2, #10
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 fd23 	bl	80095dc <__multadd>
 8008b96:	4606      	mov	r6, r0
 8008b98:	e7f0      	b.n	8008b7c <_dtoa_r+0xafc>
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	9306      	str	r3, [sp, #24]
 8008b9e:	9f03      	ldr	r7, [sp, #12]
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f7ff f9e0 	bl	8007f68 <quorem>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bae:	f807 9b01 	strb.w	r9, [r7], #1
 8008bb2:	1afa      	subs	r2, r7, r3
 8008bb4:	9b06      	ldr	r3, [sp, #24]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	dd07      	ble.n	8008bca <_dtoa_r+0xb4a>
 8008bba:	4651      	mov	r1, sl
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	220a      	movs	r2, #10
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fd0b 	bl	80095dc <__multadd>
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	e7ea      	b.n	8008ba0 <_dtoa_r+0xb20>
 8008bca:	9b06      	ldr	r3, [sp, #24]
 8008bcc:	f04f 0800 	mov.w	r8, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bfcc      	ite	gt
 8008bd4:	461f      	movgt	r7, r3
 8008bd6:	2701      	movle	r7, #1
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	441f      	add	r7, r3
 8008bdc:	4651      	mov	r1, sl
 8008bde:	2201      	movs	r2, #1
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 fef1 	bl	80099c8 <__lshift>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4682      	mov	sl, r0
 8008bea:	f000 ff59 	bl	8009aa0 <__mcmp>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	dc97      	bgt.n	8008b22 <_dtoa_r+0xaa2>
 8008bf2:	d102      	bne.n	8008bfa <_dtoa_r+0xb7a>
 8008bf4:	f019 0f01 	tst.w	r9, #1
 8008bf8:	d193      	bne.n	8008b22 <_dtoa_r+0xaa2>
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	461f      	mov	r7, r3
 8008bfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c02:	2a30      	cmp	r2, #48	; 0x30
 8008c04:	d0fa      	beq.n	8008bfc <_dtoa_r+0xb7c>
 8008c06:	e6e1      	b.n	80089cc <_dtoa_r+0x94c>
 8008c08:	9a03      	ldr	r2, [sp, #12]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d18a      	bne.n	8008b24 <_dtoa_r+0xaa4>
 8008c0e:	2331      	movs	r3, #49	; 0x31
 8008c10:	f10b 0b01 	add.w	fp, fp, #1
 8008c14:	e797      	b.n	8008b46 <_dtoa_r+0xac6>
 8008c16:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <_dtoa_r+0xbc0>)
 8008c18:	f7ff ba9f 	b.w	800815a <_dtoa_r+0xda>
 8008c1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f47f aa77 	bne.w	8008112 <_dtoa_r+0x92>
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <_dtoa_r+0xbc4>)
 8008c26:	f7ff ba98 	b.w	800815a <_dtoa_r+0xda>
 8008c2a:	9b06      	ldr	r3, [sp, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dcb6      	bgt.n	8008b9e <_dtoa_r+0xb1e>
 8008c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f73f aeb5 	bgt.w	80089a2 <_dtoa_r+0x922>
 8008c38:	e7b1      	b.n	8008b9e <_dtoa_r+0xb1e>
 8008c3a:	bf00      	nop
 8008c3c:	0800c64d 	.word	0x0800c64d
 8008c40:	0800c5a0 	.word	0x0800c5a0
 8008c44:	0800c5d1 	.word	0x0800c5d1

08008c48 <_free_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d040      	beq.n	8008cd2 <_free_r+0x8a>
 8008c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c54:	1f0c      	subs	r4, r1, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfb8      	it	lt
 8008c5a:	18e4      	addlt	r4, r4, r3
 8008c5c:	f000 fc50 	bl	8009500 <__malloc_lock>
 8008c60:	4a1c      	ldr	r2, [pc, #112]	; (8008cd4 <_free_r+0x8c>)
 8008c62:	6813      	ldr	r3, [r2, #0]
 8008c64:	b933      	cbnz	r3, 8008c74 <_free_r+0x2c>
 8008c66:	6063      	str	r3, [r4, #4]
 8008c68:	6014      	str	r4, [r2, #0]
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c70:	f000 bc4c 	b.w	800950c <__malloc_unlock>
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	d908      	bls.n	8008c8a <_free_r+0x42>
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	1821      	adds	r1, r4, r0
 8008c7c:	428b      	cmp	r3, r1
 8008c7e:	bf01      	itttt	eq
 8008c80:	6819      	ldreq	r1, [r3, #0]
 8008c82:	685b      	ldreq	r3, [r3, #4]
 8008c84:	1809      	addeq	r1, r1, r0
 8008c86:	6021      	streq	r1, [r4, #0]
 8008c88:	e7ed      	b.n	8008c66 <_free_r+0x1e>
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	b10b      	cbz	r3, 8008c94 <_free_r+0x4c>
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d9fa      	bls.n	8008c8a <_free_r+0x42>
 8008c94:	6811      	ldr	r1, [r2, #0]
 8008c96:	1850      	adds	r0, r2, r1
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d10b      	bne.n	8008cb4 <_free_r+0x6c>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	4401      	add	r1, r0
 8008ca0:	1850      	adds	r0, r2, r1
 8008ca2:	4283      	cmp	r3, r0
 8008ca4:	6011      	str	r1, [r2, #0]
 8008ca6:	d1e0      	bne.n	8008c6a <_free_r+0x22>
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4408      	add	r0, r1
 8008cae:	6010      	str	r0, [r2, #0]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	e7da      	b.n	8008c6a <_free_r+0x22>
 8008cb4:	d902      	bls.n	8008cbc <_free_r+0x74>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	e7d6      	b.n	8008c6a <_free_r+0x22>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	1821      	adds	r1, r4, r0
 8008cc0:	428b      	cmp	r3, r1
 8008cc2:	bf01      	itttt	eq
 8008cc4:	6819      	ldreq	r1, [r3, #0]
 8008cc6:	685b      	ldreq	r3, [r3, #4]
 8008cc8:	1809      	addeq	r1, r1, r0
 8008cca:	6021      	streq	r1, [r4, #0]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	6054      	str	r4, [r2, #4]
 8008cd0:	e7cb      	b.n	8008c6a <_free_r+0x22>
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000944 	.word	0x20000944

08008cd8 <rshift>:
 8008cd8:	6903      	ldr	r3, [r0, #16]
 8008cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ce2:	f100 0414 	add.w	r4, r0, #20
 8008ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cea:	dd46      	ble.n	8008d7a <rshift+0xa2>
 8008cec:	f011 011f 	ands.w	r1, r1, #31
 8008cf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cf8:	d10c      	bne.n	8008d14 <rshift+0x3c>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f100 0710 	add.w	r7, r0, #16
 8008d00:	42b1      	cmp	r1, r6
 8008d02:	d335      	bcc.n	8008d70 <rshift+0x98>
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	1eea      	subs	r2, r5, #3
 8008d0a:	4296      	cmp	r6, r2
 8008d0c:	bf38      	it	cc
 8008d0e:	2300      	movcc	r3, #0
 8008d10:	4423      	add	r3, r4
 8008d12:	e015      	b.n	8008d40 <rshift+0x68>
 8008d14:	46a1      	mov	r9, r4
 8008d16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d1a:	f1c1 0820 	rsb	r8, r1, #32
 8008d1e:	40cf      	lsrs	r7, r1
 8008d20:	f105 0e04 	add.w	lr, r5, #4
 8008d24:	4576      	cmp	r6, lr
 8008d26:	46f4      	mov	ip, lr
 8008d28:	d816      	bhi.n	8008d58 <rshift+0x80>
 8008d2a:	1a9a      	subs	r2, r3, r2
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	3a04      	subs	r2, #4
 8008d30:	3501      	adds	r5, #1
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	bf38      	it	cc
 8008d36:	2200      	movcc	r2, #0
 8008d38:	18a3      	adds	r3, r4, r2
 8008d3a:	50a7      	str	r7, [r4, r2]
 8008d3c:	b107      	cbz	r7, 8008d40 <rshift+0x68>
 8008d3e:	3304      	adds	r3, #4
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	eba3 0204 	sub.w	r2, r3, r4
 8008d46:	bf08      	it	eq
 8008d48:	2300      	moveq	r3, #0
 8008d4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d4e:	6102      	str	r2, [r0, #16]
 8008d50:	bf08      	it	eq
 8008d52:	6143      	streq	r3, [r0, #20]
 8008d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d58:	f8dc c000 	ldr.w	ip, [ip]
 8008d5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d60:	ea4c 0707 	orr.w	r7, ip, r7
 8008d64:	f849 7b04 	str.w	r7, [r9], #4
 8008d68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d6c:	40cf      	lsrs	r7, r1
 8008d6e:	e7d9      	b.n	8008d24 <rshift+0x4c>
 8008d70:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d74:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d78:	e7c2      	b.n	8008d00 <rshift+0x28>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	e7e0      	b.n	8008d40 <rshift+0x68>

08008d7e <__hexdig_fun>:
 8008d7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d802      	bhi.n	8008d8c <__hexdig_fun+0xe>
 8008d86:	3820      	subs	r0, #32
 8008d88:	b2c0      	uxtb	r0, r0
 8008d8a:	4770      	bx	lr
 8008d8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d801      	bhi.n	8008d98 <__hexdig_fun+0x1a>
 8008d94:	3847      	subs	r0, #71	; 0x47
 8008d96:	e7f7      	b.n	8008d88 <__hexdig_fun+0xa>
 8008d98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d801      	bhi.n	8008da4 <__hexdig_fun+0x26>
 8008da0:	3827      	subs	r0, #39	; 0x27
 8008da2:	e7f1      	b.n	8008d88 <__hexdig_fun+0xa>
 8008da4:	2000      	movs	r0, #0
 8008da6:	4770      	bx	lr

08008da8 <__gethex>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4681      	mov	r9, r0
 8008dae:	468a      	mov	sl, r1
 8008db0:	4617      	mov	r7, r2
 8008db2:	680a      	ldr	r2, [r1, #0]
 8008db4:	b085      	sub	sp, #20
 8008db6:	f102 0b02 	add.w	fp, r2, #2
 8008dba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	32fe      	adds	r2, #254	; 0xfe
 8008dc6:	eb02 030b 	add.w	r3, r2, fp
 8008dca:	46d8      	mov	r8, fp
 8008dcc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	2830      	cmp	r0, #48	; 0x30
 8008dd4:	d0f7      	beq.n	8008dc6 <__gethex+0x1e>
 8008dd6:	f7ff ffd2 	bl	8008d7e <__hexdig_fun>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d138      	bne.n	8008e52 <__gethex+0xaa>
 8008de0:	2201      	movs	r2, #1
 8008de2:	4640      	mov	r0, r8
 8008de4:	49a7      	ldr	r1, [pc, #668]	; (8009084 <__gethex+0x2dc>)
 8008de6:	f7fe ffe5 	bl	8007db4 <strncmp>
 8008dea:	4606      	mov	r6, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d169      	bne.n	8008ec4 <__gethex+0x11c>
 8008df0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008df4:	465d      	mov	r5, fp
 8008df6:	f7ff ffc2 	bl	8008d7e <__hexdig_fun>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d064      	beq.n	8008ec8 <__gethex+0x120>
 8008dfe:	465a      	mov	r2, fp
 8008e00:	7810      	ldrb	r0, [r2, #0]
 8008e02:	4690      	mov	r8, r2
 8008e04:	2830      	cmp	r0, #48	; 0x30
 8008e06:	f102 0201 	add.w	r2, r2, #1
 8008e0a:	d0f9      	beq.n	8008e00 <__gethex+0x58>
 8008e0c:	f7ff ffb7 	bl	8008d7e <__hexdig_fun>
 8008e10:	2301      	movs	r3, #1
 8008e12:	fab0 f480 	clz	r4, r0
 8008e16:	465e      	mov	r6, fp
 8008e18:	0964      	lsrs	r4, r4, #5
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4615      	mov	r5, r2
 8008e20:	7828      	ldrb	r0, [r5, #0]
 8008e22:	3201      	adds	r2, #1
 8008e24:	f7ff ffab 	bl	8008d7e <__hexdig_fun>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d1f8      	bne.n	8008e1e <__gethex+0x76>
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	4628      	mov	r0, r5
 8008e30:	4994      	ldr	r1, [pc, #592]	; (8009084 <__gethex+0x2dc>)
 8008e32:	f7fe ffbf 	bl	8007db4 <strncmp>
 8008e36:	b978      	cbnz	r0, 8008e58 <__gethex+0xb0>
 8008e38:	b946      	cbnz	r6, 8008e4c <__gethex+0xa4>
 8008e3a:	1c6e      	adds	r6, r5, #1
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4615      	mov	r5, r2
 8008e40:	7828      	ldrb	r0, [r5, #0]
 8008e42:	3201      	adds	r2, #1
 8008e44:	f7ff ff9b 	bl	8008d7e <__hexdig_fun>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1f8      	bne.n	8008e3e <__gethex+0x96>
 8008e4c:	1b73      	subs	r3, r6, r5
 8008e4e:	009e      	lsls	r6, r3, #2
 8008e50:	e004      	b.n	8008e5c <__gethex+0xb4>
 8008e52:	2400      	movs	r4, #0
 8008e54:	4626      	mov	r6, r4
 8008e56:	e7e1      	b.n	8008e1c <__gethex+0x74>
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	d1f7      	bne.n	8008e4c <__gethex+0xa4>
 8008e5c:	782b      	ldrb	r3, [r5, #0]
 8008e5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e62:	2b50      	cmp	r3, #80	; 0x50
 8008e64:	d13d      	bne.n	8008ee2 <__gethex+0x13a>
 8008e66:	786b      	ldrb	r3, [r5, #1]
 8008e68:	2b2b      	cmp	r3, #43	; 0x2b
 8008e6a:	d02f      	beq.n	8008ecc <__gethex+0x124>
 8008e6c:	2b2d      	cmp	r3, #45	; 0x2d
 8008e6e:	d031      	beq.n	8008ed4 <__gethex+0x12c>
 8008e70:	f04f 0b00 	mov.w	fp, #0
 8008e74:	1c69      	adds	r1, r5, #1
 8008e76:	7808      	ldrb	r0, [r1, #0]
 8008e78:	f7ff ff81 	bl	8008d7e <__hexdig_fun>
 8008e7c:	1e42      	subs	r2, r0, #1
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	2a18      	cmp	r2, #24
 8008e82:	d82e      	bhi.n	8008ee2 <__gethex+0x13a>
 8008e84:	f1a0 0210 	sub.w	r2, r0, #16
 8008e88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e8c:	f7ff ff77 	bl	8008d7e <__hexdig_fun>
 8008e90:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e94:	fa5f fc8c 	uxtb.w	ip, ip
 8008e98:	f1bc 0f18 	cmp.w	ip, #24
 8008e9c:	d91d      	bls.n	8008eda <__gethex+0x132>
 8008e9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ea2:	d000      	beq.n	8008ea6 <__gethex+0xfe>
 8008ea4:	4252      	negs	r2, r2
 8008ea6:	4416      	add	r6, r2
 8008ea8:	f8ca 1000 	str.w	r1, [sl]
 8008eac:	b1dc      	cbz	r4, 8008ee6 <__gethex+0x13e>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	f04f 0800 	movne.w	r8, #0
 8008eb8:	f04f 0806 	moveq.w	r8, #6
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	b005      	add	sp, #20
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4645      	mov	r5, r8
 8008ec6:	4626      	mov	r6, r4
 8008ec8:	2401      	movs	r4, #1
 8008eca:	e7c7      	b.n	8008e5c <__gethex+0xb4>
 8008ecc:	f04f 0b00 	mov.w	fp, #0
 8008ed0:	1ca9      	adds	r1, r5, #2
 8008ed2:	e7d0      	b.n	8008e76 <__gethex+0xce>
 8008ed4:	f04f 0b01 	mov.w	fp, #1
 8008ed8:	e7fa      	b.n	8008ed0 <__gethex+0x128>
 8008eda:	230a      	movs	r3, #10
 8008edc:	fb03 0002 	mla	r0, r3, r2, r0
 8008ee0:	e7d0      	b.n	8008e84 <__gethex+0xdc>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	e7e0      	b.n	8008ea8 <__gethex+0x100>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	eba5 0308 	sub.w	r3, r5, r8
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b07      	cmp	r3, #7
 8008ef0:	dc0a      	bgt.n	8008f08 <__gethex+0x160>
 8008ef2:	4648      	mov	r0, r9
 8008ef4:	f000 fb10 	bl	8009518 <_Balloc>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	b940      	cbnz	r0, 8008f0e <__gethex+0x166>
 8008efc:	4602      	mov	r2, r0
 8008efe:	21e4      	movs	r1, #228	; 0xe4
 8008f00:	4b61      	ldr	r3, [pc, #388]	; (8009088 <__gethex+0x2e0>)
 8008f02:	4862      	ldr	r0, [pc, #392]	; (800908c <__gethex+0x2e4>)
 8008f04:	f001 fa5e 	bl	800a3c4 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	105b      	asrs	r3, r3, #1
 8008f0c:	e7ef      	b.n	8008eee <__gethex+0x146>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	469b      	mov	fp, r3
 8008f12:	f100 0a14 	add.w	sl, r0, #20
 8008f16:	f8cd a004 	str.w	sl, [sp, #4]
 8008f1a:	45a8      	cmp	r8, r5
 8008f1c:	d344      	bcc.n	8008fa8 <__gethex+0x200>
 8008f1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f22:	4658      	mov	r0, fp
 8008f24:	f848 bb04 	str.w	fp, [r8], #4
 8008f28:	eba8 080a 	sub.w	r8, r8, sl
 8008f2c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008f30:	6122      	str	r2, [r4, #16]
 8008f32:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008f36:	f000 fbe1 	bl	80096fc <__hi0bits>
 8008f3a:	683d      	ldr	r5, [r7, #0]
 8008f3c:	eba8 0800 	sub.w	r8, r8, r0
 8008f40:	45a8      	cmp	r8, r5
 8008f42:	dd59      	ble.n	8008ff8 <__gethex+0x250>
 8008f44:	eba8 0805 	sub.w	r8, r8, r5
 8008f48:	4641      	mov	r1, r8
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 ff5f 	bl	8009e0e <__any_on>
 8008f50:	4683      	mov	fp, r0
 8008f52:	b1b8      	cbz	r0, 8008f84 <__gethex+0x1dc>
 8008f54:	f04f 0b01 	mov.w	fp, #1
 8008f58:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f5c:	1159      	asrs	r1, r3, #5
 8008f5e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f62:	f003 021f 	and.w	r2, r3, #31
 8008f66:	fa0b f202 	lsl.w	r2, fp, r2
 8008f6a:	420a      	tst	r2, r1
 8008f6c:	d00a      	beq.n	8008f84 <__gethex+0x1dc>
 8008f6e:	455b      	cmp	r3, fp
 8008f70:	dd06      	ble.n	8008f80 <__gethex+0x1d8>
 8008f72:	4620      	mov	r0, r4
 8008f74:	f1a8 0102 	sub.w	r1, r8, #2
 8008f78:	f000 ff49 	bl	8009e0e <__any_on>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d138      	bne.n	8008ff2 <__gethex+0x24a>
 8008f80:	f04f 0b02 	mov.w	fp, #2
 8008f84:	4641      	mov	r1, r8
 8008f86:	4620      	mov	r0, r4
 8008f88:	f7ff fea6 	bl	8008cd8 <rshift>
 8008f8c:	4446      	add	r6, r8
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	42b3      	cmp	r3, r6
 8008f92:	da41      	bge.n	8009018 <__gethex+0x270>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4648      	mov	r0, r9
 8008f98:	f000 fafe 	bl	8009598 <_Bfree>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fa0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	e789      	b.n	8008ebc <__gethex+0x114>
 8008fa8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008fac:	2a2e      	cmp	r2, #46	; 0x2e
 8008fae:	d014      	beq.n	8008fda <__gethex+0x232>
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d106      	bne.n	8008fc2 <__gethex+0x21a>
 8008fb4:	9b01      	ldr	r3, [sp, #4]
 8008fb6:	f843 bb04 	str.w	fp, [r3], #4
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	465b      	mov	r3, fp
 8008fc2:	7828      	ldrb	r0, [r5, #0]
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	f7ff feda 	bl	8008d7e <__hexdig_fun>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	f000 000f 	and.w	r0, r0, #15
 8008fd0:	4098      	lsls	r0, r3
 8008fd2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	e79f      	b.n	8008f1a <__gethex+0x172>
 8008fda:	45a8      	cmp	r8, r5
 8008fdc:	d8e8      	bhi.n	8008fb0 <__gethex+0x208>
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	4928      	ldr	r1, [pc, #160]	; (8009084 <__gethex+0x2dc>)
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	f7fe fee5 	bl	8007db4 <strncmp>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1df      	bne.n	8008fb0 <__gethex+0x208>
 8008ff0:	e793      	b.n	8008f1a <__gethex+0x172>
 8008ff2:	f04f 0b03 	mov.w	fp, #3
 8008ff6:	e7c5      	b.n	8008f84 <__gethex+0x1dc>
 8008ff8:	da0b      	bge.n	8009012 <__gethex+0x26a>
 8008ffa:	eba5 0808 	sub.w	r8, r5, r8
 8008ffe:	4621      	mov	r1, r4
 8009000:	4642      	mov	r2, r8
 8009002:	4648      	mov	r0, r9
 8009004:	f000 fce0 	bl	80099c8 <__lshift>
 8009008:	4604      	mov	r4, r0
 800900a:	eba6 0608 	sub.w	r6, r6, r8
 800900e:	f100 0a14 	add.w	sl, r0, #20
 8009012:	f04f 0b00 	mov.w	fp, #0
 8009016:	e7ba      	b.n	8008f8e <__gethex+0x1e6>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	42b3      	cmp	r3, r6
 800901c:	dd74      	ble.n	8009108 <__gethex+0x360>
 800901e:	1b9e      	subs	r6, r3, r6
 8009020:	42b5      	cmp	r5, r6
 8009022:	dc35      	bgt.n	8009090 <__gethex+0x2e8>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d023      	beq.n	8009072 <__gethex+0x2ca>
 800902a:	2b03      	cmp	r3, #3
 800902c:	d025      	beq.n	800907a <__gethex+0x2d2>
 800902e:	2b01      	cmp	r3, #1
 8009030:	d115      	bne.n	800905e <__gethex+0x2b6>
 8009032:	42b5      	cmp	r5, r6
 8009034:	d113      	bne.n	800905e <__gethex+0x2b6>
 8009036:	2d01      	cmp	r5, #1
 8009038:	d10b      	bne.n	8009052 <__gethex+0x2aa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	9a02      	ldr	r2, [sp, #8]
 800903e:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	2301      	movs	r3, #1
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	f8ca 3000 	str.w	r3, [sl]
 800904c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904e:	601c      	str	r4, [r3, #0]
 8009050:	e734      	b.n	8008ebc <__gethex+0x114>
 8009052:	4620      	mov	r0, r4
 8009054:	1e69      	subs	r1, r5, #1
 8009056:	f000 feda 	bl	8009e0e <__any_on>
 800905a:	2800      	cmp	r0, #0
 800905c:	d1ed      	bne.n	800903a <__gethex+0x292>
 800905e:	4621      	mov	r1, r4
 8009060:	4648      	mov	r0, r9
 8009062:	f000 fa99 	bl	8009598 <_Bfree>
 8009066:	2300      	movs	r3, #0
 8009068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800906a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	e724      	b.n	8008ebc <__gethex+0x114>
 8009072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f2      	bne.n	800905e <__gethex+0x2b6>
 8009078:	e7df      	b.n	800903a <__gethex+0x292>
 800907a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1dc      	bne.n	800903a <__gethex+0x292>
 8009080:	e7ed      	b.n	800905e <__gethex+0x2b6>
 8009082:	bf00      	nop
 8009084:	0800c53a 	.word	0x0800c53a
 8009088:	0800c64d 	.word	0x0800c64d
 800908c:	0800c65e 	.word	0x0800c65e
 8009090:	f106 38ff 	add.w	r8, r6, #4294967295
 8009094:	f1bb 0f00 	cmp.w	fp, #0
 8009098:	d133      	bne.n	8009102 <__gethex+0x35a>
 800909a:	f1b8 0f00 	cmp.w	r8, #0
 800909e:	d004      	beq.n	80090aa <__gethex+0x302>
 80090a0:	4641      	mov	r1, r8
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 feb3 	bl	8009e0e <__any_on>
 80090a8:	4683      	mov	fp, r0
 80090aa:	2301      	movs	r3, #1
 80090ac:	ea4f 1268 	mov.w	r2, r8, asr #5
 80090b0:	f008 081f 	and.w	r8, r8, #31
 80090b4:	fa03 f308 	lsl.w	r3, r3, r8
 80090b8:	f04f 0802 	mov.w	r8, #2
 80090bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80090c0:	4631      	mov	r1, r6
 80090c2:	4213      	tst	r3, r2
 80090c4:	4620      	mov	r0, r4
 80090c6:	bf18      	it	ne
 80090c8:	f04b 0b02 	orrne.w	fp, fp, #2
 80090cc:	1bad      	subs	r5, r5, r6
 80090ce:	f7ff fe03 	bl	8008cd8 <rshift>
 80090d2:	687e      	ldr	r6, [r7, #4]
 80090d4:	f1bb 0f00 	cmp.w	fp, #0
 80090d8:	d04a      	beq.n	8009170 <__gethex+0x3c8>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d016      	beq.n	800910e <__gethex+0x366>
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d018      	beq.n	8009116 <__gethex+0x36e>
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d109      	bne.n	80090fc <__gethex+0x354>
 80090e8:	f01b 0f02 	tst.w	fp, #2
 80090ec:	d006      	beq.n	80090fc <__gethex+0x354>
 80090ee:	f8da 3000 	ldr.w	r3, [sl]
 80090f2:	ea4b 0b03 	orr.w	fp, fp, r3
 80090f6:	f01b 0f01 	tst.w	fp, #1
 80090fa:	d10f      	bne.n	800911c <__gethex+0x374>
 80090fc:	f048 0810 	orr.w	r8, r8, #16
 8009100:	e036      	b.n	8009170 <__gethex+0x3c8>
 8009102:	f04f 0b01 	mov.w	fp, #1
 8009106:	e7d0      	b.n	80090aa <__gethex+0x302>
 8009108:	f04f 0801 	mov.w	r8, #1
 800910c:	e7e2      	b.n	80090d4 <__gethex+0x32c>
 800910e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009110:	f1c3 0301 	rsb	r3, r3, #1
 8009114:	930f      	str	r3, [sp, #60]	; 0x3c
 8009116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0ef      	beq.n	80090fc <__gethex+0x354>
 800911c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009120:	f104 0214 	add.w	r2, r4, #20
 8009124:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	2300      	movs	r3, #0
 800912c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009130:	4694      	mov	ip, r2
 8009132:	f852 1b04 	ldr.w	r1, [r2], #4
 8009136:	f1b1 3fff 	cmp.w	r1, #4294967295
 800913a:	d01e      	beq.n	800917a <__gethex+0x3d2>
 800913c:	3101      	adds	r1, #1
 800913e:	f8cc 1000 	str.w	r1, [ip]
 8009142:	f1b8 0f02 	cmp.w	r8, #2
 8009146:	f104 0214 	add.w	r2, r4, #20
 800914a:	d13d      	bne.n	80091c8 <__gethex+0x420>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	3b01      	subs	r3, #1
 8009150:	42ab      	cmp	r3, r5
 8009152:	d10b      	bne.n	800916c <__gethex+0x3c4>
 8009154:	2301      	movs	r3, #1
 8009156:	1169      	asrs	r1, r5, #5
 8009158:	f005 051f 	and.w	r5, r5, #31
 800915c:	fa03 f505 	lsl.w	r5, r3, r5
 8009160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009164:	421d      	tst	r5, r3
 8009166:	bf18      	it	ne
 8009168:	f04f 0801 	movne.w	r8, #1
 800916c:	f048 0820 	orr.w	r8, r8, #32
 8009170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009172:	601c      	str	r4, [r3, #0]
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	601e      	str	r6, [r3, #0]
 8009178:	e6a0      	b.n	8008ebc <__gethex+0x114>
 800917a:	4290      	cmp	r0, r2
 800917c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009180:	d8d6      	bhi.n	8009130 <__gethex+0x388>
 8009182:	68a2      	ldr	r2, [r4, #8]
 8009184:	4593      	cmp	fp, r2
 8009186:	db17      	blt.n	80091b8 <__gethex+0x410>
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	4648      	mov	r0, r9
 800918c:	3101      	adds	r1, #1
 800918e:	f000 f9c3 	bl	8009518 <_Balloc>
 8009192:	4682      	mov	sl, r0
 8009194:	b918      	cbnz	r0, 800919e <__gethex+0x3f6>
 8009196:	4602      	mov	r2, r0
 8009198:	2184      	movs	r1, #132	; 0x84
 800919a:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <__gethex+0x45c>)
 800919c:	e6b1      	b.n	8008f02 <__gethex+0x15a>
 800919e:	6922      	ldr	r2, [r4, #16]
 80091a0:	f104 010c 	add.w	r1, r4, #12
 80091a4:	3202      	adds	r2, #2
 80091a6:	0092      	lsls	r2, r2, #2
 80091a8:	300c      	adds	r0, #12
 80091aa:	f7fe fec4 	bl	8007f36 <memcpy>
 80091ae:	4621      	mov	r1, r4
 80091b0:	4648      	mov	r0, r9
 80091b2:	f000 f9f1 	bl	8009598 <_Bfree>
 80091b6:	4654      	mov	r4, sl
 80091b8:	6922      	ldr	r2, [r4, #16]
 80091ba:	1c51      	adds	r1, r2, #1
 80091bc:	6121      	str	r1, [r4, #16]
 80091be:	2101      	movs	r1, #1
 80091c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80091c4:	6151      	str	r1, [r2, #20]
 80091c6:	e7bc      	b.n	8009142 <__gethex+0x39a>
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	4559      	cmp	r1, fp
 80091cc:	dd0b      	ble.n	80091e6 <__gethex+0x43e>
 80091ce:	2101      	movs	r1, #1
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7ff fd81 	bl	8008cd8 <rshift>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	3601      	adds	r6, #1
 80091da:	42b3      	cmp	r3, r6
 80091dc:	f6ff aeda 	blt.w	8008f94 <__gethex+0x1ec>
 80091e0:	f04f 0801 	mov.w	r8, #1
 80091e4:	e7c2      	b.n	800916c <__gethex+0x3c4>
 80091e6:	f015 051f 	ands.w	r5, r5, #31
 80091ea:	d0f9      	beq.n	80091e0 <__gethex+0x438>
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	f1c5 0520 	rsb	r5, r5, #32
 80091f2:	441a      	add	r2, r3
 80091f4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80091f8:	f000 fa80 	bl	80096fc <__hi0bits>
 80091fc:	42a8      	cmp	r0, r5
 80091fe:	dbe6      	blt.n	80091ce <__gethex+0x426>
 8009200:	e7ee      	b.n	80091e0 <__gethex+0x438>
 8009202:	bf00      	nop
 8009204:	0800c64d 	.word	0x0800c64d

08009208 <L_shift>:
 8009208:	f1c2 0208 	rsb	r2, r2, #8
 800920c:	0092      	lsls	r2, r2, #2
 800920e:	b570      	push	{r4, r5, r6, lr}
 8009210:	f1c2 0620 	rsb	r6, r2, #32
 8009214:	6843      	ldr	r3, [r0, #4]
 8009216:	6804      	ldr	r4, [r0, #0]
 8009218:	fa03 f506 	lsl.w	r5, r3, r6
 800921c:	432c      	orrs	r4, r5
 800921e:	40d3      	lsrs	r3, r2
 8009220:	6004      	str	r4, [r0, #0]
 8009222:	f840 3f04 	str.w	r3, [r0, #4]!
 8009226:	4288      	cmp	r0, r1
 8009228:	d3f4      	bcc.n	8009214 <L_shift+0xc>
 800922a:	bd70      	pop	{r4, r5, r6, pc}

0800922c <__match>:
 800922c:	b530      	push	{r4, r5, lr}
 800922e:	6803      	ldr	r3, [r0, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009236:	b914      	cbnz	r4, 800923e <__match+0x12>
 8009238:	6003      	str	r3, [r0, #0]
 800923a:	2001      	movs	r0, #1
 800923c:	bd30      	pop	{r4, r5, pc}
 800923e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009242:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009246:	2d19      	cmp	r5, #25
 8009248:	bf98      	it	ls
 800924a:	3220      	addls	r2, #32
 800924c:	42a2      	cmp	r2, r4
 800924e:	d0f0      	beq.n	8009232 <__match+0x6>
 8009250:	2000      	movs	r0, #0
 8009252:	e7f3      	b.n	800923c <__match+0x10>

08009254 <__hexnan>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	2500      	movs	r5, #0
 800925a:	680b      	ldr	r3, [r1, #0]
 800925c:	4682      	mov	sl, r0
 800925e:	115e      	asrs	r6, r3, #5
 8009260:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009264:	f013 031f 	ands.w	r3, r3, #31
 8009268:	bf18      	it	ne
 800926a:	3604      	addne	r6, #4
 800926c:	1f37      	subs	r7, r6, #4
 800926e:	4690      	mov	r8, r2
 8009270:	46b9      	mov	r9, r7
 8009272:	463c      	mov	r4, r7
 8009274:	46ab      	mov	fp, r5
 8009276:	b087      	sub	sp, #28
 8009278:	6801      	ldr	r1, [r0, #0]
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009280:	9502      	str	r5, [sp, #8]
 8009282:	784a      	ldrb	r2, [r1, #1]
 8009284:	1c4b      	adds	r3, r1, #1
 8009286:	9303      	str	r3, [sp, #12]
 8009288:	b342      	cbz	r2, 80092dc <__hexnan+0x88>
 800928a:	4610      	mov	r0, r2
 800928c:	9105      	str	r1, [sp, #20]
 800928e:	9204      	str	r2, [sp, #16]
 8009290:	f7ff fd75 	bl	8008d7e <__hexdig_fun>
 8009294:	2800      	cmp	r0, #0
 8009296:	d14f      	bne.n	8009338 <__hexnan+0xe4>
 8009298:	9a04      	ldr	r2, [sp, #16]
 800929a:	9905      	ldr	r1, [sp, #20]
 800929c:	2a20      	cmp	r2, #32
 800929e:	d818      	bhi.n	80092d2 <__hexnan+0x7e>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	459b      	cmp	fp, r3
 80092a4:	dd13      	ble.n	80092ce <__hexnan+0x7a>
 80092a6:	454c      	cmp	r4, r9
 80092a8:	d206      	bcs.n	80092b8 <__hexnan+0x64>
 80092aa:	2d07      	cmp	r5, #7
 80092ac:	dc04      	bgt.n	80092b8 <__hexnan+0x64>
 80092ae:	462a      	mov	r2, r5
 80092b0:	4649      	mov	r1, r9
 80092b2:	4620      	mov	r0, r4
 80092b4:	f7ff ffa8 	bl	8009208 <L_shift>
 80092b8:	4544      	cmp	r4, r8
 80092ba:	d950      	bls.n	800935e <__hexnan+0x10a>
 80092bc:	2300      	movs	r3, #0
 80092be:	f1a4 0904 	sub.w	r9, r4, #4
 80092c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80092c6:	461d      	mov	r5, r3
 80092c8:	464c      	mov	r4, r9
 80092ca:	f8cd b008 	str.w	fp, [sp, #8]
 80092ce:	9903      	ldr	r1, [sp, #12]
 80092d0:	e7d7      	b.n	8009282 <__hexnan+0x2e>
 80092d2:	2a29      	cmp	r2, #41	; 0x29
 80092d4:	d155      	bne.n	8009382 <__hexnan+0x12e>
 80092d6:	3102      	adds	r1, #2
 80092d8:	f8ca 1000 	str.w	r1, [sl]
 80092dc:	f1bb 0f00 	cmp.w	fp, #0
 80092e0:	d04f      	beq.n	8009382 <__hexnan+0x12e>
 80092e2:	454c      	cmp	r4, r9
 80092e4:	d206      	bcs.n	80092f4 <__hexnan+0xa0>
 80092e6:	2d07      	cmp	r5, #7
 80092e8:	dc04      	bgt.n	80092f4 <__hexnan+0xa0>
 80092ea:	462a      	mov	r2, r5
 80092ec:	4649      	mov	r1, r9
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff ff8a 	bl	8009208 <L_shift>
 80092f4:	4544      	cmp	r4, r8
 80092f6:	d934      	bls.n	8009362 <__hexnan+0x10e>
 80092f8:	4623      	mov	r3, r4
 80092fa:	f1a8 0204 	sub.w	r2, r8, #4
 80092fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8009302:	429f      	cmp	r7, r3
 8009304:	f842 1f04 	str.w	r1, [r2, #4]!
 8009308:	d2f9      	bcs.n	80092fe <__hexnan+0xaa>
 800930a:	1b3b      	subs	r3, r7, r4
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	3304      	adds	r3, #4
 8009312:	3e03      	subs	r6, #3
 8009314:	3401      	adds	r4, #1
 8009316:	42a6      	cmp	r6, r4
 8009318:	bf38      	it	cc
 800931a:	2304      	movcc	r3, #4
 800931c:	2200      	movs	r2, #0
 800931e:	4443      	add	r3, r8
 8009320:	f843 2b04 	str.w	r2, [r3], #4
 8009324:	429f      	cmp	r7, r3
 8009326:	d2fb      	bcs.n	8009320 <__hexnan+0xcc>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	b91b      	cbnz	r3, 8009334 <__hexnan+0xe0>
 800932c:	4547      	cmp	r7, r8
 800932e:	d126      	bne.n	800937e <__hexnan+0x12a>
 8009330:	2301      	movs	r3, #1
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	2005      	movs	r0, #5
 8009336:	e025      	b.n	8009384 <__hexnan+0x130>
 8009338:	3501      	adds	r5, #1
 800933a:	2d08      	cmp	r5, #8
 800933c:	f10b 0b01 	add.w	fp, fp, #1
 8009340:	dd06      	ble.n	8009350 <__hexnan+0xfc>
 8009342:	4544      	cmp	r4, r8
 8009344:	d9c3      	bls.n	80092ce <__hexnan+0x7a>
 8009346:	2300      	movs	r3, #0
 8009348:	2501      	movs	r5, #1
 800934a:	f844 3c04 	str.w	r3, [r4, #-4]
 800934e:	3c04      	subs	r4, #4
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	f000 000f 	and.w	r0, r0, #15
 8009356:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800935a:	6020      	str	r0, [r4, #0]
 800935c:	e7b7      	b.n	80092ce <__hexnan+0x7a>
 800935e:	2508      	movs	r5, #8
 8009360:	e7b5      	b.n	80092ce <__hexnan+0x7a>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0df      	beq.n	8009328 <__hexnan+0xd4>
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	f1c3 0320 	rsb	r3, r3, #32
 8009370:	40da      	lsrs	r2, r3
 8009372:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009376:	4013      	ands	r3, r2
 8009378:	f846 3c04 	str.w	r3, [r6, #-4]
 800937c:	e7d4      	b.n	8009328 <__hexnan+0xd4>
 800937e:	3f04      	subs	r7, #4
 8009380:	e7d2      	b.n	8009328 <__hexnan+0xd4>
 8009382:	2004      	movs	r0, #4
 8009384:	b007      	add	sp, #28
 8009386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800938c <malloc>:
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <malloc+0xc>)
 800938e:	4601      	mov	r1, r0
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f000 b823 	b.w	80093dc <_malloc_r>
 8009396:	bf00      	nop
 8009398:	200001dc 	.word	0x200001dc

0800939c <sbrk_aligned>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	4e0e      	ldr	r6, [pc, #56]	; (80093d8 <sbrk_aligned+0x3c>)
 80093a0:	460c      	mov	r4, r1
 80093a2:	6831      	ldr	r1, [r6, #0]
 80093a4:	4605      	mov	r5, r0
 80093a6:	b911      	cbnz	r1, 80093ae <sbrk_aligned+0x12>
 80093a8:	f000 fffc 	bl	800a3a4 <_sbrk_r>
 80093ac:	6030      	str	r0, [r6, #0]
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 fff7 	bl	800a3a4 <_sbrk_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d00a      	beq.n	80093d0 <sbrk_aligned+0x34>
 80093ba:	1cc4      	adds	r4, r0, #3
 80093bc:	f024 0403 	bic.w	r4, r4, #3
 80093c0:	42a0      	cmp	r0, r4
 80093c2:	d007      	beq.n	80093d4 <sbrk_aligned+0x38>
 80093c4:	1a21      	subs	r1, r4, r0
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 ffec 	bl	800a3a4 <_sbrk_r>
 80093cc:	3001      	adds	r0, #1
 80093ce:	d101      	bne.n	80093d4 <sbrk_aligned+0x38>
 80093d0:	f04f 34ff 	mov.w	r4, #4294967295
 80093d4:	4620      	mov	r0, r4
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	20000948 	.word	0x20000948

080093dc <_malloc_r>:
 80093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e0:	1ccd      	adds	r5, r1, #3
 80093e2:	f025 0503 	bic.w	r5, r5, #3
 80093e6:	3508      	adds	r5, #8
 80093e8:	2d0c      	cmp	r5, #12
 80093ea:	bf38      	it	cc
 80093ec:	250c      	movcc	r5, #12
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	4607      	mov	r7, r0
 80093f2:	db01      	blt.n	80093f8 <_malloc_r+0x1c>
 80093f4:	42a9      	cmp	r1, r5
 80093f6:	d905      	bls.n	8009404 <_malloc_r+0x28>
 80093f8:	230c      	movs	r3, #12
 80093fa:	2600      	movs	r6, #0
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	4630      	mov	r0, r6
 8009400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094d8 <_malloc_r+0xfc>
 8009408:	f000 f87a 	bl	8009500 <__malloc_lock>
 800940c:	f8d8 3000 	ldr.w	r3, [r8]
 8009410:	461c      	mov	r4, r3
 8009412:	bb5c      	cbnz	r4, 800946c <_malloc_r+0x90>
 8009414:	4629      	mov	r1, r5
 8009416:	4638      	mov	r0, r7
 8009418:	f7ff ffc0 	bl	800939c <sbrk_aligned>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	4604      	mov	r4, r0
 8009420:	d155      	bne.n	80094ce <_malloc_r+0xf2>
 8009422:	f8d8 4000 	ldr.w	r4, [r8]
 8009426:	4626      	mov	r6, r4
 8009428:	2e00      	cmp	r6, #0
 800942a:	d145      	bne.n	80094b8 <_malloc_r+0xdc>
 800942c:	2c00      	cmp	r4, #0
 800942e:	d048      	beq.n	80094c2 <_malloc_r+0xe6>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	4631      	mov	r1, r6
 8009434:	4638      	mov	r0, r7
 8009436:	eb04 0903 	add.w	r9, r4, r3
 800943a:	f000 ffb3 	bl	800a3a4 <_sbrk_r>
 800943e:	4581      	cmp	r9, r0
 8009440:	d13f      	bne.n	80094c2 <_malloc_r+0xe6>
 8009442:	6821      	ldr	r1, [r4, #0]
 8009444:	4638      	mov	r0, r7
 8009446:	1a6d      	subs	r5, r5, r1
 8009448:	4629      	mov	r1, r5
 800944a:	f7ff ffa7 	bl	800939c <sbrk_aligned>
 800944e:	3001      	adds	r0, #1
 8009450:	d037      	beq.n	80094c2 <_malloc_r+0xe6>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	442b      	add	r3, r5
 8009456:	6023      	str	r3, [r4, #0]
 8009458:	f8d8 3000 	ldr.w	r3, [r8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d038      	beq.n	80094d2 <_malloc_r+0xf6>
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	42a2      	cmp	r2, r4
 8009464:	d12b      	bne.n	80094be <_malloc_r+0xe2>
 8009466:	2200      	movs	r2, #0
 8009468:	605a      	str	r2, [r3, #4]
 800946a:	e00f      	b.n	800948c <_malloc_r+0xb0>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	1b52      	subs	r2, r2, r5
 8009470:	d41f      	bmi.n	80094b2 <_malloc_r+0xd6>
 8009472:	2a0b      	cmp	r2, #11
 8009474:	d917      	bls.n	80094a6 <_malloc_r+0xca>
 8009476:	1961      	adds	r1, r4, r5
 8009478:	42a3      	cmp	r3, r4
 800947a:	6025      	str	r5, [r4, #0]
 800947c:	bf18      	it	ne
 800947e:	6059      	strne	r1, [r3, #4]
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	bf08      	it	eq
 8009484:	f8c8 1000 	streq.w	r1, [r8]
 8009488:	5162      	str	r2, [r4, r5]
 800948a:	604b      	str	r3, [r1, #4]
 800948c:	4638      	mov	r0, r7
 800948e:	f104 060b 	add.w	r6, r4, #11
 8009492:	f000 f83b 	bl	800950c <__malloc_unlock>
 8009496:	f026 0607 	bic.w	r6, r6, #7
 800949a:	1d23      	adds	r3, r4, #4
 800949c:	1af2      	subs	r2, r6, r3
 800949e:	d0ae      	beq.n	80093fe <_malloc_r+0x22>
 80094a0:	1b9b      	subs	r3, r3, r6
 80094a2:	50a3      	str	r3, [r4, r2]
 80094a4:	e7ab      	b.n	80093fe <_malloc_r+0x22>
 80094a6:	42a3      	cmp	r3, r4
 80094a8:	6862      	ldr	r2, [r4, #4]
 80094aa:	d1dd      	bne.n	8009468 <_malloc_r+0x8c>
 80094ac:	f8c8 2000 	str.w	r2, [r8]
 80094b0:	e7ec      	b.n	800948c <_malloc_r+0xb0>
 80094b2:	4623      	mov	r3, r4
 80094b4:	6864      	ldr	r4, [r4, #4]
 80094b6:	e7ac      	b.n	8009412 <_malloc_r+0x36>
 80094b8:	4634      	mov	r4, r6
 80094ba:	6876      	ldr	r6, [r6, #4]
 80094bc:	e7b4      	b.n	8009428 <_malloc_r+0x4c>
 80094be:	4613      	mov	r3, r2
 80094c0:	e7cc      	b.n	800945c <_malloc_r+0x80>
 80094c2:	230c      	movs	r3, #12
 80094c4:	4638      	mov	r0, r7
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	f000 f820 	bl	800950c <__malloc_unlock>
 80094cc:	e797      	b.n	80093fe <_malloc_r+0x22>
 80094ce:	6025      	str	r5, [r4, #0]
 80094d0:	e7dc      	b.n	800948c <_malloc_r+0xb0>
 80094d2:	605b      	str	r3, [r3, #4]
 80094d4:	deff      	udf	#255	; 0xff
 80094d6:	bf00      	nop
 80094d8:	20000944 	.word	0x20000944

080094dc <__ascii_mbtowc>:
 80094dc:	b082      	sub	sp, #8
 80094de:	b901      	cbnz	r1, 80094e2 <__ascii_mbtowc+0x6>
 80094e0:	a901      	add	r1, sp, #4
 80094e2:	b142      	cbz	r2, 80094f6 <__ascii_mbtowc+0x1a>
 80094e4:	b14b      	cbz	r3, 80094fa <__ascii_mbtowc+0x1e>
 80094e6:	7813      	ldrb	r3, [r2, #0]
 80094e8:	600b      	str	r3, [r1, #0]
 80094ea:	7812      	ldrb	r2, [r2, #0]
 80094ec:	1e10      	subs	r0, r2, #0
 80094ee:	bf18      	it	ne
 80094f0:	2001      	movne	r0, #1
 80094f2:	b002      	add	sp, #8
 80094f4:	4770      	bx	lr
 80094f6:	4610      	mov	r0, r2
 80094f8:	e7fb      	b.n	80094f2 <__ascii_mbtowc+0x16>
 80094fa:	f06f 0001 	mvn.w	r0, #1
 80094fe:	e7f8      	b.n	80094f2 <__ascii_mbtowc+0x16>

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__malloc_lock+0x8>)
 8009502:	f7fe bd08 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	20000940 	.word	0x20000940

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_unlock+0x8>)
 800950e:	f7fe bd03 	b.w	8007f18 <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	20000940 	.word	0x20000940

08009518 <_Balloc>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	69c6      	ldr	r6, [r0, #28]
 800951c:	4604      	mov	r4, r0
 800951e:	460d      	mov	r5, r1
 8009520:	b976      	cbnz	r6, 8009540 <_Balloc+0x28>
 8009522:	2010      	movs	r0, #16
 8009524:	f7ff ff32 	bl	800938c <malloc>
 8009528:	4602      	mov	r2, r0
 800952a:	61e0      	str	r0, [r4, #28]
 800952c:	b920      	cbnz	r0, 8009538 <_Balloc+0x20>
 800952e:	216b      	movs	r1, #107	; 0x6b
 8009530:	4b17      	ldr	r3, [pc, #92]	; (8009590 <_Balloc+0x78>)
 8009532:	4818      	ldr	r0, [pc, #96]	; (8009594 <_Balloc+0x7c>)
 8009534:	f000 ff46 	bl	800a3c4 <__assert_func>
 8009538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800953c:	6006      	str	r6, [r0, #0]
 800953e:	60c6      	str	r6, [r0, #12]
 8009540:	69e6      	ldr	r6, [r4, #28]
 8009542:	68f3      	ldr	r3, [r6, #12]
 8009544:	b183      	cbz	r3, 8009568 <_Balloc+0x50>
 8009546:	69e3      	ldr	r3, [r4, #28]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800954e:	b9b8      	cbnz	r0, 8009580 <_Balloc+0x68>
 8009550:	2101      	movs	r1, #1
 8009552:	fa01 f605 	lsl.w	r6, r1, r5
 8009556:	1d72      	adds	r2, r6, #5
 8009558:	4620      	mov	r0, r4
 800955a:	0092      	lsls	r2, r2, #2
 800955c:	f000 ff50 	bl	800a400 <_calloc_r>
 8009560:	b160      	cbz	r0, 800957c <_Balloc+0x64>
 8009562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009566:	e00e      	b.n	8009586 <_Balloc+0x6e>
 8009568:	2221      	movs	r2, #33	; 0x21
 800956a:	2104      	movs	r1, #4
 800956c:	4620      	mov	r0, r4
 800956e:	f000 ff47 	bl	800a400 <_calloc_r>
 8009572:	69e3      	ldr	r3, [r4, #28]
 8009574:	60f0      	str	r0, [r6, #12]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e4      	bne.n	8009546 <_Balloc+0x2e>
 800957c:	2000      	movs	r0, #0
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	6802      	ldr	r2, [r0, #0]
 8009582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009586:	2300      	movs	r3, #0
 8009588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800958c:	e7f7      	b.n	800957e <_Balloc+0x66>
 800958e:	bf00      	nop
 8009590:	0800c5de 	.word	0x0800c5de
 8009594:	0800c6be 	.word	0x0800c6be

08009598 <_Bfree>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	69c6      	ldr	r6, [r0, #28]
 800959c:	4605      	mov	r5, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	b976      	cbnz	r6, 80095c0 <_Bfree+0x28>
 80095a2:	2010      	movs	r0, #16
 80095a4:	f7ff fef2 	bl	800938c <malloc>
 80095a8:	4602      	mov	r2, r0
 80095aa:	61e8      	str	r0, [r5, #28]
 80095ac:	b920      	cbnz	r0, 80095b8 <_Bfree+0x20>
 80095ae:	218f      	movs	r1, #143	; 0x8f
 80095b0:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <_Bfree+0x3c>)
 80095b2:	4809      	ldr	r0, [pc, #36]	; (80095d8 <_Bfree+0x40>)
 80095b4:	f000 ff06 	bl	800a3c4 <__assert_func>
 80095b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095bc:	6006      	str	r6, [r0, #0]
 80095be:	60c6      	str	r6, [r0, #12]
 80095c0:	b13c      	cbz	r4, 80095d2 <_Bfree+0x3a>
 80095c2:	69eb      	ldr	r3, [r5, #28]
 80095c4:	6862      	ldr	r2, [r4, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095cc:	6021      	str	r1, [r4, #0]
 80095ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	0800c5de 	.word	0x0800c5de
 80095d8:	0800c6be 	.word	0x0800c6be

080095dc <__multadd>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	4607      	mov	r7, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	461e      	mov	r6, r3
 80095e6:	2000      	movs	r0, #0
 80095e8:	690d      	ldr	r5, [r1, #16]
 80095ea:	f101 0c14 	add.w	ip, r1, #20
 80095ee:	f8dc 3000 	ldr.w	r3, [ip]
 80095f2:	3001      	adds	r0, #1
 80095f4:	b299      	uxth	r1, r3
 80095f6:	fb02 6101 	mla	r1, r2, r1, r6
 80095fa:	0c1e      	lsrs	r6, r3, #16
 80095fc:	0c0b      	lsrs	r3, r1, #16
 80095fe:	fb02 3306 	mla	r3, r2, r6, r3
 8009602:	b289      	uxth	r1, r1
 8009604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009608:	4285      	cmp	r5, r0
 800960a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800960e:	f84c 1b04 	str.w	r1, [ip], #4
 8009612:	dcec      	bgt.n	80095ee <__multadd+0x12>
 8009614:	b30e      	cbz	r6, 800965a <__multadd+0x7e>
 8009616:	68a3      	ldr	r3, [r4, #8]
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc19      	bgt.n	8009650 <__multadd+0x74>
 800961c:	6861      	ldr	r1, [r4, #4]
 800961e:	4638      	mov	r0, r7
 8009620:	3101      	adds	r1, #1
 8009622:	f7ff ff79 	bl	8009518 <_Balloc>
 8009626:	4680      	mov	r8, r0
 8009628:	b928      	cbnz	r0, 8009636 <__multadd+0x5a>
 800962a:	4602      	mov	r2, r0
 800962c:	21ba      	movs	r1, #186	; 0xba
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <__multadd+0x84>)
 8009630:	480c      	ldr	r0, [pc, #48]	; (8009664 <__multadd+0x88>)
 8009632:	f000 fec7 	bl	800a3c4 <__assert_func>
 8009636:	6922      	ldr	r2, [r4, #16]
 8009638:	f104 010c 	add.w	r1, r4, #12
 800963c:	3202      	adds	r2, #2
 800963e:	0092      	lsls	r2, r2, #2
 8009640:	300c      	adds	r0, #12
 8009642:	f7fe fc78 	bl	8007f36 <memcpy>
 8009646:	4621      	mov	r1, r4
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff ffa5 	bl	8009598 <_Bfree>
 800964e:	4644      	mov	r4, r8
 8009650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009654:	3501      	adds	r5, #1
 8009656:	615e      	str	r6, [r3, #20]
 8009658:	6125      	str	r5, [r4, #16]
 800965a:	4620      	mov	r0, r4
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	0800c64d 	.word	0x0800c64d
 8009664:	0800c6be 	.word	0x0800c6be

08009668 <__s2b>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	4615      	mov	r5, r2
 800966e:	2209      	movs	r2, #9
 8009670:	461f      	mov	r7, r3
 8009672:	3308      	adds	r3, #8
 8009674:	460c      	mov	r4, r1
 8009676:	fb93 f3f2 	sdiv	r3, r3, r2
 800967a:	4606      	mov	r6, r0
 800967c:	2201      	movs	r2, #1
 800967e:	2100      	movs	r1, #0
 8009680:	429a      	cmp	r2, r3
 8009682:	db09      	blt.n	8009698 <__s2b+0x30>
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff ff47 	bl	8009518 <_Balloc>
 800968a:	b940      	cbnz	r0, 800969e <__s2b+0x36>
 800968c:	4602      	mov	r2, r0
 800968e:	21d3      	movs	r1, #211	; 0xd3
 8009690:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <__s2b+0x8c>)
 8009692:	4819      	ldr	r0, [pc, #100]	; (80096f8 <__s2b+0x90>)
 8009694:	f000 fe96 	bl	800a3c4 <__assert_func>
 8009698:	0052      	lsls	r2, r2, #1
 800969a:	3101      	adds	r1, #1
 800969c:	e7f0      	b.n	8009680 <__s2b+0x18>
 800969e:	9b08      	ldr	r3, [sp, #32]
 80096a0:	2d09      	cmp	r5, #9
 80096a2:	6143      	str	r3, [r0, #20]
 80096a4:	f04f 0301 	mov.w	r3, #1
 80096a8:	6103      	str	r3, [r0, #16]
 80096aa:	dd16      	ble.n	80096da <__s2b+0x72>
 80096ac:	f104 0909 	add.w	r9, r4, #9
 80096b0:	46c8      	mov	r8, r9
 80096b2:	442c      	add	r4, r5
 80096b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096b8:	4601      	mov	r1, r0
 80096ba:	220a      	movs	r2, #10
 80096bc:	4630      	mov	r0, r6
 80096be:	3b30      	subs	r3, #48	; 0x30
 80096c0:	f7ff ff8c 	bl	80095dc <__multadd>
 80096c4:	45a0      	cmp	r8, r4
 80096c6:	d1f5      	bne.n	80096b4 <__s2b+0x4c>
 80096c8:	f1a5 0408 	sub.w	r4, r5, #8
 80096cc:	444c      	add	r4, r9
 80096ce:	1b2d      	subs	r5, r5, r4
 80096d0:	1963      	adds	r3, r4, r5
 80096d2:	42bb      	cmp	r3, r7
 80096d4:	db04      	blt.n	80096e0 <__s2b+0x78>
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096da:	2509      	movs	r5, #9
 80096dc:	340a      	adds	r4, #10
 80096de:	e7f6      	b.n	80096ce <__s2b+0x66>
 80096e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e4:	4601      	mov	r1, r0
 80096e6:	220a      	movs	r2, #10
 80096e8:	4630      	mov	r0, r6
 80096ea:	3b30      	subs	r3, #48	; 0x30
 80096ec:	f7ff ff76 	bl	80095dc <__multadd>
 80096f0:	e7ee      	b.n	80096d0 <__s2b+0x68>
 80096f2:	bf00      	nop
 80096f4:	0800c64d 	.word	0x0800c64d
 80096f8:	0800c6be 	.word	0x0800c6be

080096fc <__hi0bits>:
 80096fc:	0c02      	lsrs	r2, r0, #16
 80096fe:	0412      	lsls	r2, r2, #16
 8009700:	4603      	mov	r3, r0
 8009702:	b9ca      	cbnz	r2, 8009738 <__hi0bits+0x3c>
 8009704:	0403      	lsls	r3, r0, #16
 8009706:	2010      	movs	r0, #16
 8009708:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800970c:	bf04      	itt	eq
 800970e:	021b      	lsleq	r3, r3, #8
 8009710:	3008      	addeq	r0, #8
 8009712:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009716:	bf04      	itt	eq
 8009718:	011b      	lsleq	r3, r3, #4
 800971a:	3004      	addeq	r0, #4
 800971c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009720:	bf04      	itt	eq
 8009722:	009b      	lsleq	r3, r3, #2
 8009724:	3002      	addeq	r0, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	db05      	blt.n	8009736 <__hi0bits+0x3a>
 800972a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800972e:	f100 0001 	add.w	r0, r0, #1
 8009732:	bf08      	it	eq
 8009734:	2020      	moveq	r0, #32
 8009736:	4770      	bx	lr
 8009738:	2000      	movs	r0, #0
 800973a:	e7e5      	b.n	8009708 <__hi0bits+0xc>

0800973c <__lo0bits>:
 800973c:	6803      	ldr	r3, [r0, #0]
 800973e:	4602      	mov	r2, r0
 8009740:	f013 0007 	ands.w	r0, r3, #7
 8009744:	d00b      	beq.n	800975e <__lo0bits+0x22>
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	d421      	bmi.n	800978e <__lo0bits+0x52>
 800974a:	0798      	lsls	r0, r3, #30
 800974c:	bf49      	itett	mi
 800974e:	085b      	lsrmi	r3, r3, #1
 8009750:	089b      	lsrpl	r3, r3, #2
 8009752:	2001      	movmi	r0, #1
 8009754:	6013      	strmi	r3, [r2, #0]
 8009756:	bf5c      	itt	pl
 8009758:	2002      	movpl	r0, #2
 800975a:	6013      	strpl	r3, [r2, #0]
 800975c:	4770      	bx	lr
 800975e:	b299      	uxth	r1, r3
 8009760:	b909      	cbnz	r1, 8009766 <__lo0bits+0x2a>
 8009762:	2010      	movs	r0, #16
 8009764:	0c1b      	lsrs	r3, r3, #16
 8009766:	b2d9      	uxtb	r1, r3
 8009768:	b909      	cbnz	r1, 800976e <__lo0bits+0x32>
 800976a:	3008      	adds	r0, #8
 800976c:	0a1b      	lsrs	r3, r3, #8
 800976e:	0719      	lsls	r1, r3, #28
 8009770:	bf04      	itt	eq
 8009772:	091b      	lsreq	r3, r3, #4
 8009774:	3004      	addeq	r0, #4
 8009776:	0799      	lsls	r1, r3, #30
 8009778:	bf04      	itt	eq
 800977a:	089b      	lsreq	r3, r3, #2
 800977c:	3002      	addeq	r0, #2
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d403      	bmi.n	800978a <__lo0bits+0x4e>
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	f100 0001 	add.w	r0, r0, #1
 8009788:	d003      	beq.n	8009792 <__lo0bits+0x56>
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	4770      	bx	lr
 800978e:	2000      	movs	r0, #0
 8009790:	4770      	bx	lr
 8009792:	2020      	movs	r0, #32
 8009794:	4770      	bx	lr
	...

08009798 <__i2b>:
 8009798:	b510      	push	{r4, lr}
 800979a:	460c      	mov	r4, r1
 800979c:	2101      	movs	r1, #1
 800979e:	f7ff febb 	bl	8009518 <_Balloc>
 80097a2:	4602      	mov	r2, r0
 80097a4:	b928      	cbnz	r0, 80097b2 <__i2b+0x1a>
 80097a6:	f240 1145 	movw	r1, #325	; 0x145
 80097aa:	4b04      	ldr	r3, [pc, #16]	; (80097bc <__i2b+0x24>)
 80097ac:	4804      	ldr	r0, [pc, #16]	; (80097c0 <__i2b+0x28>)
 80097ae:	f000 fe09 	bl	800a3c4 <__assert_func>
 80097b2:	2301      	movs	r3, #1
 80097b4:	6144      	str	r4, [r0, #20]
 80097b6:	6103      	str	r3, [r0, #16]
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	bf00      	nop
 80097bc:	0800c64d 	.word	0x0800c64d
 80097c0:	0800c6be 	.word	0x0800c6be

080097c4 <__multiply>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	4691      	mov	r9, r2
 80097ca:	690a      	ldr	r2, [r1, #16]
 80097cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d0:	460c      	mov	r4, r1
 80097d2:	429a      	cmp	r2, r3
 80097d4:	bfbe      	ittt	lt
 80097d6:	460b      	movlt	r3, r1
 80097d8:	464c      	movlt	r4, r9
 80097da:	4699      	movlt	r9, r3
 80097dc:	6927      	ldr	r7, [r4, #16]
 80097de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	eb07 060a 	add.w	r6, r7, sl
 80097ea:	42b3      	cmp	r3, r6
 80097ec:	b085      	sub	sp, #20
 80097ee:	bfb8      	it	lt
 80097f0:	3101      	addlt	r1, #1
 80097f2:	f7ff fe91 	bl	8009518 <_Balloc>
 80097f6:	b930      	cbnz	r0, 8009806 <__multiply+0x42>
 80097f8:	4602      	mov	r2, r0
 80097fa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80097fe:	4b43      	ldr	r3, [pc, #268]	; (800990c <__multiply+0x148>)
 8009800:	4843      	ldr	r0, [pc, #268]	; (8009910 <__multiply+0x14c>)
 8009802:	f000 fddf 	bl	800a3c4 <__assert_func>
 8009806:	f100 0514 	add.w	r5, r0, #20
 800980a:	462b      	mov	r3, r5
 800980c:	2200      	movs	r2, #0
 800980e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009812:	4543      	cmp	r3, r8
 8009814:	d321      	bcc.n	800985a <__multiply+0x96>
 8009816:	f104 0314 	add.w	r3, r4, #20
 800981a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800981e:	f109 0314 	add.w	r3, r9, #20
 8009822:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009826:	9202      	str	r2, [sp, #8]
 8009828:	1b3a      	subs	r2, r7, r4
 800982a:	3a15      	subs	r2, #21
 800982c:	f022 0203 	bic.w	r2, r2, #3
 8009830:	3204      	adds	r2, #4
 8009832:	f104 0115 	add.w	r1, r4, #21
 8009836:	428f      	cmp	r7, r1
 8009838:	bf38      	it	cc
 800983a:	2204      	movcc	r2, #4
 800983c:	9201      	str	r2, [sp, #4]
 800983e:	9a02      	ldr	r2, [sp, #8]
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	429a      	cmp	r2, r3
 8009844:	d80c      	bhi.n	8009860 <__multiply+0x9c>
 8009846:	2e00      	cmp	r6, #0
 8009848:	dd03      	ble.n	8009852 <__multiply+0x8e>
 800984a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800984e:	2b00      	cmp	r3, #0
 8009850:	d05a      	beq.n	8009908 <__multiply+0x144>
 8009852:	6106      	str	r6, [r0, #16]
 8009854:	b005      	add	sp, #20
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985a:	f843 2b04 	str.w	r2, [r3], #4
 800985e:	e7d8      	b.n	8009812 <__multiply+0x4e>
 8009860:	f8b3 a000 	ldrh.w	sl, [r3]
 8009864:	f1ba 0f00 	cmp.w	sl, #0
 8009868:	d023      	beq.n	80098b2 <__multiply+0xee>
 800986a:	46a9      	mov	r9, r5
 800986c:	f04f 0c00 	mov.w	ip, #0
 8009870:	f104 0e14 	add.w	lr, r4, #20
 8009874:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009878:	f8d9 1000 	ldr.w	r1, [r9]
 800987c:	fa1f fb82 	uxth.w	fp, r2
 8009880:	b289      	uxth	r1, r1
 8009882:	fb0a 110b 	mla	r1, sl, fp, r1
 8009886:	4461      	add	r1, ip
 8009888:	f8d9 c000 	ldr.w	ip, [r9]
 800988c:	0c12      	lsrs	r2, r2, #16
 800988e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009892:	fb0a c202 	mla	r2, sl, r2, ip
 8009896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800989a:	b289      	uxth	r1, r1
 800989c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098a0:	4577      	cmp	r7, lr
 80098a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098a6:	f849 1b04 	str.w	r1, [r9], #4
 80098aa:	d8e3      	bhi.n	8009874 <__multiply+0xb0>
 80098ac:	9a01      	ldr	r2, [sp, #4]
 80098ae:	f845 c002 	str.w	ip, [r5, r2]
 80098b2:	9a03      	ldr	r2, [sp, #12]
 80098b4:	3304      	adds	r3, #4
 80098b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098ba:	f1b9 0f00 	cmp.w	r9, #0
 80098be:	d021      	beq.n	8009904 <__multiply+0x140>
 80098c0:	46ae      	mov	lr, r5
 80098c2:	f04f 0a00 	mov.w	sl, #0
 80098c6:	6829      	ldr	r1, [r5, #0]
 80098c8:	f104 0c14 	add.w	ip, r4, #20
 80098cc:	f8bc b000 	ldrh.w	fp, [ip]
 80098d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098d4:	b289      	uxth	r1, r1
 80098d6:	fb09 220b 	mla	r2, r9, fp, r2
 80098da:	4452      	add	r2, sl
 80098dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098e0:	f84e 1b04 	str.w	r1, [lr], #4
 80098e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80098e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098ec:	f8be 1000 	ldrh.w	r1, [lr]
 80098f0:	4567      	cmp	r7, ip
 80098f2:	fb09 110a 	mla	r1, r9, sl, r1
 80098f6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80098fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098fe:	d8e5      	bhi.n	80098cc <__multiply+0x108>
 8009900:	9a01      	ldr	r2, [sp, #4]
 8009902:	50a9      	str	r1, [r5, r2]
 8009904:	3504      	adds	r5, #4
 8009906:	e79a      	b.n	800983e <__multiply+0x7a>
 8009908:	3e01      	subs	r6, #1
 800990a:	e79c      	b.n	8009846 <__multiply+0x82>
 800990c:	0800c64d 	.word	0x0800c64d
 8009910:	0800c6be 	.word	0x0800c6be

08009914 <__pow5mult>:
 8009914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009918:	4615      	mov	r5, r2
 800991a:	f012 0203 	ands.w	r2, r2, #3
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	d007      	beq.n	8009934 <__pow5mult+0x20>
 8009924:	4c25      	ldr	r4, [pc, #148]	; (80099bc <__pow5mult+0xa8>)
 8009926:	3a01      	subs	r2, #1
 8009928:	2300      	movs	r3, #0
 800992a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800992e:	f7ff fe55 	bl	80095dc <__multadd>
 8009932:	4607      	mov	r7, r0
 8009934:	10ad      	asrs	r5, r5, #2
 8009936:	d03d      	beq.n	80099b4 <__pow5mult+0xa0>
 8009938:	69f4      	ldr	r4, [r6, #28]
 800993a:	b97c      	cbnz	r4, 800995c <__pow5mult+0x48>
 800993c:	2010      	movs	r0, #16
 800993e:	f7ff fd25 	bl	800938c <malloc>
 8009942:	4602      	mov	r2, r0
 8009944:	61f0      	str	r0, [r6, #28]
 8009946:	b928      	cbnz	r0, 8009954 <__pow5mult+0x40>
 8009948:	f240 11b3 	movw	r1, #435	; 0x1b3
 800994c:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <__pow5mult+0xac>)
 800994e:	481d      	ldr	r0, [pc, #116]	; (80099c4 <__pow5mult+0xb0>)
 8009950:	f000 fd38 	bl	800a3c4 <__assert_func>
 8009954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009958:	6004      	str	r4, [r0, #0]
 800995a:	60c4      	str	r4, [r0, #12]
 800995c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009964:	b94c      	cbnz	r4, 800997a <__pow5mult+0x66>
 8009966:	f240 2171 	movw	r1, #625	; 0x271
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ff14 	bl	8009798 <__i2b>
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	f8c8 0008 	str.w	r0, [r8, #8]
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	f04f 0900 	mov.w	r9, #0
 800997e:	07eb      	lsls	r3, r5, #31
 8009980:	d50a      	bpl.n	8009998 <__pow5mult+0x84>
 8009982:	4639      	mov	r1, r7
 8009984:	4622      	mov	r2, r4
 8009986:	4630      	mov	r0, r6
 8009988:	f7ff ff1c 	bl	80097c4 <__multiply>
 800998c:	4680      	mov	r8, r0
 800998e:	4639      	mov	r1, r7
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff fe01 	bl	8009598 <_Bfree>
 8009996:	4647      	mov	r7, r8
 8009998:	106d      	asrs	r5, r5, #1
 800999a:	d00b      	beq.n	80099b4 <__pow5mult+0xa0>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	b938      	cbnz	r0, 80099b0 <__pow5mult+0x9c>
 80099a0:	4622      	mov	r2, r4
 80099a2:	4621      	mov	r1, r4
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff ff0d 	bl	80097c4 <__multiply>
 80099aa:	6020      	str	r0, [r4, #0]
 80099ac:	f8c0 9000 	str.w	r9, [r0]
 80099b0:	4604      	mov	r4, r0
 80099b2:	e7e4      	b.n	800997e <__pow5mult+0x6a>
 80099b4:	4638      	mov	r0, r7
 80099b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ba:	bf00      	nop
 80099bc:	0800c808 	.word	0x0800c808
 80099c0:	0800c5de 	.word	0x0800c5de
 80099c4:	0800c6be 	.word	0x0800c6be

080099c8 <__lshift>:
 80099c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	4607      	mov	r7, r0
 80099d0:	4691      	mov	r9, r2
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	6849      	ldr	r1, [r1, #4]
 80099d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099e0:	f108 0601 	add.w	r6, r8, #1
 80099e4:	42b3      	cmp	r3, r6
 80099e6:	db0b      	blt.n	8009a00 <__lshift+0x38>
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff fd95 	bl	8009518 <_Balloc>
 80099ee:	4605      	mov	r5, r0
 80099f0:	b948      	cbnz	r0, 8009a06 <__lshift+0x3e>
 80099f2:	4602      	mov	r2, r0
 80099f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80099f8:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <__lshift+0xd0>)
 80099fa:	4828      	ldr	r0, [pc, #160]	; (8009a9c <__lshift+0xd4>)
 80099fc:	f000 fce2 	bl	800a3c4 <__assert_func>
 8009a00:	3101      	adds	r1, #1
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	e7ee      	b.n	80099e4 <__lshift+0x1c>
 8009a06:	2300      	movs	r3, #0
 8009a08:	f100 0114 	add.w	r1, r0, #20
 8009a0c:	f100 0210 	add.w	r2, r0, #16
 8009a10:	4618      	mov	r0, r3
 8009a12:	4553      	cmp	r3, sl
 8009a14:	db33      	blt.n	8009a7e <__lshift+0xb6>
 8009a16:	6920      	ldr	r0, [r4, #16]
 8009a18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a1c:	f104 0314 	add.w	r3, r4, #20
 8009a20:	f019 091f 	ands.w	r9, r9, #31
 8009a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a2c:	d02b      	beq.n	8009a86 <__lshift+0xbe>
 8009a2e:	468a      	mov	sl, r1
 8009a30:	2200      	movs	r2, #0
 8009a32:	f1c9 0e20 	rsb	lr, r9, #32
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	fa00 f009 	lsl.w	r0, r0, r9
 8009a3c:	4310      	orrs	r0, r2
 8009a3e:	f84a 0b04 	str.w	r0, [sl], #4
 8009a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a46:	459c      	cmp	ip, r3
 8009a48:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a4c:	d8f3      	bhi.n	8009a36 <__lshift+0x6e>
 8009a4e:	ebac 0304 	sub.w	r3, ip, r4
 8009a52:	3b15      	subs	r3, #21
 8009a54:	f023 0303 	bic.w	r3, r3, #3
 8009a58:	3304      	adds	r3, #4
 8009a5a:	f104 0015 	add.w	r0, r4, #21
 8009a5e:	4584      	cmp	ip, r0
 8009a60:	bf38      	it	cc
 8009a62:	2304      	movcc	r3, #4
 8009a64:	50ca      	str	r2, [r1, r3]
 8009a66:	b10a      	cbz	r2, 8009a6c <__lshift+0xa4>
 8009a68:	f108 0602 	add.w	r6, r8, #2
 8009a6c:	3e01      	subs	r6, #1
 8009a6e:	4638      	mov	r0, r7
 8009a70:	4621      	mov	r1, r4
 8009a72:	612e      	str	r6, [r5, #16]
 8009a74:	f7ff fd90 	bl	8009598 <_Bfree>
 8009a78:	4628      	mov	r0, r5
 8009a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a82:	3301      	adds	r3, #1
 8009a84:	e7c5      	b.n	8009a12 <__lshift+0x4a>
 8009a86:	3904      	subs	r1, #4
 8009a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a8c:	459c      	cmp	ip, r3
 8009a8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a92:	d8f9      	bhi.n	8009a88 <__lshift+0xc0>
 8009a94:	e7ea      	b.n	8009a6c <__lshift+0xa4>
 8009a96:	bf00      	nop
 8009a98:	0800c64d 	.word	0x0800c64d
 8009a9c:	0800c6be 	.word	0x0800c6be

08009aa0 <__mcmp>:
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	690a      	ldr	r2, [r1, #16]
 8009aa4:	6900      	ldr	r0, [r0, #16]
 8009aa6:	b530      	push	{r4, r5, lr}
 8009aa8:	1a80      	subs	r0, r0, r2
 8009aaa:	d10d      	bne.n	8009ac8 <__mcmp+0x28>
 8009aac:	3314      	adds	r3, #20
 8009aae:	3114      	adds	r1, #20
 8009ab0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ab4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ab8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009abc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ac0:	4295      	cmp	r5, r2
 8009ac2:	d002      	beq.n	8009aca <__mcmp+0x2a>
 8009ac4:	d304      	bcc.n	8009ad0 <__mcmp+0x30>
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	bd30      	pop	{r4, r5, pc}
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	d3f4      	bcc.n	8009ab8 <__mcmp+0x18>
 8009ace:	e7fb      	b.n	8009ac8 <__mcmp+0x28>
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad4:	e7f8      	b.n	8009ac8 <__mcmp+0x28>
	...

08009ad8 <__mdiff>:
 8009ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	460d      	mov	r5, r1
 8009ade:	4607      	mov	r7, r0
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	f7ff ffdb 	bl	8009aa0 <__mcmp>
 8009aea:	1e06      	subs	r6, r0, #0
 8009aec:	d111      	bne.n	8009b12 <__mdiff+0x3a>
 8009aee:	4631      	mov	r1, r6
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff fd11 	bl	8009518 <_Balloc>
 8009af6:	4602      	mov	r2, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <__mdiff+0x2e>
 8009afa:	f240 2137 	movw	r1, #567	; 0x237
 8009afe:	4b3a      	ldr	r3, [pc, #232]	; (8009be8 <__mdiff+0x110>)
 8009b00:	483a      	ldr	r0, [pc, #232]	; (8009bec <__mdiff+0x114>)
 8009b02:	f000 fc5f 	bl	800a3c4 <__assert_func>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	bfa4      	itt	ge
 8009b14:	4623      	movge	r3, r4
 8009b16:	462c      	movge	r4, r5
 8009b18:	4638      	mov	r0, r7
 8009b1a:	6861      	ldr	r1, [r4, #4]
 8009b1c:	bfa6      	itte	ge
 8009b1e:	461d      	movge	r5, r3
 8009b20:	2600      	movge	r6, #0
 8009b22:	2601      	movlt	r6, #1
 8009b24:	f7ff fcf8 	bl	8009518 <_Balloc>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	b918      	cbnz	r0, 8009b34 <__mdiff+0x5c>
 8009b2c:	f240 2145 	movw	r1, #581	; 0x245
 8009b30:	4b2d      	ldr	r3, [pc, #180]	; (8009be8 <__mdiff+0x110>)
 8009b32:	e7e5      	b.n	8009b00 <__mdiff+0x28>
 8009b34:	f102 0814 	add.w	r8, r2, #20
 8009b38:	46c2      	mov	sl, r8
 8009b3a:	f04f 0c00 	mov.w	ip, #0
 8009b3e:	6927      	ldr	r7, [r4, #16]
 8009b40:	60c6      	str	r6, [r0, #12]
 8009b42:	692e      	ldr	r6, [r5, #16]
 8009b44:	f104 0014 	add.w	r0, r4, #20
 8009b48:	f105 0914 	add.w	r9, r5, #20
 8009b4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009b50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b54:	3410      	adds	r4, #16
 8009b56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009b5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b5e:	fa1f f18b 	uxth.w	r1, fp
 8009b62:	4461      	add	r1, ip
 8009b64:	fa1f fc83 	uxth.w	ip, r3
 8009b68:	0c1b      	lsrs	r3, r3, #16
 8009b6a:	eba1 010c 	sub.w	r1, r1, ip
 8009b6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b72:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b76:	b289      	uxth	r1, r1
 8009b78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009b7c:	454e      	cmp	r6, r9
 8009b7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009b82:	f84a 1b04 	str.w	r1, [sl], #4
 8009b86:	d8e6      	bhi.n	8009b56 <__mdiff+0x7e>
 8009b88:	1b73      	subs	r3, r6, r5
 8009b8a:	3b15      	subs	r3, #21
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	3515      	adds	r5, #21
 8009b92:	3304      	adds	r3, #4
 8009b94:	42ae      	cmp	r6, r5
 8009b96:	bf38      	it	cc
 8009b98:	2304      	movcc	r3, #4
 8009b9a:	4418      	add	r0, r3
 8009b9c:	4443      	add	r3, r8
 8009b9e:	461e      	mov	r6, r3
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	4575      	cmp	r5, lr
 8009ba4:	d30e      	bcc.n	8009bc4 <__mdiff+0xec>
 8009ba6:	f10e 0103 	add.w	r1, lr, #3
 8009baa:	1a09      	subs	r1, r1, r0
 8009bac:	f021 0103 	bic.w	r1, r1, #3
 8009bb0:	3803      	subs	r0, #3
 8009bb2:	4586      	cmp	lr, r0
 8009bb4:	bf38      	it	cc
 8009bb6:	2100      	movcc	r1, #0
 8009bb8:	440b      	add	r3, r1
 8009bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bbe:	b189      	cbz	r1, 8009be4 <__mdiff+0x10c>
 8009bc0:	6117      	str	r7, [r2, #16]
 8009bc2:	e7a3      	b.n	8009b0c <__mdiff+0x34>
 8009bc4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009bc8:	fa1f f188 	uxth.w	r1, r8
 8009bcc:	4461      	add	r1, ip
 8009bce:	140c      	asrs	r4, r1, #16
 8009bd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bd4:	b289      	uxth	r1, r1
 8009bd6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009bda:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009bde:	f846 1b04 	str.w	r1, [r6], #4
 8009be2:	e7de      	b.n	8009ba2 <__mdiff+0xca>
 8009be4:	3f01      	subs	r7, #1
 8009be6:	e7e8      	b.n	8009bba <__mdiff+0xe2>
 8009be8:	0800c64d 	.word	0x0800c64d
 8009bec:	0800c6be 	.word	0x0800c6be

08009bf0 <__ulp>:
 8009bf0:	4b0e      	ldr	r3, [pc, #56]	; (8009c2c <__ulp+0x3c>)
 8009bf2:	400b      	ands	r3, r1
 8009bf4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dc08      	bgt.n	8009c0e <__ulp+0x1e>
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009c02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c06:	da04      	bge.n	8009c12 <__ulp+0x22>
 8009c08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c0c:	4113      	asrs	r3, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	e008      	b.n	8009c24 <__ulp+0x34>
 8009c12:	f1a2 0314 	sub.w	r3, r2, #20
 8009c16:	2b1e      	cmp	r3, #30
 8009c18:	bfd6      	itet	le
 8009c1a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c1e:	2201      	movgt	r2, #1
 8009c20:	40da      	lsrle	r2, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	7ff00000 	.word	0x7ff00000

08009c30 <__b2d>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	6905      	ldr	r5, [r0, #16]
 8009c34:	f100 0714 	add.w	r7, r0, #20
 8009c38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009c3c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c40:	1f2e      	subs	r6, r5, #4
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff fd5a 	bl	80096fc <__hi0bits>
 8009c48:	f1c0 0220 	rsb	r2, r0, #32
 8009c4c:	280a      	cmp	r0, #10
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f8df c068 	ldr.w	ip, [pc, #104]	; 8009cbc <__b2d+0x8c>
 8009c54:	600a      	str	r2, [r1, #0]
 8009c56:	dc12      	bgt.n	8009c7e <__b2d+0x4e>
 8009c58:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c5c:	fa24 f20e 	lsr.w	r2, r4, lr
 8009c60:	42b7      	cmp	r7, r6
 8009c62:	ea42 010c 	orr.w	r1, r2, ip
 8009c66:	bf2c      	ite	cs
 8009c68:	2200      	movcs	r2, #0
 8009c6a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009c6e:	3315      	adds	r3, #21
 8009c70:	fa04 f303 	lsl.w	r3, r4, r3
 8009c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7e:	42b7      	cmp	r7, r6
 8009c80:	bf2e      	itee	cs
 8009c82:	2200      	movcs	r2, #0
 8009c84:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009c88:	f1a5 0608 	subcc.w	r6, r5, #8
 8009c8c:	3b0b      	subs	r3, #11
 8009c8e:	d012      	beq.n	8009cb6 <__b2d+0x86>
 8009c90:	f1c3 0520 	rsb	r5, r3, #32
 8009c94:	fa22 f105 	lsr.w	r1, r2, r5
 8009c98:	409c      	lsls	r4, r3
 8009c9a:	430c      	orrs	r4, r1
 8009c9c:	42be      	cmp	r6, r7
 8009c9e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009ca2:	bf94      	ite	ls
 8009ca4:	2400      	movls	r4, #0
 8009ca6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009caa:	409a      	lsls	r2, r3
 8009cac:	40ec      	lsrs	r4, r5
 8009cae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009cb2:	4322      	orrs	r2, r4
 8009cb4:	e7e1      	b.n	8009c7a <__b2d+0x4a>
 8009cb6:	ea44 010c 	orr.w	r1, r4, ip
 8009cba:	e7de      	b.n	8009c7a <__b2d+0x4a>
 8009cbc:	3ff00000 	.word	0x3ff00000

08009cc0 <__d2b>:
 8009cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	4617      	mov	r7, r2
 8009cc6:	461c      	mov	r4, r3
 8009cc8:	9e08      	ldr	r6, [sp, #32]
 8009cca:	f7ff fc25 	bl	8009518 <_Balloc>
 8009cce:	4605      	mov	r5, r0
 8009cd0:	b930      	cbnz	r0, 8009ce0 <__d2b+0x20>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	f240 310f 	movw	r1, #783	; 0x30f
 8009cd8:	4b22      	ldr	r3, [pc, #136]	; (8009d64 <__d2b+0xa4>)
 8009cda:	4823      	ldr	r0, [pc, #140]	; (8009d68 <__d2b+0xa8>)
 8009cdc:	f000 fb72 	bl	800a3c4 <__assert_func>
 8009ce0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009ce4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009ce8:	bb24      	cbnz	r4, 8009d34 <__d2b+0x74>
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	d026      	beq.n	8009d3e <__d2b+0x7e>
 8009cf0:	4668      	mov	r0, sp
 8009cf2:	9700      	str	r7, [sp, #0]
 8009cf4:	f7ff fd22 	bl	800973c <__lo0bits>
 8009cf8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cfc:	b1e8      	cbz	r0, 8009d3a <__d2b+0x7a>
 8009cfe:	f1c0 0320 	rsb	r3, r0, #32
 8009d02:	fa02 f303 	lsl.w	r3, r2, r3
 8009d06:	430b      	orrs	r3, r1
 8009d08:	40c2      	lsrs	r2, r0
 8009d0a:	616b      	str	r3, [r5, #20]
 8009d0c:	9201      	str	r2, [sp, #4]
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bf14      	ite	ne
 8009d14:	2102      	movne	r1, #2
 8009d16:	2101      	moveq	r1, #1
 8009d18:	61ab      	str	r3, [r5, #24]
 8009d1a:	6129      	str	r1, [r5, #16]
 8009d1c:	b1bc      	cbz	r4, 8009d4e <__d2b+0x8e>
 8009d1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d22:	4404      	add	r4, r0
 8009d24:	6034      	str	r4, [r6, #0]
 8009d26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2c:	6018      	str	r0, [r3, #0]
 8009d2e:	4628      	mov	r0, r5
 8009d30:	b003      	add	sp, #12
 8009d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d38:	e7d7      	b.n	8009cea <__d2b+0x2a>
 8009d3a:	6169      	str	r1, [r5, #20]
 8009d3c:	e7e7      	b.n	8009d0e <__d2b+0x4e>
 8009d3e:	a801      	add	r0, sp, #4
 8009d40:	f7ff fcfc 	bl	800973c <__lo0bits>
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	2101      	movs	r1, #1
 8009d48:	616b      	str	r3, [r5, #20]
 8009d4a:	3020      	adds	r0, #32
 8009d4c:	e7e5      	b.n	8009d1a <__d2b+0x5a>
 8009d4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d52:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009d56:	6030      	str	r0, [r6, #0]
 8009d58:	6918      	ldr	r0, [r3, #16]
 8009d5a:	f7ff fccf 	bl	80096fc <__hi0bits>
 8009d5e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d62:	e7e2      	b.n	8009d2a <__d2b+0x6a>
 8009d64:	0800c64d 	.word	0x0800c64d
 8009d68:	0800c6be 	.word	0x0800c6be

08009d6c <__ratio>:
 8009d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	4688      	mov	r8, r1
 8009d72:	4669      	mov	r1, sp
 8009d74:	4681      	mov	r9, r0
 8009d76:	f7ff ff5b 	bl	8009c30 <__b2d>
 8009d7a:	460f      	mov	r7, r1
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	460d      	mov	r5, r1
 8009d80:	4640      	mov	r0, r8
 8009d82:	a901      	add	r1, sp, #4
 8009d84:	f7ff ff54 	bl	8009c30 <__b2d>
 8009d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d90:	468b      	mov	fp, r1
 8009d92:	eba3 0c02 	sub.w	ip, r3, r2
 8009d96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d9a:	1a9b      	subs	r3, r3, r2
 8009d9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfd5      	itete	le
 8009da4:	460a      	movle	r2, r1
 8009da6:	462a      	movgt	r2, r5
 8009da8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dac:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009db0:	bfd8      	it	le
 8009db2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009db6:	465b      	mov	r3, fp
 8009db8:	4602      	mov	r2, r0
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f7f6 fcb5 	bl	800072c <__aeabi_ddiv>
 8009dc2:	b003      	add	sp, #12
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dc8 <__copybits>:
 8009dc8:	3901      	subs	r1, #1
 8009dca:	b570      	push	{r4, r5, r6, lr}
 8009dcc:	1149      	asrs	r1, r1, #5
 8009dce:	6914      	ldr	r4, [r2, #16]
 8009dd0:	3101      	adds	r1, #1
 8009dd2:	f102 0314 	add.w	r3, r2, #20
 8009dd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009dda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009dde:	1f05      	subs	r5, r0, #4
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	d30c      	bcc.n	8009dfe <__copybits+0x36>
 8009de4:	1aa3      	subs	r3, r4, r2
 8009de6:	3b11      	subs	r3, #17
 8009de8:	f023 0303 	bic.w	r3, r3, #3
 8009dec:	3211      	adds	r2, #17
 8009dee:	42a2      	cmp	r2, r4
 8009df0:	bf88      	it	hi
 8009df2:	2300      	movhi	r3, #0
 8009df4:	4418      	add	r0, r3
 8009df6:	2300      	movs	r3, #0
 8009df8:	4288      	cmp	r0, r1
 8009dfa:	d305      	bcc.n	8009e08 <__copybits+0x40>
 8009dfc:	bd70      	pop	{r4, r5, r6, pc}
 8009dfe:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e02:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e06:	e7eb      	b.n	8009de0 <__copybits+0x18>
 8009e08:	f840 3b04 	str.w	r3, [r0], #4
 8009e0c:	e7f4      	b.n	8009df8 <__copybits+0x30>

08009e0e <__any_on>:
 8009e0e:	f100 0214 	add.w	r2, r0, #20
 8009e12:	6900      	ldr	r0, [r0, #16]
 8009e14:	114b      	asrs	r3, r1, #5
 8009e16:	4298      	cmp	r0, r3
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	db11      	blt.n	8009e40 <__any_on+0x32>
 8009e1c:	dd0a      	ble.n	8009e34 <__any_on+0x26>
 8009e1e:	f011 011f 	ands.w	r1, r1, #31
 8009e22:	d007      	beq.n	8009e34 <__any_on+0x26>
 8009e24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e28:	fa24 f001 	lsr.w	r0, r4, r1
 8009e2c:	fa00 f101 	lsl.w	r1, r0, r1
 8009e30:	428c      	cmp	r4, r1
 8009e32:	d10b      	bne.n	8009e4c <__any_on+0x3e>
 8009e34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d803      	bhi.n	8009e44 <__any_on+0x36>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	bd10      	pop	{r4, pc}
 8009e40:	4603      	mov	r3, r0
 8009e42:	e7f7      	b.n	8009e34 <__any_on+0x26>
 8009e44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	d0f5      	beq.n	8009e38 <__any_on+0x2a>
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	e7f6      	b.n	8009e3e <__any_on+0x30>

08009e50 <_strtol_l.constprop.0>:
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e56:	4686      	mov	lr, r0
 8009e58:	4690      	mov	r8, r2
 8009e5a:	d001      	beq.n	8009e60 <_strtol_l.constprop.0+0x10>
 8009e5c:	2b24      	cmp	r3, #36	; 0x24
 8009e5e:	d906      	bls.n	8009e6e <_strtol_l.constprop.0+0x1e>
 8009e60:	f7fe f82e 	bl	8007ec0 <__errno>
 8009e64:	2316      	movs	r3, #22
 8009e66:	6003      	str	r3, [r0, #0]
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6e:	460d      	mov	r5, r1
 8009e70:	4835      	ldr	r0, [pc, #212]	; (8009f48 <_strtol_l.constprop.0+0xf8>)
 8009e72:	462a      	mov	r2, r5
 8009e74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e78:	5d06      	ldrb	r6, [r0, r4]
 8009e7a:	f016 0608 	ands.w	r6, r6, #8
 8009e7e:	d1f8      	bne.n	8009e72 <_strtol_l.constprop.0+0x22>
 8009e80:	2c2d      	cmp	r4, #45	; 0x2d
 8009e82:	d12e      	bne.n	8009ee2 <_strtol_l.constprop.0+0x92>
 8009e84:	2601      	movs	r6, #1
 8009e86:	782c      	ldrb	r4, [r5, #0]
 8009e88:	1c95      	adds	r5, r2, #2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d057      	beq.n	8009f3e <_strtol_l.constprop.0+0xee>
 8009e8e:	2b10      	cmp	r3, #16
 8009e90:	d109      	bne.n	8009ea6 <_strtol_l.constprop.0+0x56>
 8009e92:	2c30      	cmp	r4, #48	; 0x30
 8009e94:	d107      	bne.n	8009ea6 <_strtol_l.constprop.0+0x56>
 8009e96:	782a      	ldrb	r2, [r5, #0]
 8009e98:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009e9c:	2a58      	cmp	r2, #88	; 0x58
 8009e9e:	d149      	bne.n	8009f34 <_strtol_l.constprop.0+0xe4>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	786c      	ldrb	r4, [r5, #1]
 8009ea4:	3502      	adds	r5, #2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009eac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009eb0:	fbbc f9f3 	udiv	r9, ip, r3
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	fb03 ca19 	mls	sl, r3, r9, ip
 8009eba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009ebe:	2f09      	cmp	r7, #9
 8009ec0:	d814      	bhi.n	8009eec <_strtol_l.constprop.0+0x9c>
 8009ec2:	463c      	mov	r4, r7
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	dd20      	ble.n	8009f0a <_strtol_l.constprop.0+0xba>
 8009ec8:	1c57      	adds	r7, r2, #1
 8009eca:	d007      	beq.n	8009edc <_strtol_l.constprop.0+0x8c>
 8009ecc:	4581      	cmp	r9, r0
 8009ece:	d319      	bcc.n	8009f04 <_strtol_l.constprop.0+0xb4>
 8009ed0:	d101      	bne.n	8009ed6 <_strtol_l.constprop.0+0x86>
 8009ed2:	45a2      	cmp	sl, r4
 8009ed4:	db16      	blt.n	8009f04 <_strtol_l.constprop.0+0xb4>
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	fb00 4003 	mla	r0, r0, r3, r4
 8009edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ee0:	e7eb      	b.n	8009eba <_strtol_l.constprop.0+0x6a>
 8009ee2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ee4:	bf04      	itt	eq
 8009ee6:	782c      	ldrbeq	r4, [r5, #0]
 8009ee8:	1c95      	addeq	r5, r2, #2
 8009eea:	e7ce      	b.n	8009e8a <_strtol_l.constprop.0+0x3a>
 8009eec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009ef0:	2f19      	cmp	r7, #25
 8009ef2:	d801      	bhi.n	8009ef8 <_strtol_l.constprop.0+0xa8>
 8009ef4:	3c37      	subs	r4, #55	; 0x37
 8009ef6:	e7e5      	b.n	8009ec4 <_strtol_l.constprop.0+0x74>
 8009ef8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009efc:	2f19      	cmp	r7, #25
 8009efe:	d804      	bhi.n	8009f0a <_strtol_l.constprop.0+0xba>
 8009f00:	3c57      	subs	r4, #87	; 0x57
 8009f02:	e7df      	b.n	8009ec4 <_strtol_l.constprop.0+0x74>
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	e7e8      	b.n	8009edc <_strtol_l.constprop.0+0x8c>
 8009f0a:	1c53      	adds	r3, r2, #1
 8009f0c:	d108      	bne.n	8009f20 <_strtol_l.constprop.0+0xd0>
 8009f0e:	2322      	movs	r3, #34	; 0x22
 8009f10:	4660      	mov	r0, ip
 8009f12:	f8ce 3000 	str.w	r3, [lr]
 8009f16:	f1b8 0f00 	cmp.w	r8, #0
 8009f1a:	d0a6      	beq.n	8009e6a <_strtol_l.constprop.0+0x1a>
 8009f1c:	1e69      	subs	r1, r5, #1
 8009f1e:	e006      	b.n	8009f2e <_strtol_l.constprop.0+0xde>
 8009f20:	b106      	cbz	r6, 8009f24 <_strtol_l.constprop.0+0xd4>
 8009f22:	4240      	negs	r0, r0
 8009f24:	f1b8 0f00 	cmp.w	r8, #0
 8009f28:	d09f      	beq.n	8009e6a <_strtol_l.constprop.0+0x1a>
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d1f6      	bne.n	8009f1c <_strtol_l.constprop.0+0xcc>
 8009f2e:	f8c8 1000 	str.w	r1, [r8]
 8009f32:	e79a      	b.n	8009e6a <_strtol_l.constprop.0+0x1a>
 8009f34:	2430      	movs	r4, #48	; 0x30
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1b5      	bne.n	8009ea6 <_strtol_l.constprop.0+0x56>
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	e7b3      	b.n	8009ea6 <_strtol_l.constprop.0+0x56>
 8009f3e:	2c30      	cmp	r4, #48	; 0x30
 8009f40:	d0a9      	beq.n	8009e96 <_strtol_l.constprop.0+0x46>
 8009f42:	230a      	movs	r3, #10
 8009f44:	e7af      	b.n	8009ea6 <_strtol_l.constprop.0+0x56>
 8009f46:	bf00      	nop
 8009f48:	0800c815 	.word	0x0800c815

08009f4c <_strtol_r>:
 8009f4c:	f7ff bf80 	b.w	8009e50 <_strtol_l.constprop.0>

08009f50 <__ascii_wctomb>:
 8009f50:	4603      	mov	r3, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	b141      	cbz	r1, 8009f68 <__ascii_wctomb+0x18>
 8009f56:	2aff      	cmp	r2, #255	; 0xff
 8009f58:	d904      	bls.n	8009f64 <__ascii_wctomb+0x14>
 8009f5a:	228a      	movs	r2, #138	; 0x8a
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	4770      	bx	lr
 8009f64:	2001      	movs	r0, #1
 8009f66:	700a      	strb	r2, [r1, #0]
 8009f68:	4770      	bx	lr

08009f6a <__ssputs_r>:
 8009f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6e:	461f      	mov	r7, r3
 8009f70:	688e      	ldr	r6, [r1, #8]
 8009f72:	4682      	mov	sl, r0
 8009f74:	42be      	cmp	r6, r7
 8009f76:	460c      	mov	r4, r1
 8009f78:	4690      	mov	r8, r2
 8009f7a:	680b      	ldr	r3, [r1, #0]
 8009f7c:	d82c      	bhi.n	8009fd8 <__ssputs_r+0x6e>
 8009f7e:	898a      	ldrh	r2, [r1, #12]
 8009f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f84:	d026      	beq.n	8009fd4 <__ssputs_r+0x6a>
 8009f86:	6965      	ldr	r5, [r4, #20]
 8009f88:	6909      	ldr	r1, [r1, #16]
 8009f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f8e:	eba3 0901 	sub.w	r9, r3, r1
 8009f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f96:	1c7b      	adds	r3, r7, #1
 8009f98:	444b      	add	r3, r9
 8009f9a:	106d      	asrs	r5, r5, #1
 8009f9c:	429d      	cmp	r5, r3
 8009f9e:	bf38      	it	cc
 8009fa0:	461d      	movcc	r5, r3
 8009fa2:	0553      	lsls	r3, r2, #21
 8009fa4:	d527      	bpl.n	8009ff6 <__ssputs_r+0x8c>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7ff fa18 	bl	80093dc <_malloc_r>
 8009fac:	4606      	mov	r6, r0
 8009fae:	b360      	cbz	r0, 800a00a <__ssputs_r+0xa0>
 8009fb0:	464a      	mov	r2, r9
 8009fb2:	6921      	ldr	r1, [r4, #16]
 8009fb4:	f7fd ffbf 	bl	8007f36 <memcpy>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	6126      	str	r6, [r4, #16]
 8009fc6:	444e      	add	r6, r9
 8009fc8:	6026      	str	r6, [r4, #0]
 8009fca:	463e      	mov	r6, r7
 8009fcc:	6165      	str	r5, [r4, #20]
 8009fce:	eba5 0509 	sub.w	r5, r5, r9
 8009fd2:	60a5      	str	r5, [r4, #8]
 8009fd4:	42be      	cmp	r6, r7
 8009fd6:	d900      	bls.n	8009fda <__ssputs_r+0x70>
 8009fd8:	463e      	mov	r6, r7
 8009fda:	4632      	mov	r2, r6
 8009fdc:	4641      	mov	r1, r8
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	f000 f9c6 	bl	800a370 <memmove>
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	1b9b      	subs	r3, r3, r6
 8009fea:	60a3      	str	r3, [r4, #8]
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	4433      	add	r3, r6
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff6:	462a      	mov	r2, r5
 8009ff8:	f000 fa16 	bl	800a428 <_realloc_r>
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d1e0      	bne.n	8009fc4 <__ssputs_r+0x5a>
 800a002:	4650      	mov	r0, sl
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	f7fe fe1f 	bl	8008c48 <_free_r>
 800a00a:	230c      	movs	r3, #12
 800a00c:	f8ca 3000 	str.w	r3, [sl]
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	e7e9      	b.n	8009ff2 <__ssputs_r+0x88>
	...

0800a020 <_svfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	4698      	mov	r8, r3
 800a026:	898b      	ldrh	r3, [r1, #12]
 800a028:	4607      	mov	r7, r0
 800a02a:	061b      	lsls	r3, r3, #24
 800a02c:	460d      	mov	r5, r1
 800a02e:	4614      	mov	r4, r2
 800a030:	b09d      	sub	sp, #116	; 0x74
 800a032:	d50e      	bpl.n	800a052 <_svfiprintf_r+0x32>
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	b963      	cbnz	r3, 800a052 <_svfiprintf_r+0x32>
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	f7ff f9cf 	bl	80093dc <_malloc_r>
 800a03e:	6028      	str	r0, [r5, #0]
 800a040:	6128      	str	r0, [r5, #16]
 800a042:	b920      	cbnz	r0, 800a04e <_svfiprintf_r+0x2e>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e0d0      	b.n	800a1f0 <_svfiprintf_r+0x1d0>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	616b      	str	r3, [r5, #20]
 800a052:	2300      	movs	r3, #0
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
 800a056:	2320      	movs	r3, #32
 800a058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05c:	2330      	movs	r3, #48	; 0x30
 800a05e:	f04f 0901 	mov.w	r9, #1
 800a062:	f8cd 800c 	str.w	r8, [sp, #12]
 800a066:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a208 <_svfiprintf_r+0x1e8>
 800a06a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a06e:	4623      	mov	r3, r4
 800a070:	469a      	mov	sl, r3
 800a072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a076:	b10a      	cbz	r2, 800a07c <_svfiprintf_r+0x5c>
 800a078:	2a25      	cmp	r2, #37	; 0x25
 800a07a:	d1f9      	bne.n	800a070 <_svfiprintf_r+0x50>
 800a07c:	ebba 0b04 	subs.w	fp, sl, r4
 800a080:	d00b      	beq.n	800a09a <_svfiprintf_r+0x7a>
 800a082:	465b      	mov	r3, fp
 800a084:	4622      	mov	r2, r4
 800a086:	4629      	mov	r1, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff ff6e 	bl	8009f6a <__ssputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80a9 	beq.w	800a1e6 <_svfiprintf_r+0x1c6>
 800a094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a096:	445a      	add	r2, fp
 800a098:	9209      	str	r2, [sp, #36]	; 0x24
 800a09a:	f89a 3000 	ldrb.w	r3, [sl]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80a1 	beq.w	800a1e6 <_svfiprintf_r+0x1c6>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ae:	f10a 0a01 	add.w	sl, sl, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2205      	movs	r2, #5
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	4850      	ldr	r0, [pc, #320]	; (800a208 <_svfiprintf_r+0x1e8>)
 800a0c6:	f7fd ff28 	bl	8007f1a <memchr>
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	b9d8      	cbnz	r0, 800a106 <_svfiprintf_r+0xe6>
 800a0ce:	06d0      	lsls	r0, r2, #27
 800a0d0:	bf44      	itt	mi
 800a0d2:	2320      	movmi	r3, #32
 800a0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d8:	0711      	lsls	r1, r2, #28
 800a0da:	bf44      	itt	mi
 800a0dc:	232b      	movmi	r3, #43	; 0x2b
 800a0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e8:	d015      	beq.n	800a116 <_svfiprintf_r+0xf6>
 800a0ea:	4654      	mov	r4, sl
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f04f 0c0a 	mov.w	ip, #10
 800a0f2:	9a07      	ldr	r2, [sp, #28]
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fa:	3b30      	subs	r3, #48	; 0x30
 800a0fc:	2b09      	cmp	r3, #9
 800a0fe:	d94d      	bls.n	800a19c <_svfiprintf_r+0x17c>
 800a100:	b1b0      	cbz	r0, 800a130 <_svfiprintf_r+0x110>
 800a102:	9207      	str	r2, [sp, #28]
 800a104:	e014      	b.n	800a130 <_svfiprintf_r+0x110>
 800a106:	eba0 0308 	sub.w	r3, r0, r8
 800a10a:	fa09 f303 	lsl.w	r3, r9, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	46a2      	mov	sl, r4
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	e7d2      	b.n	800a0bc <_svfiprintf_r+0x9c>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9103      	str	r1, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfbb      	ittet	lt
 800a122:	425b      	neglt	r3, r3
 800a124:	f042 0202 	orrlt.w	r2, r2, #2
 800a128:	9307      	strge	r3, [sp, #28]
 800a12a:	9307      	strlt	r3, [sp, #28]
 800a12c:	bfb8      	it	lt
 800a12e:	9204      	strlt	r2, [sp, #16]
 800a130:	7823      	ldrb	r3, [r4, #0]
 800a132:	2b2e      	cmp	r3, #46	; 0x2e
 800a134:	d10c      	bne.n	800a150 <_svfiprintf_r+0x130>
 800a136:	7863      	ldrb	r3, [r4, #1]
 800a138:	2b2a      	cmp	r3, #42	; 0x2a
 800a13a:	d134      	bne.n	800a1a6 <_svfiprintf_r+0x186>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	3402      	adds	r4, #2
 800a140:	1d1a      	adds	r2, r3, #4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	9203      	str	r2, [sp, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	bfb8      	it	lt
 800a14a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a20c <_svfiprintf_r+0x1ec>
 800a154:	2203      	movs	r2, #3
 800a156:	4650      	mov	r0, sl
 800a158:	7821      	ldrb	r1, [r4, #0]
 800a15a:	f7fd fede 	bl	8007f1a <memchr>
 800a15e:	b138      	cbz	r0, 800a170 <_svfiprintf_r+0x150>
 800a160:	2240      	movs	r2, #64	; 0x40
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	eba0 000a 	sub.w	r0, r0, sl
 800a168:	4082      	lsls	r2, r0
 800a16a:	4313      	orrs	r3, r2
 800a16c:	3401      	adds	r4, #1
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	2206      	movs	r2, #6
 800a176:	4826      	ldr	r0, [pc, #152]	; (800a210 <_svfiprintf_r+0x1f0>)
 800a178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17c:	f7fd fecd 	bl	8007f1a <memchr>
 800a180:	2800      	cmp	r0, #0
 800a182:	d038      	beq.n	800a1f6 <_svfiprintf_r+0x1d6>
 800a184:	4b23      	ldr	r3, [pc, #140]	; (800a214 <_svfiprintf_r+0x1f4>)
 800a186:	bb1b      	cbnz	r3, 800a1d0 <_svfiprintf_r+0x1b0>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	f023 0307 	bic.w	r3, r3, #7
 800a190:	3308      	adds	r3, #8
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a196:	4433      	add	r3, r6
 800a198:	9309      	str	r3, [sp, #36]	; 0x24
 800a19a:	e768      	b.n	800a06e <_svfiprintf_r+0x4e>
 800a19c:	460c      	mov	r4, r1
 800a19e:	2001      	movs	r0, #1
 800a1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a4:	e7a6      	b.n	800a0f4 <_svfiprintf_r+0xd4>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f04f 0c0a 	mov.w	ip, #10
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	3401      	adds	r4, #1
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b8:	3a30      	subs	r2, #48	; 0x30
 800a1ba:	2a09      	cmp	r2, #9
 800a1bc:	d903      	bls.n	800a1c6 <_svfiprintf_r+0x1a6>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c6      	beq.n	800a150 <_svfiprintf_r+0x130>
 800a1c2:	9105      	str	r1, [sp, #20]
 800a1c4:	e7c4      	b.n	800a150 <_svfiprintf_r+0x130>
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ce:	e7f0      	b.n	800a1b2 <_svfiprintf_r+0x192>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a1da:	a904      	add	r1, sp, #16
 800a1dc:	f7fc fede 	bl	8006f9c <_printf_float>
 800a1e0:	1c42      	adds	r2, r0, #1
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	d1d6      	bne.n	800a194 <_svfiprintf_r+0x174>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	065b      	lsls	r3, r3, #25
 800a1ea:	f53f af2d 	bmi.w	800a048 <_svfiprintf_r+0x28>
 800a1ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f0:	b01d      	add	sp, #116	; 0x74
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	f7fd f96b 	bl	80074dc <_printf_i>
 800a206:	e7eb      	b.n	800a1e0 <_svfiprintf_r+0x1c0>
 800a208:	0800c915 	.word	0x0800c915
 800a20c:	0800c91b 	.word	0x0800c91b
 800a210:	0800c91f 	.word	0x0800c91f
 800a214:	08006f9d 	.word	0x08006f9d
 800a218:	08009f6b 	.word	0x08009f6b

0800a21c <__sflush_r>:
 800a21c:	898a      	ldrh	r2, [r1, #12]
 800a21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a220:	4605      	mov	r5, r0
 800a222:	0710      	lsls	r0, r2, #28
 800a224:	460c      	mov	r4, r1
 800a226:	d457      	bmi.n	800a2d8 <__sflush_r+0xbc>
 800a228:	684b      	ldr	r3, [r1, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	dc04      	bgt.n	800a238 <__sflush_r+0x1c>
 800a22e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	dc01      	bgt.n	800a238 <__sflush_r+0x1c>
 800a234:	2000      	movs	r0, #0
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	d0fa      	beq.n	800a234 <__sflush_r+0x18>
 800a23e:	2300      	movs	r3, #0
 800a240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a244:	682f      	ldr	r7, [r5, #0]
 800a246:	6a21      	ldr	r1, [r4, #32]
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	d032      	beq.n	800a2b2 <__sflush_r+0x96>
 800a24c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	075a      	lsls	r2, r3, #29
 800a252:	d505      	bpl.n	800a260 <__sflush_r+0x44>
 800a254:	6863      	ldr	r3, [r4, #4]
 800a256:	1ac0      	subs	r0, r0, r3
 800a258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a25a:	b10b      	cbz	r3, 800a260 <__sflush_r+0x44>
 800a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a25e:	1ac0      	subs	r0, r0, r3
 800a260:	2300      	movs	r3, #0
 800a262:	4602      	mov	r2, r0
 800a264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a266:	4628      	mov	r0, r5
 800a268:	6a21      	ldr	r1, [r4, #32]
 800a26a:	47b0      	blx	r6
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	d106      	bne.n	800a280 <__sflush_r+0x64>
 800a272:	6829      	ldr	r1, [r5, #0]
 800a274:	291d      	cmp	r1, #29
 800a276:	d82b      	bhi.n	800a2d0 <__sflush_r+0xb4>
 800a278:	4a28      	ldr	r2, [pc, #160]	; (800a31c <__sflush_r+0x100>)
 800a27a:	410a      	asrs	r2, r1
 800a27c:	07d6      	lsls	r6, r2, #31
 800a27e:	d427      	bmi.n	800a2d0 <__sflush_r+0xb4>
 800a280:	2200      	movs	r2, #0
 800a282:	6062      	str	r2, [r4, #4]
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	04d9      	lsls	r1, r3, #19
 800a288:	6022      	str	r2, [r4, #0]
 800a28a:	d504      	bpl.n	800a296 <__sflush_r+0x7a>
 800a28c:	1c42      	adds	r2, r0, #1
 800a28e:	d101      	bne.n	800a294 <__sflush_r+0x78>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b903      	cbnz	r3, 800a296 <__sflush_r+0x7a>
 800a294:	6560      	str	r0, [r4, #84]	; 0x54
 800a296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a298:	602f      	str	r7, [r5, #0]
 800a29a:	2900      	cmp	r1, #0
 800a29c:	d0ca      	beq.n	800a234 <__sflush_r+0x18>
 800a29e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a2:	4299      	cmp	r1, r3
 800a2a4:	d002      	beq.n	800a2ac <__sflush_r+0x90>
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f7fe fcce 	bl	8008c48 <_free_r>
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	6360      	str	r0, [r4, #52]	; 0x34
 800a2b0:	e7c1      	b.n	800a236 <__sflush_r+0x1a>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b0      	blx	r6
 800a2b8:	1c41      	adds	r1, r0, #1
 800a2ba:	d1c8      	bne.n	800a24e <__sflush_r+0x32>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0c5      	beq.n	800a24e <__sflush_r+0x32>
 800a2c2:	2b1d      	cmp	r3, #29
 800a2c4:	d001      	beq.n	800a2ca <__sflush_r+0xae>
 800a2c6:	2b16      	cmp	r3, #22
 800a2c8:	d101      	bne.n	800a2ce <__sflush_r+0xb2>
 800a2ca:	602f      	str	r7, [r5, #0]
 800a2cc:	e7b2      	b.n	800a234 <__sflush_r+0x18>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	e7ae      	b.n	800a236 <__sflush_r+0x1a>
 800a2d8:	690f      	ldr	r7, [r1, #16]
 800a2da:	2f00      	cmp	r7, #0
 800a2dc:	d0aa      	beq.n	800a234 <__sflush_r+0x18>
 800a2de:	0793      	lsls	r3, r2, #30
 800a2e0:	bf18      	it	ne
 800a2e2:	2300      	movne	r3, #0
 800a2e4:	680e      	ldr	r6, [r1, #0]
 800a2e6:	bf08      	it	eq
 800a2e8:	694b      	ldreq	r3, [r1, #20]
 800a2ea:	1bf6      	subs	r6, r6, r7
 800a2ec:	600f      	str	r7, [r1, #0]
 800a2ee:	608b      	str	r3, [r1, #8]
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	dd9f      	ble.n	800a234 <__sflush_r+0x18>
 800a2f4:	4633      	mov	r3, r6
 800a2f6:	463a      	mov	r2, r7
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	6a21      	ldr	r1, [r4, #32]
 800a2fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a300:	47e0      	blx	ip
 800a302:	2800      	cmp	r0, #0
 800a304:	dc06      	bgt.n	800a314 <__sflush_r+0xf8>
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f04f 30ff 	mov.w	r0, #4294967295
 800a30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a310:	81a3      	strh	r3, [r4, #12]
 800a312:	e790      	b.n	800a236 <__sflush_r+0x1a>
 800a314:	4407      	add	r7, r0
 800a316:	1a36      	subs	r6, r6, r0
 800a318:	e7ea      	b.n	800a2f0 <__sflush_r+0xd4>
 800a31a:	bf00      	nop
 800a31c:	dfbffffe 	.word	0xdfbffffe

0800a320 <_fflush_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	690b      	ldr	r3, [r1, #16]
 800a324:	4605      	mov	r5, r0
 800a326:	460c      	mov	r4, r1
 800a328:	b913      	cbnz	r3, 800a330 <_fflush_r+0x10>
 800a32a:	2500      	movs	r5, #0
 800a32c:	4628      	mov	r0, r5
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	b118      	cbz	r0, 800a33a <_fflush_r+0x1a>
 800a332:	6a03      	ldr	r3, [r0, #32]
 800a334:	b90b      	cbnz	r3, 800a33a <_fflush_r+0x1a>
 800a336:	f7fd fc8d 	bl	8007c54 <__sinit>
 800a33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0f3      	beq.n	800a32a <_fflush_r+0xa>
 800a342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a344:	07d0      	lsls	r0, r2, #31
 800a346:	d404      	bmi.n	800a352 <_fflush_r+0x32>
 800a348:	0599      	lsls	r1, r3, #22
 800a34a:	d402      	bmi.n	800a352 <_fflush_r+0x32>
 800a34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34e:	f7fd fde2 	bl	8007f16 <__retarget_lock_acquire_recursive>
 800a352:	4628      	mov	r0, r5
 800a354:	4621      	mov	r1, r4
 800a356:	f7ff ff61 	bl	800a21c <__sflush_r>
 800a35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a35c:	4605      	mov	r5, r0
 800a35e:	07da      	lsls	r2, r3, #31
 800a360:	d4e4      	bmi.n	800a32c <_fflush_r+0xc>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	059b      	lsls	r3, r3, #22
 800a366:	d4e1      	bmi.n	800a32c <_fflush_r+0xc>
 800a368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a36a:	f7fd fdd5 	bl	8007f18 <__retarget_lock_release_recursive>
 800a36e:	e7dd      	b.n	800a32c <_fflush_r+0xc>

0800a370 <memmove>:
 800a370:	4288      	cmp	r0, r1
 800a372:	b510      	push	{r4, lr}
 800a374:	eb01 0402 	add.w	r4, r1, r2
 800a378:	d902      	bls.n	800a380 <memmove+0x10>
 800a37a:	4284      	cmp	r4, r0
 800a37c:	4623      	mov	r3, r4
 800a37e:	d807      	bhi.n	800a390 <memmove+0x20>
 800a380:	1e43      	subs	r3, r0, #1
 800a382:	42a1      	cmp	r1, r4
 800a384:	d008      	beq.n	800a398 <memmove+0x28>
 800a386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a38a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a38e:	e7f8      	b.n	800a382 <memmove+0x12>
 800a390:	4601      	mov	r1, r0
 800a392:	4402      	add	r2, r0
 800a394:	428a      	cmp	r2, r1
 800a396:	d100      	bne.n	800a39a <memmove+0x2a>
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a39e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3a2:	e7f7      	b.n	800a394 <memmove+0x24>

0800a3a4 <_sbrk_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	4d05      	ldr	r5, [pc, #20]	; (800a3c0 <_sbrk_r+0x1c>)
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	f7f8 fc0e 	bl	8002bd0 <_sbrk>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_sbrk_r+0x1a>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_sbrk_r+0x1a>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	2000093c 	.word	0x2000093c

0800a3c4 <__assert_func>:
 800a3c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3c6:	4614      	mov	r4, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <__assert_func+0x2c>)
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68d8      	ldr	r0, [r3, #12]
 800a3d2:	b14c      	cbz	r4, 800a3e8 <__assert_func+0x24>
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <__assert_func+0x30>)
 800a3d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3da:	9100      	str	r1, [sp, #0]
 800a3dc:	462b      	mov	r3, r5
 800a3de:	4906      	ldr	r1, [pc, #24]	; (800a3f8 <__assert_func+0x34>)
 800a3e0:	f000 f852 	bl	800a488 <fiprintf>
 800a3e4:	f000 f862 	bl	800a4ac <abort>
 800a3e8:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <__assert_func+0x38>)
 800a3ea:	461c      	mov	r4, r3
 800a3ec:	e7f3      	b.n	800a3d6 <__assert_func+0x12>
 800a3ee:	bf00      	nop
 800a3f0:	200001dc 	.word	0x200001dc
 800a3f4:	0800c926 	.word	0x0800c926
 800a3f8:	0800c933 	.word	0x0800c933
 800a3fc:	0800c961 	.word	0x0800c961

0800a400 <_calloc_r>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	fba1 5402 	umull	r5, r4, r1, r2
 800a406:	b934      	cbnz	r4, 800a416 <_calloc_r+0x16>
 800a408:	4629      	mov	r1, r5
 800a40a:	f7fe ffe7 	bl	80093dc <_malloc_r>
 800a40e:	4606      	mov	r6, r0
 800a410:	b928      	cbnz	r0, 800a41e <_calloc_r+0x1e>
 800a412:	4630      	mov	r0, r6
 800a414:	bd70      	pop	{r4, r5, r6, pc}
 800a416:	220c      	movs	r2, #12
 800a418:	2600      	movs	r6, #0
 800a41a:	6002      	str	r2, [r0, #0]
 800a41c:	e7f9      	b.n	800a412 <_calloc_r+0x12>
 800a41e:	462a      	mov	r2, r5
 800a420:	4621      	mov	r1, r4
 800a422:	f7fd fcb0 	bl	8007d86 <memset>
 800a426:	e7f4      	b.n	800a412 <_calloc_r+0x12>

0800a428 <_realloc_r>:
 800a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	4680      	mov	r8, r0
 800a42e:	4614      	mov	r4, r2
 800a430:	460e      	mov	r6, r1
 800a432:	b921      	cbnz	r1, 800a43e <_realloc_r+0x16>
 800a434:	4611      	mov	r1, r2
 800a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	f7fe bfcf 	b.w	80093dc <_malloc_r>
 800a43e:	b92a      	cbnz	r2, 800a44c <_realloc_r+0x24>
 800a440:	f7fe fc02 	bl	8008c48 <_free_r>
 800a444:	4625      	mov	r5, r4
 800a446:	4628      	mov	r0, r5
 800a448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a44c:	f000 f835 	bl	800a4ba <_malloc_usable_size_r>
 800a450:	4284      	cmp	r4, r0
 800a452:	4607      	mov	r7, r0
 800a454:	d802      	bhi.n	800a45c <_realloc_r+0x34>
 800a456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a45a:	d812      	bhi.n	800a482 <_realloc_r+0x5a>
 800a45c:	4621      	mov	r1, r4
 800a45e:	4640      	mov	r0, r8
 800a460:	f7fe ffbc 	bl	80093dc <_malloc_r>
 800a464:	4605      	mov	r5, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d0ed      	beq.n	800a446 <_realloc_r+0x1e>
 800a46a:	42bc      	cmp	r4, r7
 800a46c:	4622      	mov	r2, r4
 800a46e:	4631      	mov	r1, r6
 800a470:	bf28      	it	cs
 800a472:	463a      	movcs	r2, r7
 800a474:	f7fd fd5f 	bl	8007f36 <memcpy>
 800a478:	4631      	mov	r1, r6
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7fe fbe4 	bl	8008c48 <_free_r>
 800a480:	e7e1      	b.n	800a446 <_realloc_r+0x1e>
 800a482:	4635      	mov	r5, r6
 800a484:	e7df      	b.n	800a446 <_realloc_r+0x1e>
	...

0800a488 <fiprintf>:
 800a488:	b40e      	push	{r1, r2, r3}
 800a48a:	b503      	push	{r0, r1, lr}
 800a48c:	4601      	mov	r1, r0
 800a48e:	ab03      	add	r3, sp, #12
 800a490:	4805      	ldr	r0, [pc, #20]	; (800a4a8 <fiprintf+0x20>)
 800a492:	f853 2b04 	ldr.w	r2, [r3], #4
 800a496:	6800      	ldr	r0, [r0, #0]
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	f000 f83d 	bl	800a518 <_vfiprintf_r>
 800a49e:	b002      	add	sp, #8
 800a4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4a4:	b003      	add	sp, #12
 800a4a6:	4770      	bx	lr
 800a4a8:	200001dc 	.word	0x200001dc

0800a4ac <abort>:
 800a4ac:	2006      	movs	r0, #6
 800a4ae:	b508      	push	{r3, lr}
 800a4b0:	f000 fa0a 	bl	800a8c8 <raise>
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	f7f8 fb18 	bl	8002aea <_exit>

0800a4ba <_malloc_usable_size_r>:
 800a4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4be:	1f18      	subs	r0, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bfbc      	itt	lt
 800a4c4:	580b      	ldrlt	r3, [r1, r0]
 800a4c6:	18c0      	addlt	r0, r0, r3
 800a4c8:	4770      	bx	lr

0800a4ca <__sfputc_r>:
 800a4ca:	6893      	ldr	r3, [r2, #8]
 800a4cc:	b410      	push	{r4}
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	6093      	str	r3, [r2, #8]
 800a4d4:	da07      	bge.n	800a4e6 <__sfputc_r+0x1c>
 800a4d6:	6994      	ldr	r4, [r2, #24]
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	db01      	blt.n	800a4e0 <__sfputc_r+0x16>
 800a4dc:	290a      	cmp	r1, #10
 800a4de:	d102      	bne.n	800a4e6 <__sfputc_r+0x1c>
 800a4e0:	bc10      	pop	{r4}
 800a4e2:	f000 b933 	b.w	800a74c <__swbuf_r>
 800a4e6:	6813      	ldr	r3, [r2, #0]
 800a4e8:	1c58      	adds	r0, r3, #1
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	7019      	strb	r1, [r3, #0]
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	bc10      	pop	{r4}
 800a4f2:	4770      	bx	lr

0800a4f4 <__sfputs_r>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	18d5      	adds	r5, r2, r3
 800a4fe:	42ac      	cmp	r4, r5
 800a500:	d101      	bne.n	800a506 <__sfputs_r+0x12>
 800a502:	2000      	movs	r0, #0
 800a504:	e007      	b.n	800a516 <__sfputs_r+0x22>
 800a506:	463a      	mov	r2, r7
 800a508:	4630      	mov	r0, r6
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	f7ff ffdc 	bl	800a4ca <__sfputc_r>
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	d1f3      	bne.n	800a4fe <__sfputs_r+0xa>
 800a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a518 <_vfiprintf_r>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	460d      	mov	r5, r1
 800a51e:	4614      	mov	r4, r2
 800a520:	4698      	mov	r8, r3
 800a522:	4606      	mov	r6, r0
 800a524:	b09d      	sub	sp, #116	; 0x74
 800a526:	b118      	cbz	r0, 800a530 <_vfiprintf_r+0x18>
 800a528:	6a03      	ldr	r3, [r0, #32]
 800a52a:	b90b      	cbnz	r3, 800a530 <_vfiprintf_r+0x18>
 800a52c:	f7fd fb92 	bl	8007c54 <__sinit>
 800a530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a532:	07d9      	lsls	r1, r3, #31
 800a534:	d405      	bmi.n	800a542 <_vfiprintf_r+0x2a>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	059a      	lsls	r2, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_vfiprintf_r+0x2a>
 800a53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a53e:	f7fd fcea 	bl	8007f16 <__retarget_lock_acquire_recursive>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	071b      	lsls	r3, r3, #28
 800a546:	d501      	bpl.n	800a54c <_vfiprintf_r+0x34>
 800a548:	692b      	ldr	r3, [r5, #16]
 800a54a:	b99b      	cbnz	r3, 800a574 <_vfiprintf_r+0x5c>
 800a54c:	4629      	mov	r1, r5
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 f93a 	bl	800a7c8 <__swsetup_r>
 800a554:	b170      	cbz	r0, 800a574 <_vfiprintf_r+0x5c>
 800a556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a558:	07dc      	lsls	r4, r3, #31
 800a55a:	d504      	bpl.n	800a566 <_vfiprintf_r+0x4e>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b01d      	add	sp, #116	; 0x74
 800a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a566:	89ab      	ldrh	r3, [r5, #12]
 800a568:	0598      	lsls	r0, r3, #22
 800a56a:	d4f7      	bmi.n	800a55c <_vfiprintf_r+0x44>
 800a56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a56e:	f7fd fcd3 	bl	8007f18 <__retarget_lock_release_recursive>
 800a572:	e7f3      	b.n	800a55c <_vfiprintf_r+0x44>
 800a574:	2300      	movs	r3, #0
 800a576:	9309      	str	r3, [sp, #36]	; 0x24
 800a578:	2320      	movs	r3, #32
 800a57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a57e:	2330      	movs	r3, #48	; 0x30
 800a580:	f04f 0901 	mov.w	r9, #1
 800a584:	f8cd 800c 	str.w	r8, [sp, #12]
 800a588:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a738 <_vfiprintf_r+0x220>
 800a58c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a590:	4623      	mov	r3, r4
 800a592:	469a      	mov	sl, r3
 800a594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a598:	b10a      	cbz	r2, 800a59e <_vfiprintf_r+0x86>
 800a59a:	2a25      	cmp	r2, #37	; 0x25
 800a59c:	d1f9      	bne.n	800a592 <_vfiprintf_r+0x7a>
 800a59e:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a2:	d00b      	beq.n	800a5bc <_vfiprintf_r+0xa4>
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ffa2 	bl	800a4f4 <__sfputs_r>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f000 80a9 	beq.w	800a708 <_vfiprintf_r+0x1f0>
 800a5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5b8:	445a      	add	r2, fp
 800a5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 80a1 	beq.w	800a708 <_vfiprintf_r+0x1f0>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d0:	f10a 0a01 	add.w	sl, sl, #1
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	9307      	str	r3, [sp, #28]
 800a5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a5de:	4654      	mov	r4, sl
 800a5e0:	2205      	movs	r2, #5
 800a5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e6:	4854      	ldr	r0, [pc, #336]	; (800a738 <_vfiprintf_r+0x220>)
 800a5e8:	f7fd fc97 	bl	8007f1a <memchr>
 800a5ec:	9a04      	ldr	r2, [sp, #16]
 800a5ee:	b9d8      	cbnz	r0, 800a628 <_vfiprintf_r+0x110>
 800a5f0:	06d1      	lsls	r1, r2, #27
 800a5f2:	bf44      	itt	mi
 800a5f4:	2320      	movmi	r3, #32
 800a5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5fa:	0713      	lsls	r3, r2, #28
 800a5fc:	bf44      	itt	mi
 800a5fe:	232b      	movmi	r3, #43	; 0x2b
 800a600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a604:	f89a 3000 	ldrb.w	r3, [sl]
 800a608:	2b2a      	cmp	r3, #42	; 0x2a
 800a60a:	d015      	beq.n	800a638 <_vfiprintf_r+0x120>
 800a60c:	4654      	mov	r4, sl
 800a60e:	2000      	movs	r0, #0
 800a610:	f04f 0c0a 	mov.w	ip, #10
 800a614:	9a07      	ldr	r2, [sp, #28]
 800a616:	4621      	mov	r1, r4
 800a618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a61c:	3b30      	subs	r3, #48	; 0x30
 800a61e:	2b09      	cmp	r3, #9
 800a620:	d94d      	bls.n	800a6be <_vfiprintf_r+0x1a6>
 800a622:	b1b0      	cbz	r0, 800a652 <_vfiprintf_r+0x13a>
 800a624:	9207      	str	r2, [sp, #28]
 800a626:	e014      	b.n	800a652 <_vfiprintf_r+0x13a>
 800a628:	eba0 0308 	sub.w	r3, r0, r8
 800a62c:	fa09 f303 	lsl.w	r3, r9, r3
 800a630:	4313      	orrs	r3, r2
 800a632:	46a2      	mov	sl, r4
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	e7d2      	b.n	800a5de <_vfiprintf_r+0xc6>
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	1d19      	adds	r1, r3, #4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	9103      	str	r1, [sp, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfbb      	ittet	lt
 800a644:	425b      	neglt	r3, r3
 800a646:	f042 0202 	orrlt.w	r2, r2, #2
 800a64a:	9307      	strge	r3, [sp, #28]
 800a64c:	9307      	strlt	r3, [sp, #28]
 800a64e:	bfb8      	it	lt
 800a650:	9204      	strlt	r2, [sp, #16]
 800a652:	7823      	ldrb	r3, [r4, #0]
 800a654:	2b2e      	cmp	r3, #46	; 0x2e
 800a656:	d10c      	bne.n	800a672 <_vfiprintf_r+0x15a>
 800a658:	7863      	ldrb	r3, [r4, #1]
 800a65a:	2b2a      	cmp	r3, #42	; 0x2a
 800a65c:	d134      	bne.n	800a6c8 <_vfiprintf_r+0x1b0>
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	3402      	adds	r4, #2
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	9203      	str	r2, [sp, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bfb8      	it	lt
 800a66c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a670:	9305      	str	r3, [sp, #20]
 800a672:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a73c <_vfiprintf_r+0x224>
 800a676:	2203      	movs	r2, #3
 800a678:	4650      	mov	r0, sl
 800a67a:	7821      	ldrb	r1, [r4, #0]
 800a67c:	f7fd fc4d 	bl	8007f1a <memchr>
 800a680:	b138      	cbz	r0, 800a692 <_vfiprintf_r+0x17a>
 800a682:	2240      	movs	r2, #64	; 0x40
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	eba0 000a 	sub.w	r0, r0, sl
 800a68a:	4082      	lsls	r2, r0
 800a68c:	4313      	orrs	r3, r2
 800a68e:	3401      	adds	r4, #1
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a696:	2206      	movs	r2, #6
 800a698:	4829      	ldr	r0, [pc, #164]	; (800a740 <_vfiprintf_r+0x228>)
 800a69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a69e:	f7fd fc3c 	bl	8007f1a <memchr>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d03f      	beq.n	800a726 <_vfiprintf_r+0x20e>
 800a6a6:	4b27      	ldr	r3, [pc, #156]	; (800a744 <_vfiprintf_r+0x22c>)
 800a6a8:	bb1b      	cbnz	r3, 800a6f2 <_vfiprintf_r+0x1da>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	3307      	adds	r3, #7
 800a6ae:	f023 0307 	bic.w	r3, r3, #7
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	9303      	str	r3, [sp, #12]
 800a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b8:	443b      	add	r3, r7
 800a6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a6bc:	e768      	b.n	800a590 <_vfiprintf_r+0x78>
 800a6be:	460c      	mov	r4, r1
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6c6:	e7a6      	b.n	800a616 <_vfiprintf_r+0xfe>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f04f 0c0a 	mov.w	ip, #10
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	3401      	adds	r4, #1
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6da:	3a30      	subs	r2, #48	; 0x30
 800a6dc:	2a09      	cmp	r2, #9
 800a6de:	d903      	bls.n	800a6e8 <_vfiprintf_r+0x1d0>
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0c6      	beq.n	800a672 <_vfiprintf_r+0x15a>
 800a6e4:	9105      	str	r1, [sp, #20]
 800a6e6:	e7c4      	b.n	800a672 <_vfiprintf_r+0x15a>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f0:	e7f0      	b.n	800a6d4 <_vfiprintf_r+0x1bc>
 800a6f2:	ab03      	add	r3, sp, #12
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4b13      	ldr	r3, [pc, #76]	; (800a748 <_vfiprintf_r+0x230>)
 800a6fc:	a904      	add	r1, sp, #16
 800a6fe:	f7fc fc4d 	bl	8006f9c <_printf_float>
 800a702:	4607      	mov	r7, r0
 800a704:	1c78      	adds	r0, r7, #1
 800a706:	d1d6      	bne.n	800a6b6 <_vfiprintf_r+0x19e>
 800a708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a70a:	07d9      	lsls	r1, r3, #31
 800a70c:	d405      	bmi.n	800a71a <_vfiprintf_r+0x202>
 800a70e:	89ab      	ldrh	r3, [r5, #12]
 800a710:	059a      	lsls	r2, r3, #22
 800a712:	d402      	bmi.n	800a71a <_vfiprintf_r+0x202>
 800a714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a716:	f7fd fbff 	bl	8007f18 <__retarget_lock_release_recursive>
 800a71a:	89ab      	ldrh	r3, [r5, #12]
 800a71c:	065b      	lsls	r3, r3, #25
 800a71e:	f53f af1d 	bmi.w	800a55c <_vfiprintf_r+0x44>
 800a722:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a724:	e71c      	b.n	800a560 <_vfiprintf_r+0x48>
 800a726:	ab03      	add	r3, sp, #12
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	462a      	mov	r2, r5
 800a72c:	4630      	mov	r0, r6
 800a72e:	4b06      	ldr	r3, [pc, #24]	; (800a748 <_vfiprintf_r+0x230>)
 800a730:	a904      	add	r1, sp, #16
 800a732:	f7fc fed3 	bl	80074dc <_printf_i>
 800a736:	e7e4      	b.n	800a702 <_vfiprintf_r+0x1ea>
 800a738:	0800c915 	.word	0x0800c915
 800a73c:	0800c91b 	.word	0x0800c91b
 800a740:	0800c91f 	.word	0x0800c91f
 800a744:	08006f9d 	.word	0x08006f9d
 800a748:	0800a4f5 	.word	0x0800a4f5

0800a74c <__swbuf_r>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	460e      	mov	r6, r1
 800a750:	4614      	mov	r4, r2
 800a752:	4605      	mov	r5, r0
 800a754:	b118      	cbz	r0, 800a75e <__swbuf_r+0x12>
 800a756:	6a03      	ldr	r3, [r0, #32]
 800a758:	b90b      	cbnz	r3, 800a75e <__swbuf_r+0x12>
 800a75a:	f7fd fa7b 	bl	8007c54 <__sinit>
 800a75e:	69a3      	ldr	r3, [r4, #24]
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	071a      	lsls	r2, r3, #28
 800a766:	d525      	bpl.n	800a7b4 <__swbuf_r+0x68>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	b31b      	cbz	r3, 800a7b4 <__swbuf_r+0x68>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	6922      	ldr	r2, [r4, #16]
 800a770:	b2f6      	uxtb	r6, r6
 800a772:	1a98      	subs	r0, r3, r2
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	4637      	mov	r7, r6
 800a778:	4283      	cmp	r3, r0
 800a77a:	dc04      	bgt.n	800a786 <__swbuf_r+0x3a>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	f7ff fdce 	bl	800a320 <_fflush_r>
 800a784:	b9e0      	cbnz	r0, 800a7c0 <__swbuf_r+0x74>
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	3b01      	subs	r3, #1
 800a78a:	60a3      	str	r3, [r4, #8]
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	6022      	str	r2, [r4, #0]
 800a792:	701e      	strb	r6, [r3, #0]
 800a794:	6962      	ldr	r2, [r4, #20]
 800a796:	1c43      	adds	r3, r0, #1
 800a798:	429a      	cmp	r2, r3
 800a79a:	d004      	beq.n	800a7a6 <__swbuf_r+0x5a>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	07db      	lsls	r3, r3, #31
 800a7a0:	d506      	bpl.n	800a7b0 <__swbuf_r+0x64>
 800a7a2:	2e0a      	cmp	r6, #10
 800a7a4:	d104      	bne.n	800a7b0 <__swbuf_r+0x64>
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f7ff fdb9 	bl	800a320 <_fflush_r>
 800a7ae:	b938      	cbnz	r0, 800a7c0 <__swbuf_r+0x74>
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f806 	bl	800a7c8 <__swsetup_r>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d0d5      	beq.n	800a76c <__swbuf_r+0x20>
 800a7c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a7c4:	e7f4      	b.n	800a7b0 <__swbuf_r+0x64>
	...

0800a7c8 <__swsetup_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4b2a      	ldr	r3, [pc, #168]	; (800a874 <__swsetup_r+0xac>)
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	b118      	cbz	r0, 800a7dc <__swsetup_r+0x14>
 800a7d4:	6a03      	ldr	r3, [r0, #32]
 800a7d6:	b90b      	cbnz	r3, 800a7dc <__swsetup_r+0x14>
 800a7d8:	f7fd fa3c 	bl	8007c54 <__sinit>
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7e2:	0718      	lsls	r0, r3, #28
 800a7e4:	d422      	bmi.n	800a82c <__swsetup_r+0x64>
 800a7e6:	06d9      	lsls	r1, r3, #27
 800a7e8:	d407      	bmi.n	800a7fa <__swsetup_r+0x32>
 800a7ea:	2309      	movs	r3, #9
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	e034      	b.n	800a864 <__swsetup_r+0x9c>
 800a7fa:	0758      	lsls	r0, r3, #29
 800a7fc:	d512      	bpl.n	800a824 <__swsetup_r+0x5c>
 800a7fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a800:	b141      	cbz	r1, 800a814 <__swsetup_r+0x4c>
 800a802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a806:	4299      	cmp	r1, r3
 800a808:	d002      	beq.n	800a810 <__swsetup_r+0x48>
 800a80a:	4628      	mov	r0, r5
 800a80c:	f7fe fa1c 	bl	8008c48 <_free_r>
 800a810:	2300      	movs	r3, #0
 800a812:	6363      	str	r3, [r4, #52]	; 0x34
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	2300      	movs	r3, #0
 800a81e:	6063      	str	r3, [r4, #4]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f043 0308 	orr.w	r3, r3, #8
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	b94b      	cbnz	r3, 800a844 <__swsetup_r+0x7c>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a83a:	d003      	beq.n	800a844 <__swsetup_r+0x7c>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 f883 	bl	800a94a <__smakebuf_r>
 800a844:	89a0      	ldrh	r0, [r4, #12]
 800a846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a84a:	f010 0301 	ands.w	r3, r0, #1
 800a84e:	d00a      	beq.n	800a866 <__swsetup_r+0x9e>
 800a850:	2300      	movs	r3, #0
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	6963      	ldr	r3, [r4, #20]
 800a856:	425b      	negs	r3, r3
 800a858:	61a3      	str	r3, [r4, #24]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	b943      	cbnz	r3, 800a870 <__swsetup_r+0xa8>
 800a85e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a862:	d1c4      	bne.n	800a7ee <__swsetup_r+0x26>
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	0781      	lsls	r1, r0, #30
 800a868:	bf58      	it	pl
 800a86a:	6963      	ldrpl	r3, [r4, #20]
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	e7f4      	b.n	800a85a <__swsetup_r+0x92>
 800a870:	2000      	movs	r0, #0
 800a872:	e7f7      	b.n	800a864 <__swsetup_r+0x9c>
 800a874:	200001dc 	.word	0x200001dc

0800a878 <_raise_r>:
 800a878:	291f      	cmp	r1, #31
 800a87a:	b538      	push	{r3, r4, r5, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	460d      	mov	r5, r1
 800a880:	d904      	bls.n	800a88c <_raise_r+0x14>
 800a882:	2316      	movs	r3, #22
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a88e:	b112      	cbz	r2, 800a896 <_raise_r+0x1e>
 800a890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a894:	b94b      	cbnz	r3, 800a8aa <_raise_r+0x32>
 800a896:	4620      	mov	r0, r4
 800a898:	f000 f830 	bl	800a8fc <_getpid_r>
 800a89c:	462a      	mov	r2, r5
 800a89e:	4601      	mov	r1, r0
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a6:	f000 b817 	b.w	800a8d8 <_kill_r>
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d00a      	beq.n	800a8c4 <_raise_r+0x4c>
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	d103      	bne.n	800a8ba <_raise_r+0x42>
 800a8b2:	2316      	movs	r3, #22
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e7e7      	b.n	800a88a <_raise_r+0x12>
 800a8ba:	2400      	movs	r4, #0
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8c2:	4798      	blx	r3
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e7e0      	b.n	800a88a <_raise_r+0x12>

0800a8c8 <raise>:
 800a8c8:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <raise+0xc>)
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	f7ff bfd3 	b.w	800a878 <_raise_r>
 800a8d2:	bf00      	nop
 800a8d4:	200001dc 	.word	0x200001dc

0800a8d8 <_kill_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4d06      	ldr	r5, [pc, #24]	; (800a8f8 <_kill_r+0x20>)
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	f7f8 f8f0 	bl	8002aca <_kill>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d102      	bne.n	800a8f4 <_kill_r+0x1c>
 800a8ee:	682b      	ldr	r3, [r5, #0]
 800a8f0:	b103      	cbz	r3, 800a8f4 <_kill_r+0x1c>
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000093c 	.word	0x2000093c

0800a8fc <_getpid_r>:
 800a8fc:	f7f8 b8de 	b.w	8002abc <_getpid>

0800a900 <__swhatbuf_r>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	460c      	mov	r4, r1
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	4615      	mov	r5, r2
 800a90a:	2900      	cmp	r1, #0
 800a90c:	461e      	mov	r6, r3
 800a90e:	b096      	sub	sp, #88	; 0x58
 800a910:	da0c      	bge.n	800a92c <__swhatbuf_r+0x2c>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	2100      	movs	r1, #0
 800a916:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a91a:	bf0c      	ite	eq
 800a91c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a920:	2340      	movne	r3, #64	; 0x40
 800a922:	2000      	movs	r0, #0
 800a924:	6031      	str	r1, [r6, #0]
 800a926:	602b      	str	r3, [r5, #0]
 800a928:	b016      	add	sp, #88	; 0x58
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	466a      	mov	r2, sp
 800a92e:	f000 f849 	bl	800a9c4 <_fstat_r>
 800a932:	2800      	cmp	r0, #0
 800a934:	dbed      	blt.n	800a912 <__swhatbuf_r+0x12>
 800a936:	9901      	ldr	r1, [sp, #4]
 800a938:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a93c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a940:	4259      	negs	r1, r3
 800a942:	4159      	adcs	r1, r3
 800a944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a948:	e7eb      	b.n	800a922 <__swhatbuf_r+0x22>

0800a94a <__smakebuf_r>:
 800a94a:	898b      	ldrh	r3, [r1, #12]
 800a94c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a94e:	079d      	lsls	r5, r3, #30
 800a950:	4606      	mov	r6, r0
 800a952:	460c      	mov	r4, r1
 800a954:	d507      	bpl.n	800a966 <__smakebuf_r+0x1c>
 800a956:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	2301      	movs	r3, #1
 800a960:	6163      	str	r3, [r4, #20]
 800a962:	b002      	add	sp, #8
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	466a      	mov	r2, sp
 800a968:	ab01      	add	r3, sp, #4
 800a96a:	f7ff ffc9 	bl	800a900 <__swhatbuf_r>
 800a96e:	9900      	ldr	r1, [sp, #0]
 800a970:	4605      	mov	r5, r0
 800a972:	4630      	mov	r0, r6
 800a974:	f7fe fd32 	bl	80093dc <_malloc_r>
 800a978:	b948      	cbnz	r0, 800a98e <__smakebuf_r+0x44>
 800a97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97e:	059a      	lsls	r2, r3, #22
 800a980:	d4ef      	bmi.n	800a962 <__smakebuf_r+0x18>
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	f043 0302 	orr.w	r3, r3, #2
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	e7e3      	b.n	800a956 <__smakebuf_r+0xc>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	6020      	str	r0, [r4, #0]
 800a992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	9b00      	ldr	r3, [sp, #0]
 800a99a:	6120      	str	r0, [r4, #16]
 800a99c:	6163      	str	r3, [r4, #20]
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	b15b      	cbz	r3, 800a9ba <__smakebuf_r+0x70>
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a8:	f000 f81e 	bl	800a9e8 <_isatty_r>
 800a9ac:	b128      	cbz	r0, 800a9ba <__smakebuf_r+0x70>
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	f023 0303 	bic.w	r3, r3, #3
 800a9b4:	f043 0301 	orr.w	r3, r3, #1
 800a9b8:	81a3      	strh	r3, [r4, #12]
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	431d      	orrs	r5, r3
 800a9be:	81a5      	strh	r5, [r4, #12]
 800a9c0:	e7cf      	b.n	800a962 <__smakebuf_r+0x18>
	...

0800a9c4 <_fstat_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4d06      	ldr	r5, [pc, #24]	; (800a9e4 <_fstat_r+0x20>)
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	f7f8 f8d8 	bl	8002b86 <_fstat>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d102      	bne.n	800a9e0 <_fstat_r+0x1c>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	b103      	cbz	r3, 800a9e0 <_fstat_r+0x1c>
 800a9de:	6023      	str	r3, [r4, #0]
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}
 800a9e2:	bf00      	nop
 800a9e4:	2000093c 	.word	0x2000093c

0800a9e8 <_isatty_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4d05      	ldr	r5, [pc, #20]	; (800aa04 <_isatty_r+0x1c>)
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4608      	mov	r0, r1
 800a9f2:	602b      	str	r3, [r5, #0]
 800a9f4:	f7f8 f8d6 	bl	8002ba4 <_isatty>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_isatty_r+0x1a>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_isatty_r+0x1a>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	2000093c 	.word	0x2000093c

0800aa08 <log10>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	f000 f89b 	bl	800ab48 <__ieee754_log10>
 800aa12:	4622      	mov	r2, r4
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	462b      	mov	r3, r5
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7f5 fff5 	bl	8000a0c <__aeabi_dcmpun>
 800aa22:	b998      	cbnz	r0, 800aa4c <log10+0x44>
 800aa24:	2200      	movs	r2, #0
 800aa26:	2300      	movs	r3, #0
 800aa28:	4620      	mov	r0, r4
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f7f5 ffd0 	bl	80009d0 <__aeabi_dcmple>
 800aa30:	b160      	cbz	r0, 800aa4c <log10+0x44>
 800aa32:	2200      	movs	r2, #0
 800aa34:	2300      	movs	r3, #0
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f5 ffb5 	bl	80009a8 <__aeabi_dcmpeq>
 800aa3e:	b140      	cbz	r0, 800aa52 <log10+0x4a>
 800aa40:	f7fd fa3e 	bl	8007ec0 <__errno>
 800aa44:	2322      	movs	r3, #34	; 0x22
 800aa46:	2600      	movs	r6, #0
 800aa48:	4f06      	ldr	r7, [pc, #24]	; (800aa64 <log10+0x5c>)
 800aa4a:	6003      	str	r3, [r0, #0]
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa52:	f7fd fa35 	bl	8007ec0 <__errno>
 800aa56:	2321      	movs	r3, #33	; 0x21
 800aa58:	6003      	str	r3, [r0, #0]
 800aa5a:	4803      	ldr	r0, [pc, #12]	; (800aa68 <log10+0x60>)
 800aa5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa60:	f7fd ba78 	b.w	8007f54 <nan>
 800aa64:	fff00000 	.word	0xfff00000
 800aa68:	0800c961 	.word	0x0800c961

0800aa6c <pow>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	4614      	mov	r4, r2
 800aa72:	461d      	mov	r5, r3
 800aa74:	4680      	mov	r8, r0
 800aa76:	4689      	mov	r9, r1
 800aa78:	f000 f8ea 	bl	800ac50 <__ieee754_pow>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	462b      	mov	r3, r5
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 ffc0 	bl	8000a0c <__aeabi_dcmpun>
 800aa8c:	bbc8      	cbnz	r0, 800ab02 <pow+0x96>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2300      	movs	r3, #0
 800aa92:	4640      	mov	r0, r8
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7f5 ff87 	bl	80009a8 <__aeabi_dcmpeq>
 800aa9a:	b1b8      	cbz	r0, 800aacc <pow+0x60>
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7f5 ff80 	bl	80009a8 <__aeabi_dcmpeq>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d141      	bne.n	800ab30 <pow+0xc4>
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f000 f844 	bl	800ab3c <finite>
 800aab4:	b328      	cbz	r0, 800ab02 <pow+0x96>
 800aab6:	2200      	movs	r2, #0
 800aab8:	2300      	movs	r3, #0
 800aaba:	4620      	mov	r0, r4
 800aabc:	4629      	mov	r1, r5
 800aabe:	f7f5 ff7d 	bl	80009bc <__aeabi_dcmplt>
 800aac2:	b1f0      	cbz	r0, 800ab02 <pow+0x96>
 800aac4:	f7fd f9fc 	bl	8007ec0 <__errno>
 800aac8:	2322      	movs	r3, #34	; 0x22
 800aaca:	e019      	b.n	800ab00 <pow+0x94>
 800aacc:	4630      	mov	r0, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	f000 f834 	bl	800ab3c <finite>
 800aad4:	b9c8      	cbnz	r0, 800ab0a <pow+0x9e>
 800aad6:	4640      	mov	r0, r8
 800aad8:	4649      	mov	r1, r9
 800aada:	f000 f82f 	bl	800ab3c <finite>
 800aade:	b1a0      	cbz	r0, 800ab0a <pow+0x9e>
 800aae0:	4620      	mov	r0, r4
 800aae2:	4629      	mov	r1, r5
 800aae4:	f000 f82a 	bl	800ab3c <finite>
 800aae8:	b178      	cbz	r0, 800ab0a <pow+0x9e>
 800aaea:	4632      	mov	r2, r6
 800aaec:	463b      	mov	r3, r7
 800aaee:	4630      	mov	r0, r6
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	f7f5 ff8b 	bl	8000a0c <__aeabi_dcmpun>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d0e4      	beq.n	800aac4 <pow+0x58>
 800aafa:	f7fd f9e1 	bl	8007ec0 <__errno>
 800aafe:	2321      	movs	r3, #33	; 0x21
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	4630      	mov	r0, r6
 800ab04:	4639      	mov	r1, r7
 800ab06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 ff49 	bl	80009a8 <__aeabi_dcmpeq>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d0f3      	beq.n	800ab02 <pow+0x96>
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f000 f80d 	bl	800ab3c <finite>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0ed      	beq.n	800ab02 <pow+0x96>
 800ab26:	4620      	mov	r0, r4
 800ab28:	4629      	mov	r1, r5
 800ab2a:	f000 f807 	bl	800ab3c <finite>
 800ab2e:	e7c8      	b.n	800aac2 <pow+0x56>
 800ab30:	2600      	movs	r6, #0
 800ab32:	4f01      	ldr	r7, [pc, #4]	; (800ab38 <pow+0xcc>)
 800ab34:	e7e5      	b.n	800ab02 <pow+0x96>
 800ab36:	bf00      	nop
 800ab38:	3ff00000 	.word	0x3ff00000

0800ab3c <finite>:
 800ab3c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ab40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ab44:	0fc0      	lsrs	r0, r0, #31
 800ab46:	4770      	bx	lr

0800ab48 <__ieee754_log10>:
 800ab48:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ab4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	460b      	mov	r3, r1
 800ab56:	da26      	bge.n	800aba6 <__ieee754_log10+0x5e>
 800ab58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ab5c:	4302      	orrs	r2, r0
 800ab5e:	d107      	bne.n	800ab70 <__ieee754_log10+0x28>
 800ab60:	2200      	movs	r2, #0
 800ab62:	2300      	movs	r3, #0
 800ab64:	2000      	movs	r0, #0
 800ab66:	4936      	ldr	r1, [pc, #216]	; (800ac40 <__ieee754_log10+0xf8>)
 800ab68:	f7f5 fde0 	bl	800072c <__aeabi_ddiv>
 800ab6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab70:	2900      	cmp	r1, #0
 800ab72:	da05      	bge.n	800ab80 <__ieee754_log10+0x38>
 800ab74:	4602      	mov	r2, r0
 800ab76:	f7f5 faf7 	bl	8000168 <__aeabi_dsub>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	e7f3      	b.n	800ab68 <__ieee754_log10+0x20>
 800ab80:	2200      	movs	r2, #0
 800ab82:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <__ieee754_log10+0xfc>)
 800ab84:	f7f5 fca8 	bl	80004d8 <__aeabi_dmul>
 800ab88:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	460b      	mov	r3, r1
 800ab92:	492d      	ldr	r1, [pc, #180]	; (800ac48 <__ieee754_log10+0x100>)
 800ab94:	428b      	cmp	r3, r1
 800ab96:	dd08      	ble.n	800abaa <__ieee754_log10+0x62>
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fae4 	bl	800016c <__adddf3>
 800aba4:	e7e2      	b.n	800ab6c <__ieee754_log10+0x24>
 800aba6:	2200      	movs	r2, #0
 800aba8:	e7f3      	b.n	800ab92 <__ieee754_log10+0x4a>
 800abaa:	1518      	asrs	r0, r3, #20
 800abac:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800abb0:	4410      	add	r0, r2
 800abb2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800abb6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800abba:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800abbe:	f7f5 fc21 	bl	8000404 <__aeabi_i2d>
 800abc2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800abc6:	3303      	adds	r3, #3
 800abc8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800abcc:	4606      	mov	r6, r0
 800abce:	460f      	mov	r7, r1
 800abd0:	4620      	mov	r0, r4
 800abd2:	4629      	mov	r1, r5
 800abd4:	f000 fed8 	bl	800b988 <__ieee754_log>
 800abd8:	a313      	add	r3, pc, #76	; (adr r3, 800ac28 <__ieee754_log10+0xe0>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	4680      	mov	r8, r0
 800abe0:	4689      	mov	r9, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	f7f5 fc77 	bl	80004d8 <__aeabi_dmul>
 800abea:	a311      	add	r3, pc, #68	; (adr r3, 800ac30 <__ieee754_log10+0xe8>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 fc6e 	bl	80004d8 <__aeabi_dmul>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 fab2 	bl	800016c <__adddf3>
 800ac08:	a30b      	add	r3, pc, #44	; (adr r3, 800ac38 <__ieee754_log10+0xf0>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	4604      	mov	r4, r0
 800ac10:	460d      	mov	r5, r1
 800ac12:	4630      	mov	r0, r6
 800ac14:	4639      	mov	r1, r7
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	e7bd      	b.n	800aba0 <__ieee754_log10+0x58>
 800ac24:	f3af 8000 	nop.w
 800ac28:	11f12b36 	.word	0x11f12b36
 800ac2c:	3d59fef3 	.word	0x3d59fef3
 800ac30:	1526e50e 	.word	0x1526e50e
 800ac34:	3fdbcb7b 	.word	0x3fdbcb7b
 800ac38:	509f6000 	.word	0x509f6000
 800ac3c:	3fd34413 	.word	0x3fd34413
 800ac40:	c3500000 	.word	0xc3500000
 800ac44:	43500000 	.word	0x43500000
 800ac48:	7fefffff 	.word	0x7fefffff
 800ac4c:	00000000 	.word	0x00000000

0800ac50 <__ieee754_pow>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	b093      	sub	sp, #76	; 0x4c
 800ac56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac5a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800ac5e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ac62:	4689      	mov	r9, r1
 800ac64:	ea56 0102 	orrs.w	r1, r6, r2
 800ac68:	4680      	mov	r8, r0
 800ac6a:	d111      	bne.n	800ac90 <__ieee754_pow+0x40>
 800ac6c:	1803      	adds	r3, r0, r0
 800ac6e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800ac72:	4152      	adcs	r2, r2
 800ac74:	4299      	cmp	r1, r3
 800ac76:	4b82      	ldr	r3, [pc, #520]	; (800ae80 <__ieee754_pow+0x230>)
 800ac78:	4193      	sbcs	r3, r2
 800ac7a:	f080 84ba 	bcs.w	800b5f2 <__ieee754_pow+0x9a2>
 800ac7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fa71 	bl	800016c <__adddf3>
 800ac8a:	4683      	mov	fp, r0
 800ac8c:	468c      	mov	ip, r1
 800ac8e:	e06f      	b.n	800ad70 <__ieee754_pow+0x120>
 800ac90:	4b7c      	ldr	r3, [pc, #496]	; (800ae84 <__ieee754_pow+0x234>)
 800ac92:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800ac96:	429c      	cmp	r4, r3
 800ac98:	464d      	mov	r5, r9
 800ac9a:	4682      	mov	sl, r0
 800ac9c:	dc06      	bgt.n	800acac <__ieee754_pow+0x5c>
 800ac9e:	d101      	bne.n	800aca4 <__ieee754_pow+0x54>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1ec      	bne.n	800ac7e <__ieee754_pow+0x2e>
 800aca4:	429e      	cmp	r6, r3
 800aca6:	dc01      	bgt.n	800acac <__ieee754_pow+0x5c>
 800aca8:	d10f      	bne.n	800acca <__ieee754_pow+0x7a>
 800acaa:	b172      	cbz	r2, 800acca <__ieee754_pow+0x7a>
 800acac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800acb0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800acb4:	ea55 050a 	orrs.w	r5, r5, sl
 800acb8:	d1e1      	bne.n	800ac7e <__ieee754_pow+0x2e>
 800acba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800acbe:	18db      	adds	r3, r3, r3
 800acc0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800acc4:	4152      	adcs	r2, r2
 800acc6:	429d      	cmp	r5, r3
 800acc8:	e7d5      	b.n	800ac76 <__ieee754_pow+0x26>
 800acca:	2d00      	cmp	r5, #0
 800accc:	da39      	bge.n	800ad42 <__ieee754_pow+0xf2>
 800acce:	4b6e      	ldr	r3, [pc, #440]	; (800ae88 <__ieee754_pow+0x238>)
 800acd0:	429e      	cmp	r6, r3
 800acd2:	dc52      	bgt.n	800ad7a <__ieee754_pow+0x12a>
 800acd4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800acd8:	429e      	cmp	r6, r3
 800acda:	f340 849d 	ble.w	800b618 <__ieee754_pow+0x9c8>
 800acde:	1533      	asrs	r3, r6, #20
 800ace0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ace4:	2b14      	cmp	r3, #20
 800ace6:	dd0f      	ble.n	800ad08 <__ieee754_pow+0xb8>
 800ace8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800acec:	fa22 f103 	lsr.w	r1, r2, r3
 800acf0:	fa01 f303 	lsl.w	r3, r1, r3
 800acf4:	4293      	cmp	r3, r2
 800acf6:	f040 848f 	bne.w	800b618 <__ieee754_pow+0x9c8>
 800acfa:	f001 0101 	and.w	r1, r1, #1
 800acfe:	f1c1 0302 	rsb	r3, r1, #2
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	b182      	cbz	r2, 800ad28 <__ieee754_pow+0xd8>
 800ad06:	e05d      	b.n	800adc4 <__ieee754_pow+0x174>
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d159      	bne.n	800adc0 <__ieee754_pow+0x170>
 800ad0c:	f1c3 0314 	rsb	r3, r3, #20
 800ad10:	fa46 f103 	asr.w	r1, r6, r3
 800ad14:	fa01 f303 	lsl.w	r3, r1, r3
 800ad18:	42b3      	cmp	r3, r6
 800ad1a:	f040 847a 	bne.w	800b612 <__ieee754_pow+0x9c2>
 800ad1e:	f001 0101 	and.w	r1, r1, #1
 800ad22:	f1c1 0302 	rsb	r3, r1, #2
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	4b58      	ldr	r3, [pc, #352]	; (800ae8c <__ieee754_pow+0x23c>)
 800ad2a:	429e      	cmp	r6, r3
 800ad2c:	d132      	bne.n	800ad94 <__ieee754_pow+0x144>
 800ad2e:	2f00      	cmp	r7, #0
 800ad30:	f280 846b 	bge.w	800b60a <__ieee754_pow+0x9ba>
 800ad34:	4642      	mov	r2, r8
 800ad36:	464b      	mov	r3, r9
 800ad38:	2000      	movs	r0, #0
 800ad3a:	4954      	ldr	r1, [pc, #336]	; (800ae8c <__ieee754_pow+0x23c>)
 800ad3c:	f7f5 fcf6 	bl	800072c <__aeabi_ddiv>
 800ad40:	e7a3      	b.n	800ac8a <__ieee754_pow+0x3a>
 800ad42:	2300      	movs	r3, #0
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	2a00      	cmp	r2, #0
 800ad48:	d13c      	bne.n	800adc4 <__ieee754_pow+0x174>
 800ad4a:	4b4e      	ldr	r3, [pc, #312]	; (800ae84 <__ieee754_pow+0x234>)
 800ad4c:	429e      	cmp	r6, r3
 800ad4e:	d1eb      	bne.n	800ad28 <__ieee754_pow+0xd8>
 800ad50:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ad54:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ad58:	ea53 030a 	orrs.w	r3, r3, sl
 800ad5c:	f000 8449 	beq.w	800b5f2 <__ieee754_pow+0x9a2>
 800ad60:	4b4b      	ldr	r3, [pc, #300]	; (800ae90 <__ieee754_pow+0x240>)
 800ad62:	429c      	cmp	r4, r3
 800ad64:	dd0b      	ble.n	800ad7e <__ieee754_pow+0x12e>
 800ad66:	2f00      	cmp	r7, #0
 800ad68:	f2c0 8449 	blt.w	800b5fe <__ieee754_pow+0x9ae>
 800ad6c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ad70:	4658      	mov	r0, fp
 800ad72:	4661      	mov	r1, ip
 800ad74:	b013      	add	sp, #76	; 0x4c
 800ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	e7e2      	b.n	800ad44 <__ieee754_pow+0xf4>
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	f04f 0b00 	mov.w	fp, #0
 800ad84:	f04f 0c00 	mov.w	ip, #0
 800ad88:	daf2      	bge.n	800ad70 <__ieee754_pow+0x120>
 800ad8a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ad8e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ad92:	e7ed      	b.n	800ad70 <__ieee754_pow+0x120>
 800ad94:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ad98:	d106      	bne.n	800ada8 <__ieee754_pow+0x158>
 800ad9a:	4642      	mov	r2, r8
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4649      	mov	r1, r9
 800ada2:	f7f5 fb99 	bl	80004d8 <__aeabi_dmul>
 800ada6:	e770      	b.n	800ac8a <__ieee754_pow+0x3a>
 800ada8:	4b3a      	ldr	r3, [pc, #232]	; (800ae94 <__ieee754_pow+0x244>)
 800adaa:	429f      	cmp	r7, r3
 800adac:	d10a      	bne.n	800adc4 <__ieee754_pow+0x174>
 800adae:	2d00      	cmp	r5, #0
 800adb0:	db08      	blt.n	800adc4 <__ieee754_pow+0x174>
 800adb2:	4640      	mov	r0, r8
 800adb4:	4649      	mov	r1, r9
 800adb6:	b013      	add	sp, #76	; 0x4c
 800adb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	f000 bd0a 	b.w	800b7d4 <__ieee754_sqrt>
 800adc0:	2300      	movs	r3, #0
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	4640      	mov	r0, r8
 800adc6:	4649      	mov	r1, r9
 800adc8:	f000 fc58 	bl	800b67c <fabs>
 800adcc:	4683      	mov	fp, r0
 800adce:	468c      	mov	ip, r1
 800add0:	f1ba 0f00 	cmp.w	sl, #0
 800add4:	d128      	bne.n	800ae28 <__ieee754_pow+0x1d8>
 800add6:	b124      	cbz	r4, 800ade2 <__ieee754_pow+0x192>
 800add8:	4b2c      	ldr	r3, [pc, #176]	; (800ae8c <__ieee754_pow+0x23c>)
 800adda:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800adde:	429a      	cmp	r2, r3
 800ade0:	d122      	bne.n	800ae28 <__ieee754_pow+0x1d8>
 800ade2:	2f00      	cmp	r7, #0
 800ade4:	da07      	bge.n	800adf6 <__ieee754_pow+0x1a6>
 800ade6:	465a      	mov	r2, fp
 800ade8:	4663      	mov	r3, ip
 800adea:	2000      	movs	r0, #0
 800adec:	4927      	ldr	r1, [pc, #156]	; (800ae8c <__ieee754_pow+0x23c>)
 800adee:	f7f5 fc9d 	bl	800072c <__aeabi_ddiv>
 800adf2:	4683      	mov	fp, r0
 800adf4:	468c      	mov	ip, r1
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	daba      	bge.n	800ad70 <__ieee754_pow+0x120>
 800adfa:	9b00      	ldr	r3, [sp, #0]
 800adfc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ae00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae04:	431c      	orrs	r4, r3
 800ae06:	d108      	bne.n	800ae1a <__ieee754_pow+0x1ca>
 800ae08:	465a      	mov	r2, fp
 800ae0a:	4663      	mov	r3, ip
 800ae0c:	4658      	mov	r0, fp
 800ae0e:	4661      	mov	r1, ip
 800ae10:	f7f5 f9aa 	bl	8000168 <__aeabi_dsub>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	e790      	b.n	800ad3c <__ieee754_pow+0xec>
 800ae1a:	9b00      	ldr	r3, [sp, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d1a7      	bne.n	800ad70 <__ieee754_pow+0x120>
 800ae20:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ae24:	469c      	mov	ip, r3
 800ae26:	e7a3      	b.n	800ad70 <__ieee754_pow+0x120>
 800ae28:	0feb      	lsrs	r3, r5, #31
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae30:	9b00      	ldr	r3, [sp, #0]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	d104      	bne.n	800ae40 <__ieee754_pow+0x1f0>
 800ae36:	4642      	mov	r2, r8
 800ae38:	464b      	mov	r3, r9
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	e7e7      	b.n	800ae10 <__ieee754_pow+0x1c0>
 800ae40:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <__ieee754_pow+0x248>)
 800ae42:	429e      	cmp	r6, r3
 800ae44:	f340 80f6 	ble.w	800b034 <__ieee754_pow+0x3e4>
 800ae48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ae4c:	429e      	cmp	r6, r3
 800ae4e:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <__ieee754_pow+0x240>)
 800ae50:	dd09      	ble.n	800ae66 <__ieee754_pow+0x216>
 800ae52:	429c      	cmp	r4, r3
 800ae54:	dc0c      	bgt.n	800ae70 <__ieee754_pow+0x220>
 800ae56:	2f00      	cmp	r7, #0
 800ae58:	da0c      	bge.n	800ae74 <__ieee754_pow+0x224>
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	b013      	add	sp, #76	; 0x4c
 800ae5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae62:	f000 bcb2 	b.w	800b7ca <__math_oflow>
 800ae66:	429c      	cmp	r4, r3
 800ae68:	dbf5      	blt.n	800ae56 <__ieee754_pow+0x206>
 800ae6a:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <__ieee754_pow+0x23c>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	dd15      	ble.n	800ae9c <__ieee754_pow+0x24c>
 800ae70:	2f00      	cmp	r7, #0
 800ae72:	dcf2      	bgt.n	800ae5a <__ieee754_pow+0x20a>
 800ae74:	2000      	movs	r0, #0
 800ae76:	b013      	add	sp, #76	; 0x4c
 800ae78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	f000 bca0 	b.w	800b7c0 <__math_uflow>
 800ae80:	fff00000 	.word	0xfff00000
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	433fffff 	.word	0x433fffff
 800ae8c:	3ff00000 	.word	0x3ff00000
 800ae90:	3fefffff 	.word	0x3fefffff
 800ae94:	3fe00000 	.word	0x3fe00000
 800ae98:	41e00000 	.word	0x41e00000
 800ae9c:	4661      	mov	r1, ip
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4658      	mov	r0, fp
 800aea2:	4b5f      	ldr	r3, [pc, #380]	; (800b020 <__ieee754_pow+0x3d0>)
 800aea4:	f7f5 f960 	bl	8000168 <__aeabi_dsub>
 800aea8:	a355      	add	r3, pc, #340	; (adr r3, 800b000 <__ieee754_pow+0x3b0>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	4604      	mov	r4, r0
 800aeb0:	460d      	mov	r5, r1
 800aeb2:	f7f5 fb11 	bl	80004d8 <__aeabi_dmul>
 800aeb6:	a354      	add	r3, pc, #336	; (adr r3, 800b008 <__ieee754_pow+0x3b8>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	4620      	mov	r0, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	f7f5 fb08 	bl	80004d8 <__aeabi_dmul>
 800aec8:	2200      	movs	r2, #0
 800aeca:	4682      	mov	sl, r0
 800aecc:	468b      	mov	fp, r1
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	4b54      	ldr	r3, [pc, #336]	; (800b024 <__ieee754_pow+0x3d4>)
 800aed4:	f7f5 fb00 	bl	80004d8 <__aeabi_dmul>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	a14c      	add	r1, pc, #304	; (adr r1, 800b010 <__ieee754_pow+0x3c0>)
 800aede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee2:	f7f5 f941 	bl	8000168 <__aeabi_dsub>
 800aee6:	4622      	mov	r2, r4
 800aee8:	462b      	mov	r3, r5
 800aeea:	f7f5 faf5 	bl	80004d8 <__aeabi_dmul>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	2000      	movs	r0, #0
 800aef4:	494c      	ldr	r1, [pc, #304]	; (800b028 <__ieee754_pow+0x3d8>)
 800aef6:	f7f5 f937 	bl	8000168 <__aeabi_dsub>
 800aefa:	4622      	mov	r2, r4
 800aefc:	462b      	mov	r3, r5
 800aefe:	4680      	mov	r8, r0
 800af00:	4689      	mov	r9, r1
 800af02:	4620      	mov	r0, r4
 800af04:	4629      	mov	r1, r5
 800af06:	f7f5 fae7 	bl	80004d8 <__aeabi_dmul>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4640      	mov	r0, r8
 800af10:	4649      	mov	r1, r9
 800af12:	f7f5 fae1 	bl	80004d8 <__aeabi_dmul>
 800af16:	a340      	add	r3, pc, #256	; (adr r3, 800b018 <__ieee754_pow+0x3c8>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f7f5 fadc 	bl	80004d8 <__aeabi_dmul>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4650      	mov	r0, sl
 800af26:	4659      	mov	r1, fp
 800af28:	f7f5 f91e 	bl	8000168 <__aeabi_dsub>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4604      	mov	r4, r0
 800af32:	460d      	mov	r5, r1
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 f918 	bl	800016c <__adddf3>
 800af3c:	2000      	movs	r0, #0
 800af3e:	4632      	mov	r2, r6
 800af40:	463b      	mov	r3, r7
 800af42:	4682      	mov	sl, r0
 800af44:	468b      	mov	fp, r1
 800af46:	f7f5 f90f 	bl	8000168 <__aeabi_dsub>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f909 	bl	8000168 <__aeabi_dsub>
 800af56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af5e:	3b01      	subs	r3, #1
 800af60:	4313      	orrs	r3, r2
 800af62:	f04f 0600 	mov.w	r6, #0
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	bf0c      	ite	eq
 800af6c:	4b2f      	ldreq	r3, [pc, #188]	; (800b02c <__ieee754_pow+0x3dc>)
 800af6e:	4b2c      	ldrne	r3, [pc, #176]	; (800b020 <__ieee754_pow+0x3d0>)
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af78:	e9cd 2300 	strd	r2, r3, [sp]
 800af7c:	4632      	mov	r2, r6
 800af7e:	463b      	mov	r3, r7
 800af80:	f7f5 f8f2 	bl	8000168 <__aeabi_dsub>
 800af84:	4652      	mov	r2, sl
 800af86:	465b      	mov	r3, fp
 800af88:	f7f5 faa6 	bl	80004d8 <__aeabi_dmul>
 800af8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af90:	4680      	mov	r8, r0
 800af92:	4689      	mov	r9, r1
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 fa9e 	bl	80004d8 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4640      	mov	r0, r8
 800afa2:	4649      	mov	r1, r9
 800afa4:	f7f5 f8e2 	bl	800016c <__adddf3>
 800afa8:	4632      	mov	r2, r6
 800afaa:	463b      	mov	r3, r7
 800afac:	4680      	mov	r8, r0
 800afae:	4689      	mov	r9, r1
 800afb0:	4650      	mov	r0, sl
 800afb2:	4659      	mov	r1, fp
 800afb4:	f7f5 fa90 	bl	80004d8 <__aeabi_dmul>
 800afb8:	4604      	mov	r4, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	460b      	mov	r3, r1
 800afbe:	4602      	mov	r2, r0
 800afc0:	4649      	mov	r1, r9
 800afc2:	4640      	mov	r0, r8
 800afc4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800afc8:	f7f5 f8d0 	bl	800016c <__adddf3>
 800afcc:	4b18      	ldr	r3, [pc, #96]	; (800b030 <__ieee754_pow+0x3e0>)
 800afce:	4682      	mov	sl, r0
 800afd0:	4299      	cmp	r1, r3
 800afd2:	460f      	mov	r7, r1
 800afd4:	460e      	mov	r6, r1
 800afd6:	f340 82e7 	ble.w	800b5a8 <__ieee754_pow+0x958>
 800afda:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800afde:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800afe2:	4303      	orrs	r3, r0
 800afe4:	f000 81e2 	beq.w	800b3ac <__ieee754_pow+0x75c>
 800afe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	f7f5 fce4 	bl	80009bc <__aeabi_dcmplt>
 800aff4:	3800      	subs	r0, #0
 800aff6:	bf18      	it	ne
 800aff8:	2001      	movne	r0, #1
 800affa:	e72f      	b.n	800ae5c <__ieee754_pow+0x20c>
 800affc:	f3af 8000 	nop.w
 800b000:	60000000 	.word	0x60000000
 800b004:	3ff71547 	.word	0x3ff71547
 800b008:	f85ddf44 	.word	0xf85ddf44
 800b00c:	3e54ae0b 	.word	0x3e54ae0b
 800b010:	55555555 	.word	0x55555555
 800b014:	3fd55555 	.word	0x3fd55555
 800b018:	652b82fe 	.word	0x652b82fe
 800b01c:	3ff71547 	.word	0x3ff71547
 800b020:	3ff00000 	.word	0x3ff00000
 800b024:	3fd00000 	.word	0x3fd00000
 800b028:	3fe00000 	.word	0x3fe00000
 800b02c:	bff00000 	.word	0xbff00000
 800b030:	408fffff 	.word	0x408fffff
 800b034:	4bd4      	ldr	r3, [pc, #848]	; (800b388 <__ieee754_pow+0x738>)
 800b036:	2200      	movs	r2, #0
 800b038:	402b      	ands	r3, r5
 800b03a:	b943      	cbnz	r3, 800b04e <__ieee754_pow+0x3fe>
 800b03c:	4658      	mov	r0, fp
 800b03e:	4661      	mov	r1, ip
 800b040:	4bd2      	ldr	r3, [pc, #840]	; (800b38c <__ieee754_pow+0x73c>)
 800b042:	f7f5 fa49 	bl	80004d8 <__aeabi_dmul>
 800b046:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b04a:	4683      	mov	fp, r0
 800b04c:	460c      	mov	r4, r1
 800b04e:	1523      	asrs	r3, r4, #20
 800b050:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b054:	4413      	add	r3, r2
 800b056:	930b      	str	r3, [sp, #44]	; 0x2c
 800b058:	4bcd      	ldr	r3, [pc, #820]	; (800b390 <__ieee754_pow+0x740>)
 800b05a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b05e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b062:	429c      	cmp	r4, r3
 800b064:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b068:	dd08      	ble.n	800b07c <__ieee754_pow+0x42c>
 800b06a:	4bca      	ldr	r3, [pc, #808]	; (800b394 <__ieee754_pow+0x744>)
 800b06c:	429c      	cmp	r4, r3
 800b06e:	f340 8164 	ble.w	800b33a <__ieee754_pow+0x6ea>
 800b072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b074:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b078:	3301      	adds	r3, #1
 800b07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b07c:	2600      	movs	r6, #0
 800b07e:	00f3      	lsls	r3, r6, #3
 800b080:	930d      	str	r3, [sp, #52]	; 0x34
 800b082:	4bc5      	ldr	r3, [pc, #788]	; (800b398 <__ieee754_pow+0x748>)
 800b084:	4658      	mov	r0, fp
 800b086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b08a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b08e:	4629      	mov	r1, r5
 800b090:	461a      	mov	r2, r3
 800b092:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b096:	4623      	mov	r3, r4
 800b098:	f7f5 f866 	bl	8000168 <__aeabi_dsub>
 800b09c:	46da      	mov	sl, fp
 800b09e:	462b      	mov	r3, r5
 800b0a0:	4652      	mov	r2, sl
 800b0a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b0a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0aa:	f7f5 f85f 	bl	800016c <__adddf3>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	49b9      	ldr	r1, [pc, #740]	; (800b39c <__ieee754_pow+0x74c>)
 800b0b6:	f7f5 fb39 	bl	800072c <__aeabi_ddiv>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0c6:	f7f5 fa07 	bl	80004d8 <__aeabi_dmul>
 800b0ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b0d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2200      	movs	r2, #0
 800b0da:	46ab      	mov	fp, r5
 800b0dc:	106d      	asrs	r5, r5, #1
 800b0de:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b0e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0ec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	461d      	mov	r5, r3
 800b0f8:	f7f5 f9ee 	bl	80004d8 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b104:	f7f5 f830 	bl	8000168 <__aeabi_dsub>
 800b108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 f828 	bl	8000168 <__aeabi_dsub>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4650      	mov	r0, sl
 800b11e:	4659      	mov	r1, fp
 800b120:	f7f5 f822 	bl	8000168 <__aeabi_dsub>
 800b124:	4642      	mov	r2, r8
 800b126:	464b      	mov	r3, r9
 800b128:	f7f5 f9d6 	bl	80004d8 <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4630      	mov	r0, r6
 800b132:	4639      	mov	r1, r7
 800b134:	f7f5 f818 	bl	8000168 <__aeabi_dsub>
 800b138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b13c:	f7f5 f9cc 	bl	80004d8 <__aeabi_dmul>
 800b140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b144:	4682      	mov	sl, r0
 800b146:	468b      	mov	fp, r1
 800b148:	4610      	mov	r0, r2
 800b14a:	4619      	mov	r1, r3
 800b14c:	f7f5 f9c4 	bl	80004d8 <__aeabi_dmul>
 800b150:	a37b      	add	r3, pc, #492	; (adr r3, 800b340 <__ieee754_pow+0x6f0>)
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	4604      	mov	r4, r0
 800b158:	460d      	mov	r5, r1
 800b15a:	f7f5 f9bd 	bl	80004d8 <__aeabi_dmul>
 800b15e:	a37a      	add	r3, pc, #488	; (adr r3, 800b348 <__ieee754_pow+0x6f8>)
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	f7f5 f802 	bl	800016c <__adddf3>
 800b168:	4622      	mov	r2, r4
 800b16a:	462b      	mov	r3, r5
 800b16c:	f7f5 f9b4 	bl	80004d8 <__aeabi_dmul>
 800b170:	a377      	add	r3, pc, #476	; (adr r3, 800b350 <__ieee754_pow+0x700>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f7f4 fff9 	bl	800016c <__adddf3>
 800b17a:	4622      	mov	r2, r4
 800b17c:	462b      	mov	r3, r5
 800b17e:	f7f5 f9ab 	bl	80004d8 <__aeabi_dmul>
 800b182:	a375      	add	r3, pc, #468	; (adr r3, 800b358 <__ieee754_pow+0x708>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f4 fff0 	bl	800016c <__adddf3>
 800b18c:	4622      	mov	r2, r4
 800b18e:	462b      	mov	r3, r5
 800b190:	f7f5 f9a2 	bl	80004d8 <__aeabi_dmul>
 800b194:	a372      	add	r3, pc, #456	; (adr r3, 800b360 <__ieee754_pow+0x710>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f4 ffe7 	bl	800016c <__adddf3>
 800b19e:	4622      	mov	r2, r4
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	f7f5 f999 	bl	80004d8 <__aeabi_dmul>
 800b1a6:	a370      	add	r3, pc, #448	; (adr r3, 800b368 <__ieee754_pow+0x718>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	f7f4 ffde 	bl	800016c <__adddf3>
 800b1b0:	4622      	mov	r2, r4
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	462b      	mov	r3, r5
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	f7f5 f98c 	bl	80004d8 <__aeabi_dmul>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 f986 	bl	80004d8 <__aeabi_dmul>
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	460d      	mov	r5, r1
 800b1d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	f7f4 ffc8 	bl	800016c <__adddf3>
 800b1dc:	4652      	mov	r2, sl
 800b1de:	465b      	mov	r3, fp
 800b1e0:	f7f5 f97a 	bl	80004d8 <__aeabi_dmul>
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	462b      	mov	r3, r5
 800b1e8:	f7f4 ffc0 	bl	800016c <__adddf3>
 800b1ec:	4642      	mov	r2, r8
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	460f      	mov	r7, r1
 800b1f2:	464b      	mov	r3, r9
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	f7f5 f96e 	bl	80004d8 <__aeabi_dmul>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b204:	2200      	movs	r2, #0
 800b206:	4b66      	ldr	r3, [pc, #408]	; (800b3a0 <__ieee754_pow+0x750>)
 800b208:	f7f4 ffb0 	bl	800016c <__adddf3>
 800b20c:	4632      	mov	r2, r6
 800b20e:	463b      	mov	r3, r7
 800b210:	f7f4 ffac 	bl	800016c <__adddf3>
 800b214:	2400      	movs	r4, #0
 800b216:	460d      	mov	r5, r1
 800b218:	4622      	mov	r2, r4
 800b21a:	460b      	mov	r3, r1
 800b21c:	4640      	mov	r0, r8
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 f95a 	bl	80004d8 <__aeabi_dmul>
 800b224:	2200      	movs	r2, #0
 800b226:	4680      	mov	r8, r0
 800b228:	4689      	mov	r9, r1
 800b22a:	4620      	mov	r0, r4
 800b22c:	4629      	mov	r1, r5
 800b22e:	4b5c      	ldr	r3, [pc, #368]	; (800b3a0 <__ieee754_pow+0x750>)
 800b230:	f7f4 ff9a 	bl	8000168 <__aeabi_dsub>
 800b234:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b238:	f7f4 ff96 	bl	8000168 <__aeabi_dsub>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f4 ff90 	bl	8000168 <__aeabi_dsub>
 800b248:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b24c:	f7f5 f944 	bl	80004d8 <__aeabi_dmul>
 800b250:	4622      	mov	r2, r4
 800b252:	4606      	mov	r6, r0
 800b254:	460f      	mov	r7, r1
 800b256:	462b      	mov	r3, r5
 800b258:	4650      	mov	r0, sl
 800b25a:	4659      	mov	r1, fp
 800b25c:	f7f5 f93c 	bl	80004d8 <__aeabi_dmul>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4630      	mov	r0, r6
 800b266:	4639      	mov	r1, r7
 800b268:	f7f4 ff80 	bl	800016c <__adddf3>
 800b26c:	2400      	movs	r4, #0
 800b26e:	4606      	mov	r6, r0
 800b270:	460f      	mov	r7, r1
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f4 ff77 	bl	800016c <__adddf3>
 800b27e:	a33c      	add	r3, pc, #240	; (adr r3, 800b370 <__ieee754_pow+0x720>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	4620      	mov	r0, r4
 800b286:	460d      	mov	r5, r1
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	4642      	mov	r2, r8
 800b28e:	464b      	mov	r3, r9
 800b290:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b294:	4620      	mov	r0, r4
 800b296:	4629      	mov	r1, r5
 800b298:	f7f4 ff66 	bl	8000168 <__aeabi_dsub>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f4 ff60 	bl	8000168 <__aeabi_dsub>
 800b2a8:	a333      	add	r3, pc, #204	; (adr r3, 800b378 <__ieee754_pow+0x728>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f5 f913 	bl	80004d8 <__aeabi_dmul>
 800b2b2:	a333      	add	r3, pc, #204	; (adr r3, 800b380 <__ieee754_pow+0x730>)
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	4620      	mov	r0, r4
 800b2be:	4629      	mov	r1, r5
 800b2c0:	f7f5 f90a 	bl	80004d8 <__aeabi_dmul>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f4 ff4e 	bl	800016c <__adddf3>
 800b2d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2d2:	4b34      	ldr	r3, [pc, #208]	; (800b3a4 <__ieee754_pow+0x754>)
 800b2d4:	4413      	add	r3, r2
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	f7f4 ff47 	bl	800016c <__adddf3>
 800b2de:	4680      	mov	r8, r0
 800b2e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b2e2:	4689      	mov	r9, r1
 800b2e4:	f7f5 f88e 	bl	8000404 <__aeabi_i2d>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2f2:	4b2d      	ldr	r3, [pc, #180]	; (800b3a8 <__ieee754_pow+0x758>)
 800b2f4:	4413      	add	r3, r2
 800b2f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b2fa:	4642      	mov	r2, r8
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	f7f4 ff35 	bl	800016c <__adddf3>
 800b302:	4632      	mov	r2, r6
 800b304:	463b      	mov	r3, r7
 800b306:	f7f4 ff31 	bl	800016c <__adddf3>
 800b30a:	4622      	mov	r2, r4
 800b30c:	462b      	mov	r3, r5
 800b30e:	f7f4 ff2d 	bl	800016c <__adddf3>
 800b312:	2000      	movs	r0, #0
 800b314:	4622      	mov	r2, r4
 800b316:	462b      	mov	r3, r5
 800b318:	4682      	mov	sl, r0
 800b31a:	468b      	mov	fp, r1
 800b31c:	f7f4 ff24 	bl	8000168 <__aeabi_dsub>
 800b320:	4632      	mov	r2, r6
 800b322:	463b      	mov	r3, r7
 800b324:	f7f4 ff20 	bl	8000168 <__aeabi_dsub>
 800b328:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b32c:	f7f4 ff1c 	bl	8000168 <__aeabi_dsub>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	e60b      	b.n	800af52 <__ieee754_pow+0x302>
 800b33a:	2601      	movs	r6, #1
 800b33c:	e69f      	b.n	800b07e <__ieee754_pow+0x42e>
 800b33e:	bf00      	nop
 800b340:	4a454eef 	.word	0x4a454eef
 800b344:	3fca7e28 	.word	0x3fca7e28
 800b348:	93c9db65 	.word	0x93c9db65
 800b34c:	3fcd864a 	.word	0x3fcd864a
 800b350:	a91d4101 	.word	0xa91d4101
 800b354:	3fd17460 	.word	0x3fd17460
 800b358:	518f264d 	.word	0x518f264d
 800b35c:	3fd55555 	.word	0x3fd55555
 800b360:	db6fabff 	.word	0xdb6fabff
 800b364:	3fdb6db6 	.word	0x3fdb6db6
 800b368:	33333303 	.word	0x33333303
 800b36c:	3fe33333 	.word	0x3fe33333
 800b370:	e0000000 	.word	0xe0000000
 800b374:	3feec709 	.word	0x3feec709
 800b378:	dc3a03fd 	.word	0xdc3a03fd
 800b37c:	3feec709 	.word	0x3feec709
 800b380:	145b01f5 	.word	0x145b01f5
 800b384:	be3e2fe0 	.word	0xbe3e2fe0
 800b388:	7ff00000 	.word	0x7ff00000
 800b38c:	43400000 	.word	0x43400000
 800b390:	0003988e 	.word	0x0003988e
 800b394:	000bb679 	.word	0x000bb679
 800b398:	0800c968 	.word	0x0800c968
 800b39c:	3ff00000 	.word	0x3ff00000
 800b3a0:	40080000 	.word	0x40080000
 800b3a4:	0800c988 	.word	0x0800c988
 800b3a8:	0800c978 	.word	0x0800c978
 800b3ac:	a39c      	add	r3, pc, #624	; (adr r3, 800b620 <__ieee754_pow+0x9d0>)
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	f7f4 fed9 	bl	800016c <__adddf3>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	f7f4 fecf 	bl	8000168 <__aeabi_dsub>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d2:	f7f5 fb11 	bl	80009f8 <__aeabi_dcmpgt>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f47f ae06 	bne.w	800afe8 <__ieee754_pow+0x398>
 800b3dc:	4aa2      	ldr	r2, [pc, #648]	; (800b668 <__ieee754_pow+0xa18>)
 800b3de:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	f340 8100 	ble.w	800b5e8 <__ieee754_pow+0x998>
 800b3e8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b3ec:	151b      	asrs	r3, r3, #20
 800b3ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b3f2:	fa4a fa03 	asr.w	sl, sl, r3
 800b3f6:	44b2      	add	sl, r6
 800b3f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b3fc:	489b      	ldr	r0, [pc, #620]	; (800b66c <__ieee754_pow+0xa1c>)
 800b3fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b402:	4108      	asrs	r0, r1
 800b404:	ea00 030a 	and.w	r3, r0, sl
 800b408:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b40c:	f1c1 0114 	rsb	r1, r1, #20
 800b410:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b414:	fa4a fa01 	asr.w	sl, sl, r1
 800b418:	2e00      	cmp	r6, #0
 800b41a:	f04f 0200 	mov.w	r2, #0
 800b41e:	4620      	mov	r0, r4
 800b420:	4629      	mov	r1, r5
 800b422:	bfb8      	it	lt
 800b424:	f1ca 0a00 	rsblt	sl, sl, #0
 800b428:	f7f4 fe9e 	bl	8000168 <__aeabi_dsub>
 800b42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b434:	2400      	movs	r4, #0
 800b436:	4642      	mov	r2, r8
 800b438:	464b      	mov	r3, r9
 800b43a:	f7f4 fe97 	bl	800016c <__adddf3>
 800b43e:	a37a      	add	r3, pc, #488	; (adr r3, 800b628 <__ieee754_pow+0x9d8>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	4620      	mov	r0, r4
 800b446:	460d      	mov	r5, r1
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b450:	4606      	mov	r6, r0
 800b452:	460f      	mov	r7, r1
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f7f4 fe86 	bl	8000168 <__aeabi_dsub>
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f4 fe80 	bl	8000168 <__aeabi_dsub>
 800b468:	a371      	add	r3, pc, #452	; (adr r3, 800b630 <__ieee754_pow+0x9e0>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f5 f833 	bl	80004d8 <__aeabi_dmul>
 800b472:	a371      	add	r3, pc, #452	; (adr r3, 800b638 <__ieee754_pow+0x9e8>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	4680      	mov	r8, r0
 800b47a:	4689      	mov	r9, r1
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 f82a 	bl	80004d8 <__aeabi_dmul>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4640      	mov	r0, r8
 800b48a:	4649      	mov	r1, r9
 800b48c:	f7f4 fe6e 	bl	800016c <__adddf3>
 800b490:	4604      	mov	r4, r0
 800b492:	460d      	mov	r5, r1
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f4 fe66 	bl	800016c <__adddf3>
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	463b      	mov	r3, r7
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	f7f4 fe5e 	bl	8000168 <__aeabi_dsub>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fe58 	bl	8000168 <__aeabi_dsub>
 800b4b8:	4642      	mov	r2, r8
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	464b      	mov	r3, r9
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	f7f5 f808 	bl	80004d8 <__aeabi_dmul>
 800b4c8:	a35d      	add	r3, pc, #372	; (adr r3, 800b640 <__ieee754_pow+0x9f0>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	460d      	mov	r5, r1
 800b4d2:	f7f5 f801 	bl	80004d8 <__aeabi_dmul>
 800b4d6:	a35c      	add	r3, pc, #368	; (adr r3, 800b648 <__ieee754_pow+0x9f8>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f4 fe44 	bl	8000168 <__aeabi_dsub>
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	f7f4 fff8 	bl	80004d8 <__aeabi_dmul>
 800b4e8:	a359      	add	r3, pc, #356	; (adr r3, 800b650 <__ieee754_pow+0xa00>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f4 fe3d 	bl	800016c <__adddf3>
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	f7f4 ffef 	bl	80004d8 <__aeabi_dmul>
 800b4fa:	a357      	add	r3, pc, #348	; (adr r3, 800b658 <__ieee754_pow+0xa08>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f4 fe32 	bl	8000168 <__aeabi_dsub>
 800b504:	4622      	mov	r2, r4
 800b506:	462b      	mov	r3, r5
 800b508:	f7f4 ffe6 	bl	80004d8 <__aeabi_dmul>
 800b50c:	a354      	add	r3, pc, #336	; (adr r3, 800b660 <__ieee754_pow+0xa10>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	f7f4 fe2b 	bl	800016c <__adddf3>
 800b516:	4622      	mov	r2, r4
 800b518:	462b      	mov	r3, r5
 800b51a:	f7f4 ffdd 	bl	80004d8 <__aeabi_dmul>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f4 fe1f 	bl	8000168 <__aeabi_dsub>
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	4640      	mov	r0, r8
 800b534:	4649      	mov	r1, r9
 800b536:	f7f4 ffcf 	bl	80004d8 <__aeabi_dmul>
 800b53a:	2200      	movs	r2, #0
 800b53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b544:	4620      	mov	r0, r4
 800b546:	4629      	mov	r1, r5
 800b548:	f7f4 fe0e 	bl	8000168 <__aeabi_dsub>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b554:	f7f5 f8ea 	bl	800072c <__aeabi_ddiv>
 800b558:	4632      	mov	r2, r6
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	463b      	mov	r3, r7
 800b560:	4640      	mov	r0, r8
 800b562:	4649      	mov	r1, r9
 800b564:	f7f4 ffb8 	bl	80004d8 <__aeabi_dmul>
 800b568:	4632      	mov	r2, r6
 800b56a:	463b      	mov	r3, r7
 800b56c:	f7f4 fdfe 	bl	800016c <__adddf3>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	f7f4 fdf6 	bl	8000168 <__aeabi_dsub>
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	f7f4 fdf2 	bl	8000168 <__aeabi_dsub>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	2000      	movs	r0, #0
 800b58a:	4939      	ldr	r1, [pc, #228]	; (800b670 <__ieee754_pow+0xa20>)
 800b58c:	f7f4 fdec 	bl	8000168 <__aeabi_dsub>
 800b590:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b594:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b598:	da29      	bge.n	800b5ee <__ieee754_pow+0x99e>
 800b59a:	4652      	mov	r2, sl
 800b59c:	f000 f874 	bl	800b688 <scalbn>
 800b5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5a4:	f7ff bbfd 	b.w	800ada2 <__ieee754_pow+0x152>
 800b5a8:	4b32      	ldr	r3, [pc, #200]	; (800b674 <__ieee754_pow+0xa24>)
 800b5aa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b5ae:	429f      	cmp	r7, r3
 800b5b0:	f77f af14 	ble.w	800b3dc <__ieee754_pow+0x78c>
 800b5b4:	4b30      	ldr	r3, [pc, #192]	; (800b678 <__ieee754_pow+0xa28>)
 800b5b6:	440b      	add	r3, r1
 800b5b8:	4303      	orrs	r3, r0
 800b5ba:	d009      	beq.n	800b5d0 <__ieee754_pow+0x980>
 800b5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f7f5 f9fa 	bl	80009bc <__aeabi_dcmplt>
 800b5c8:	3800      	subs	r0, #0
 800b5ca:	bf18      	it	ne
 800b5cc:	2001      	movne	r0, #1
 800b5ce:	e452      	b.n	800ae76 <__ieee754_pow+0x226>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	f7f4 fdc8 	bl	8000168 <__aeabi_dsub>
 800b5d8:	4642      	mov	r2, r8
 800b5da:	464b      	mov	r3, r9
 800b5dc:	f7f5 fa02 	bl	80009e4 <__aeabi_dcmpge>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f aefb 	beq.w	800b3dc <__ieee754_pow+0x78c>
 800b5e6:	e7e9      	b.n	800b5bc <__ieee754_pow+0x96c>
 800b5e8:	f04f 0a00 	mov.w	sl, #0
 800b5ec:	e720      	b.n	800b430 <__ieee754_pow+0x7e0>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	e7d6      	b.n	800b5a0 <__ieee754_pow+0x950>
 800b5f2:	f04f 0b00 	mov.w	fp, #0
 800b5f6:	f8df c078 	ldr.w	ip, [pc, #120]	; 800b670 <__ieee754_pow+0xa20>
 800b5fa:	f7ff bbb9 	b.w	800ad70 <__ieee754_pow+0x120>
 800b5fe:	f04f 0b00 	mov.w	fp, #0
 800b602:	f04f 0c00 	mov.w	ip, #0
 800b606:	f7ff bbb3 	b.w	800ad70 <__ieee754_pow+0x120>
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7ff bb3c 	b.w	800ac8a <__ieee754_pow+0x3a>
 800b612:	9200      	str	r2, [sp, #0]
 800b614:	f7ff bb88 	b.w	800ad28 <__ieee754_pow+0xd8>
 800b618:	2300      	movs	r3, #0
 800b61a:	f7ff bb72 	b.w	800ad02 <__ieee754_pow+0xb2>
 800b61e:	bf00      	nop
 800b620:	652b82fe 	.word	0x652b82fe
 800b624:	3c971547 	.word	0x3c971547
 800b628:	00000000 	.word	0x00000000
 800b62c:	3fe62e43 	.word	0x3fe62e43
 800b630:	fefa39ef 	.word	0xfefa39ef
 800b634:	3fe62e42 	.word	0x3fe62e42
 800b638:	0ca86c39 	.word	0x0ca86c39
 800b63c:	be205c61 	.word	0xbe205c61
 800b640:	72bea4d0 	.word	0x72bea4d0
 800b644:	3e663769 	.word	0x3e663769
 800b648:	c5d26bf1 	.word	0xc5d26bf1
 800b64c:	3ebbbd41 	.word	0x3ebbbd41
 800b650:	af25de2c 	.word	0xaf25de2c
 800b654:	3f11566a 	.word	0x3f11566a
 800b658:	16bebd93 	.word	0x16bebd93
 800b65c:	3f66c16c 	.word	0x3f66c16c
 800b660:	5555553e 	.word	0x5555553e
 800b664:	3fc55555 	.word	0x3fc55555
 800b668:	3fe00000 	.word	0x3fe00000
 800b66c:	fff00000 	.word	0xfff00000
 800b670:	3ff00000 	.word	0x3ff00000
 800b674:	4090cbff 	.word	0x4090cbff
 800b678:	3f6f3400 	.word	0x3f6f3400

0800b67c <fabs>:
 800b67c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b680:	4619      	mov	r1, r3
 800b682:	4770      	bx	lr
 800b684:	0000      	movs	r0, r0
	...

0800b688 <scalbn>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	4616      	mov	r6, r2
 800b68c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b690:	4604      	mov	r4, r0
 800b692:	460d      	mov	r5, r1
 800b694:	460b      	mov	r3, r1
 800b696:	b992      	cbnz	r2, 800b6be <scalbn+0x36>
 800b698:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b69c:	4303      	orrs	r3, r0
 800b69e:	d03c      	beq.n	800b71a <scalbn+0x92>
 800b6a0:	4b31      	ldr	r3, [pc, #196]	; (800b768 <scalbn+0xe0>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f7f4 ff18 	bl	80004d8 <__aeabi_dmul>
 800b6a8:	4b30      	ldr	r3, [pc, #192]	; (800b76c <scalbn+0xe4>)
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	429e      	cmp	r6, r3
 800b6ae:	460d      	mov	r5, r1
 800b6b0:	da0f      	bge.n	800b6d2 <scalbn+0x4a>
 800b6b2:	a329      	add	r3, pc, #164	; (adr r3, 800b758 <scalbn+0xd0>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 ff0e 	bl	80004d8 <__aeabi_dmul>
 800b6bc:	e006      	b.n	800b6cc <scalbn+0x44>
 800b6be:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b6c2:	42ba      	cmp	r2, r7
 800b6c4:	d109      	bne.n	800b6da <scalbn+0x52>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	f7f4 fd50 	bl	800016c <__adddf3>
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	460d      	mov	r5, r1
 800b6d0:	e023      	b.n	800b71a <scalbn+0x92>
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b6d8:	3a36      	subs	r2, #54	; 0x36
 800b6da:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b6de:	428e      	cmp	r6, r1
 800b6e0:	dd0e      	ble.n	800b700 <scalbn+0x78>
 800b6e2:	a31f      	add	r3, pc, #124	; (adr r3, 800b760 <scalbn+0xd8>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b6ec:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b6f0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b6f4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b6f8:	481d      	ldr	r0, [pc, #116]	; (800b770 <scalbn+0xe8>)
 800b6fa:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b6fe:	e7db      	b.n	800b6b8 <scalbn+0x30>
 800b700:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b704:	4432      	add	r2, r6
 800b706:	428a      	cmp	r2, r1
 800b708:	dceb      	bgt.n	800b6e2 <scalbn+0x5a>
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	dd08      	ble.n	800b720 <scalbn+0x98>
 800b70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b712:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b716:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b720:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b724:	da0c      	bge.n	800b740 <scalbn+0xb8>
 800b726:	a30c      	add	r3, pc, #48	; (adr r3, 800b758 <scalbn+0xd0>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b730:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b734:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b738:	480e      	ldr	r0, [pc, #56]	; (800b774 <scalbn+0xec>)
 800b73a:	f041 011f 	orr.w	r1, r1, #31
 800b73e:	e7bb      	b.n	800b6b8 <scalbn+0x30>
 800b740:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b744:	3236      	adds	r2, #54	; 0x36
 800b746:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b74a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b74e:	4620      	mov	r0, r4
 800b750:	4629      	mov	r1, r5
 800b752:	2200      	movs	r2, #0
 800b754:	4b08      	ldr	r3, [pc, #32]	; (800b778 <scalbn+0xf0>)
 800b756:	e7af      	b.n	800b6b8 <scalbn+0x30>
 800b758:	c2f8f359 	.word	0xc2f8f359
 800b75c:	01a56e1f 	.word	0x01a56e1f
 800b760:	8800759c 	.word	0x8800759c
 800b764:	7e37e43c 	.word	0x7e37e43c
 800b768:	43500000 	.word	0x43500000
 800b76c:	ffff3cb0 	.word	0xffff3cb0
 800b770:	8800759c 	.word	0x8800759c
 800b774:	c2f8f359 	.word	0xc2f8f359
 800b778:	3c900000 	.word	0x3c900000

0800b77c <with_errno>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	4604      	mov	r4, r0
 800b780:	460d      	mov	r5, r1
 800b782:	4616      	mov	r6, r2
 800b784:	f7fc fb9c 	bl	8007ec0 <__errno>
 800b788:	4629      	mov	r1, r5
 800b78a:	6006      	str	r6, [r0, #0]
 800b78c:	4620      	mov	r0, r4
 800b78e:	bd70      	pop	{r4, r5, r6, pc}

0800b790 <xflow>:
 800b790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b792:	4615      	mov	r5, r2
 800b794:	461c      	mov	r4, r3
 800b796:	b180      	cbz	r0, 800b7ba <xflow+0x2a>
 800b798:	4610      	mov	r0, r2
 800b79a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b79e:	e9cd 0100 	strd	r0, r1, [sp]
 800b7a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	f7f4 fe95 	bl	80004d8 <__aeabi_dmul>
 800b7ae:	2222      	movs	r2, #34	; 0x22
 800b7b0:	b003      	add	sp, #12
 800b7b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7b6:	f7ff bfe1 	b.w	800b77c <with_errno>
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	4619      	mov	r1, r3
 800b7be:	e7ee      	b.n	800b79e <xflow+0xe>

0800b7c0 <__math_uflow>:
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b7c6:	f7ff bfe3 	b.w	800b790 <xflow>

0800b7ca <__math_oflow>:
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b7d0:	f7ff bfde 	b.w	800b790 <xflow>

0800b7d4 <__ieee754_sqrt>:
 800b7d4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800b978 <__ieee754_sqrt+0x1a4>
 800b7d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	ea3c 0c01 	bics.w	ip, ip, r1
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460d      	mov	r5, r1
 800b7e6:	460a      	mov	r2, r1
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	d10e      	bne.n	800b80a <__ieee754_sqrt+0x36>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	f7f4 fe73 	bl	80004d8 <__aeabi_dmul>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f4 fcb7 	bl	800016c <__adddf3>
 800b7fe:	4606      	mov	r6, r0
 800b800:	460d      	mov	r5, r1
 800b802:	4630      	mov	r0, r6
 800b804:	4629      	mov	r1, r5
 800b806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	2900      	cmp	r1, #0
 800b80c:	dc0d      	bgt.n	800b82a <__ieee754_sqrt+0x56>
 800b80e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b812:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b816:	d0f4      	beq.n	800b802 <__ieee754_sqrt+0x2e>
 800b818:	b139      	cbz	r1, 800b82a <__ieee754_sqrt+0x56>
 800b81a:	4602      	mov	r2, r0
 800b81c:	f7f4 fca4 	bl	8000168 <__aeabi_dsub>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	f7f4 ff82 	bl	800072c <__aeabi_ddiv>
 800b828:	e7e9      	b.n	800b7fe <__ieee754_sqrt+0x2a>
 800b82a:	1512      	asrs	r2, r2, #20
 800b82c:	f000 8089 	beq.w	800b942 <__ieee754_sqrt+0x16e>
 800b830:	2500      	movs	r5, #0
 800b832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b836:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b83a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b83e:	07d2      	lsls	r2, r2, #31
 800b840:	bf5c      	itt	pl
 800b842:	005b      	lslpl	r3, r3, #1
 800b844:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b84c:	bf58      	it	pl
 800b84e:	0064      	lslpl	r4, r4, #1
 800b850:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b854:	0062      	lsls	r2, r4, #1
 800b856:	2016      	movs	r0, #22
 800b858:	4629      	mov	r1, r5
 800b85a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800b85e:	1076      	asrs	r6, r6, #1
 800b860:	190f      	adds	r7, r1, r4
 800b862:	429f      	cmp	r7, r3
 800b864:	bfde      	ittt	le
 800b866:	1bdb      	suble	r3, r3, r7
 800b868:	1939      	addle	r1, r7, r4
 800b86a:	192d      	addle	r5, r5, r4
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	3801      	subs	r0, #1
 800b870:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b874:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b878:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b87c:	d1f0      	bne.n	800b860 <__ieee754_sqrt+0x8c>
 800b87e:	4604      	mov	r4, r0
 800b880:	2720      	movs	r7, #32
 800b882:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800b886:	428b      	cmp	r3, r1
 800b888:	eb0c 0e00 	add.w	lr, ip, r0
 800b88c:	dc02      	bgt.n	800b894 <__ieee754_sqrt+0xc0>
 800b88e:	d113      	bne.n	800b8b8 <__ieee754_sqrt+0xe4>
 800b890:	4596      	cmp	lr, r2
 800b892:	d811      	bhi.n	800b8b8 <__ieee754_sqrt+0xe4>
 800b894:	f1be 0f00 	cmp.w	lr, #0
 800b898:	eb0e 000c 	add.w	r0, lr, ip
 800b89c:	da56      	bge.n	800b94c <__ieee754_sqrt+0x178>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	db54      	blt.n	800b94c <__ieee754_sqrt+0x178>
 800b8a2:	f101 0801 	add.w	r8, r1, #1
 800b8a6:	1a5b      	subs	r3, r3, r1
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	4596      	cmp	lr, r2
 800b8ac:	bf88      	it	hi
 800b8ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8b2:	eba2 020e 	sub.w	r2, r2, lr
 800b8b6:	4464      	add	r4, ip
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	3f01      	subs	r7, #1
 800b8bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b8c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b8c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b8c8:	d1dd      	bne.n	800b886 <__ieee754_sqrt+0xb2>
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	d01b      	beq.n	800b906 <__ieee754_sqrt+0x132>
 800b8ce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b97c <__ieee754_sqrt+0x1a8>
 800b8d2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b980 <__ieee754_sqrt+0x1ac>
 800b8d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8da:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8de:	f7f4 fc43 	bl	8000168 <__aeabi_dsub>
 800b8e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	f7f5 f86f 	bl	80009d0 <__aeabi_dcmple>
 800b8f2:	b140      	cbz	r0, 800b906 <__ieee754_sqrt+0x132>
 800b8f4:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8f8:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b900:	d126      	bne.n	800b950 <__ieee754_sqrt+0x17c>
 800b902:	463c      	mov	r4, r7
 800b904:	3501      	adds	r5, #1
 800b906:	106b      	asrs	r3, r5, #1
 800b908:	0864      	lsrs	r4, r4, #1
 800b90a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b90e:	07ea      	lsls	r2, r5, #31
 800b910:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b914:	bf48      	it	mi
 800b916:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800b91a:	4620      	mov	r0, r4
 800b91c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b920:	e76d      	b.n	800b7fe <__ieee754_sqrt+0x2a>
 800b922:	0ae3      	lsrs	r3, r4, #11
 800b924:	3915      	subs	r1, #21
 800b926:	0564      	lsls	r4, r4, #21
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0fa      	beq.n	800b922 <__ieee754_sqrt+0x14e>
 800b92c:	02d8      	lsls	r0, r3, #11
 800b92e:	d50a      	bpl.n	800b946 <__ieee754_sqrt+0x172>
 800b930:	f1c2 0020 	rsb	r0, r2, #32
 800b934:	fa24 f000 	lsr.w	r0, r4, r0
 800b938:	1e55      	subs	r5, r2, #1
 800b93a:	4094      	lsls	r4, r2
 800b93c:	4303      	orrs	r3, r0
 800b93e:	1b4a      	subs	r2, r1, r5
 800b940:	e776      	b.n	800b830 <__ieee754_sqrt+0x5c>
 800b942:	4611      	mov	r1, r2
 800b944:	e7f0      	b.n	800b928 <__ieee754_sqrt+0x154>
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	3201      	adds	r2, #1
 800b94a:	e7ef      	b.n	800b92c <__ieee754_sqrt+0x158>
 800b94c:	4688      	mov	r8, r1
 800b94e:	e7aa      	b.n	800b8a6 <__ieee754_sqrt+0xd2>
 800b950:	f7f4 fc0c 	bl	800016c <__adddf3>
 800b954:	e9da 8900 	ldrd	r8, r9, [sl]
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4640      	mov	r0, r8
 800b95e:	4649      	mov	r1, r9
 800b960:	f7f5 f82c 	bl	80009bc <__aeabi_dcmplt>
 800b964:	b120      	cbz	r0, 800b970 <__ieee754_sqrt+0x19c>
 800b966:	1ca1      	adds	r1, r4, #2
 800b968:	bf08      	it	eq
 800b96a:	3501      	addeq	r5, #1
 800b96c:	3402      	adds	r4, #2
 800b96e:	e7ca      	b.n	800b906 <__ieee754_sqrt+0x132>
 800b970:	3401      	adds	r4, #1
 800b972:	f024 0401 	bic.w	r4, r4, #1
 800b976:	e7c6      	b.n	800b906 <__ieee754_sqrt+0x132>
 800b978:	7ff00000 	.word	0x7ff00000
 800b97c:	200001e0 	.word	0x200001e0
 800b980:	200001e8 	.word	0x200001e8
 800b984:	00000000 	.word	0x00000000

0800b988 <__ieee754_log>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	460d      	mov	r5, r1
 800b996:	b087      	sub	sp, #28
 800b998:	da24      	bge.n	800b9e4 <__ieee754_log+0x5c>
 800b99a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b99e:	4304      	orrs	r4, r0
 800b9a0:	d108      	bne.n	800b9b4 <__ieee754_log+0x2c>
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	49cb      	ldr	r1, [pc, #812]	; (800bcd8 <__ieee754_log+0x350>)
 800b9aa:	f7f4 febf 	bl	800072c <__aeabi_ddiv>
 800b9ae:	b007      	add	sp, #28
 800b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	da04      	bge.n	800b9c2 <__ieee754_log+0x3a>
 800b9b8:	f7f4 fbd6 	bl	8000168 <__aeabi_dsub>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e7f3      	b.n	800b9aa <__ieee754_log+0x22>
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	4bc5      	ldr	r3, [pc, #788]	; (800bcdc <__ieee754_log+0x354>)
 800b9c6:	f7f4 fd87 	bl	80004d8 <__aeabi_dmul>
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b9d4:	48c2      	ldr	r0, [pc, #776]	; (800bce0 <__ieee754_log+0x358>)
 800b9d6:	4285      	cmp	r5, r0
 800b9d8:	dd06      	ble.n	800b9e8 <__ieee754_log+0x60>
 800b9da:	4610      	mov	r0, r2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	f7f4 fbc5 	bl	800016c <__adddf3>
 800b9e2:	e7e4      	b.n	800b9ae <__ieee754_log+0x26>
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	e7f5      	b.n	800b9d4 <__ieee754_log+0x4c>
 800b9e8:	152c      	asrs	r4, r5, #20
 800b9ea:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b9ee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b9f2:	440c      	add	r4, r1
 800b9f4:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800b9f8:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800b9fc:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800ba00:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800ba04:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800ba08:	ea41 0305 	orr.w	r3, r1, r5
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4619      	mov	r1, r3
 800ba10:	2200      	movs	r2, #0
 800ba12:	4bb4      	ldr	r3, [pc, #720]	; (800bce4 <__ieee754_log+0x35c>)
 800ba14:	f7f4 fba8 	bl	8000168 <__aeabi_dsub>
 800ba18:	1cab      	adds	r3, r5, #2
 800ba1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	f04f 0200 	mov.w	r2, #0
 800ba28:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800ba2c:	dc53      	bgt.n	800bad6 <__ieee754_log+0x14e>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f7f4 ffba 	bl	80009a8 <__aeabi_dcmpeq>
 800ba34:	b1d0      	cbz	r0, 800ba6c <__ieee754_log+0xe4>
 800ba36:	2c00      	cmp	r4, #0
 800ba38:	f000 8122 	beq.w	800bc80 <__ieee754_log+0x2f8>
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7f4 fce1 	bl	8000404 <__aeabi_i2d>
 800ba42:	a391      	add	r3, pc, #580	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	4606      	mov	r6, r0
 800ba4a:	460f      	mov	r7, r1
 800ba4c:	f7f4 fd44 	bl	80004d8 <__aeabi_dmul>
 800ba50:	a38f      	add	r3, pc, #572	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	4604      	mov	r4, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	f7f4 fd3b 	bl	80004d8 <__aeabi_dmul>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	e7b8      	b.n	800b9de <__ieee754_log+0x56>
 800ba6c:	a38a      	add	r3, pc, #552	; (adr r3, 800bc98 <__ieee754_log+0x310>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	4650      	mov	r0, sl
 800ba74:	4659      	mov	r1, fp
 800ba76:	f7f4 fd2f 	bl	80004d8 <__aeabi_dmul>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	2000      	movs	r0, #0
 800ba80:	4999      	ldr	r1, [pc, #612]	; (800bce8 <__ieee754_log+0x360>)
 800ba82:	f7f4 fb71 	bl	8000168 <__aeabi_dsub>
 800ba86:	4652      	mov	r2, sl
 800ba88:	4606      	mov	r6, r0
 800ba8a:	460f      	mov	r7, r1
 800ba8c:	465b      	mov	r3, fp
 800ba8e:	4650      	mov	r0, sl
 800ba90:	4659      	mov	r1, fp
 800ba92:	f7f4 fd21 	bl	80004d8 <__aeabi_dmul>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	f7f4 fd1b 	bl	80004d8 <__aeabi_dmul>
 800baa2:	4606      	mov	r6, r0
 800baa4:	460f      	mov	r7, r1
 800baa6:	b914      	cbnz	r4, 800baae <__ieee754_log+0x126>
 800baa8:	4632      	mov	r2, r6
 800baaa:	463b      	mov	r3, r7
 800baac:	e0a2      	b.n	800bbf4 <__ieee754_log+0x26c>
 800baae:	4620      	mov	r0, r4
 800bab0:	f7f4 fca8 	bl	8000404 <__aeabi_i2d>
 800bab4:	a374      	add	r3, pc, #464	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	4680      	mov	r8, r0
 800babc:	4689      	mov	r9, r1
 800babe:	f7f4 fd0b 	bl	80004d8 <__aeabi_dmul>
 800bac2:	a373      	add	r3, pc, #460	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	4640      	mov	r0, r8
 800bace:	4649      	mov	r1, r9
 800bad0:	f7f4 fd02 	bl	80004d8 <__aeabi_dmul>
 800bad4:	e0a7      	b.n	800bc26 <__ieee754_log+0x29e>
 800bad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bada:	f7f4 fb47 	bl	800016c <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4650      	mov	r0, sl
 800bae4:	4659      	mov	r1, fp
 800bae6:	f7f4 fe21 	bl	800072c <__aeabi_ddiv>
 800baea:	e9cd 0100 	strd	r0, r1, [sp]
 800baee:	4620      	mov	r0, r4
 800baf0:	f7f4 fc88 	bl	8000404 <__aeabi_i2d>
 800baf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafc:	4610      	mov	r0, r2
 800bafe:	4619      	mov	r1, r3
 800bb00:	f7f4 fcea 	bl	80004d8 <__aeabi_dmul>
 800bb04:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800bb08:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	460b      	mov	r3, r1
 800bb12:	4606      	mov	r6, r0
 800bb14:	460f      	mov	r7, r1
 800bb16:	f7f4 fcdf 	bl	80004d8 <__aeabi_dmul>
 800bb1a:	a361      	add	r3, pc, #388	; (adr r3, 800bca0 <__ieee754_log+0x318>)
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	4680      	mov	r8, r0
 800bb22:	4689      	mov	r9, r1
 800bb24:	f7f4 fcd8 	bl	80004d8 <__aeabi_dmul>
 800bb28:	a35f      	add	r3, pc, #380	; (adr r3, 800bca8 <__ieee754_log+0x320>)
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f7f4 fb1d 	bl	800016c <__adddf3>
 800bb32:	4642      	mov	r2, r8
 800bb34:	464b      	mov	r3, r9
 800bb36:	f7f4 fccf 	bl	80004d8 <__aeabi_dmul>
 800bb3a:	a35d      	add	r3, pc, #372	; (adr r3, 800bcb0 <__ieee754_log+0x328>)
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f7f4 fb14 	bl	800016c <__adddf3>
 800bb44:	4642      	mov	r2, r8
 800bb46:	464b      	mov	r3, r9
 800bb48:	f7f4 fcc6 	bl	80004d8 <__aeabi_dmul>
 800bb4c:	a35a      	add	r3, pc, #360	; (adr r3, 800bcb8 <__ieee754_log+0x330>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	f7f4 fb0b 	bl	800016c <__adddf3>
 800bb56:	4632      	mov	r2, r6
 800bb58:	463b      	mov	r3, r7
 800bb5a:	f7f4 fcbd 	bl	80004d8 <__aeabi_dmul>
 800bb5e:	a358      	add	r3, pc, #352	; (adr r3, 800bcc0 <__ieee754_log+0x338>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	4606      	mov	r6, r0
 800bb66:	460f      	mov	r7, r1
 800bb68:	4640      	mov	r0, r8
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7f4 fcb4 	bl	80004d8 <__aeabi_dmul>
 800bb70:	a355      	add	r3, pc, #340	; (adr r3, 800bcc8 <__ieee754_log+0x340>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f7f4 faf9 	bl	800016c <__adddf3>
 800bb7a:	4642      	mov	r2, r8
 800bb7c:	464b      	mov	r3, r9
 800bb7e:	f7f4 fcab 	bl	80004d8 <__aeabi_dmul>
 800bb82:	a353      	add	r3, pc, #332	; (adr r3, 800bcd0 <__ieee754_log+0x348>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f7f4 faf0 	bl	800016c <__adddf3>
 800bb8c:	4642      	mov	r2, r8
 800bb8e:	464b      	mov	r3, r9
 800bb90:	f7f4 fca2 	bl	80004d8 <__aeabi_dmul>
 800bb94:	460b      	mov	r3, r1
 800bb96:	4602      	mov	r2, r0
 800bb98:	4639      	mov	r1, r7
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7f4 fae6 	bl	800016c <__adddf3>
 800bba0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bba4:	9b05      	ldr	r3, [sp, #20]
 800bba6:	3551      	adds	r5, #81	; 0x51
 800bba8:	431d      	orrs	r5, r3
 800bbaa:	2d00      	cmp	r5, #0
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	dd48      	ble.n	800bc44 <__ieee754_log+0x2bc>
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	4b4c      	ldr	r3, [pc, #304]	; (800bce8 <__ieee754_log+0x360>)
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	4659      	mov	r1, fp
 800bbba:	f7f4 fc8d 	bl	80004d8 <__aeabi_dmul>
 800bbbe:	4652      	mov	r2, sl
 800bbc0:	465b      	mov	r3, fp
 800bbc2:	f7f4 fc89 	bl	80004d8 <__aeabi_dmul>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	4640      	mov	r0, r8
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	f7f4 facb 	bl	800016c <__adddf3>
 800bbd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbda:	f7f4 fc7d 	bl	80004d8 <__aeabi_dmul>
 800bbde:	4680      	mov	r8, r0
 800bbe0:	4689      	mov	r9, r1
 800bbe2:	b964      	cbnz	r4, 800bbfe <__ieee754_log+0x276>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	f7f4 fabc 	bl	8000168 <__aeabi_dsub>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	4659      	mov	r1, fp
 800bbf8:	f7f4 fab6 	bl	8000168 <__aeabi_dsub>
 800bbfc:	e6d7      	b.n	800b9ae <__ieee754_log+0x26>
 800bbfe:	a322      	add	r3, pc, #136	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc08:	f7f4 fc66 	bl	80004d8 <__aeabi_dmul>
 800bc0c:	a320      	add	r3, pc, #128	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	4604      	mov	r4, r0
 800bc14:	460d      	mov	r5, r1
 800bc16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc1a:	f7f4 fc5d 	bl	80004d8 <__aeabi_dmul>
 800bc1e:	4642      	mov	r2, r8
 800bc20:	464b      	mov	r3, r9
 800bc22:	f7f4 faa3 	bl	800016c <__adddf3>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	f7f4 fa9b 	bl	8000168 <__aeabi_dsub>
 800bc32:	4652      	mov	r2, sl
 800bc34:	465b      	mov	r3, fp
 800bc36:	f7f4 fa97 	bl	8000168 <__aeabi_dsub>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4629      	mov	r1, r5
 800bc42:	e7d9      	b.n	800bbf8 <__ieee754_log+0x270>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4650      	mov	r0, sl
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	f7f4 fa8c 	bl	8000168 <__aeabi_dsub>
 800bc50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc54:	f7f4 fc40 	bl	80004d8 <__aeabi_dmul>
 800bc58:	4606      	mov	r6, r0
 800bc5a:	460f      	mov	r7, r1
 800bc5c:	2c00      	cmp	r4, #0
 800bc5e:	f43f af23 	beq.w	800baa8 <__ieee754_log+0x120>
 800bc62:	a309      	add	r3, pc, #36	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc6c:	f7f4 fc34 	bl	80004d8 <__aeabi_dmul>
 800bc70:	a307      	add	r3, pc, #28	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	4604      	mov	r4, r0
 800bc78:	460d      	mov	r5, r1
 800bc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7e:	e727      	b.n	800bad0 <__ieee754_log+0x148>
 800bc80:	2000      	movs	r0, #0
 800bc82:	2100      	movs	r1, #0
 800bc84:	e693      	b.n	800b9ae <__ieee754_log+0x26>
 800bc86:	bf00      	nop
 800bc88:	fee00000 	.word	0xfee00000
 800bc8c:	3fe62e42 	.word	0x3fe62e42
 800bc90:	35793c76 	.word	0x35793c76
 800bc94:	3dea39ef 	.word	0x3dea39ef
 800bc98:	55555555 	.word	0x55555555
 800bc9c:	3fd55555 	.word	0x3fd55555
 800bca0:	df3e5244 	.word	0xdf3e5244
 800bca4:	3fc2f112 	.word	0x3fc2f112
 800bca8:	96cb03de 	.word	0x96cb03de
 800bcac:	3fc74664 	.word	0x3fc74664
 800bcb0:	94229359 	.word	0x94229359
 800bcb4:	3fd24924 	.word	0x3fd24924
 800bcb8:	55555593 	.word	0x55555593
 800bcbc:	3fe55555 	.word	0x3fe55555
 800bcc0:	d078c69f 	.word	0xd078c69f
 800bcc4:	3fc39a09 	.word	0x3fc39a09
 800bcc8:	1d8e78af 	.word	0x1d8e78af
 800bccc:	3fcc71c5 	.word	0x3fcc71c5
 800bcd0:	9997fa04 	.word	0x9997fa04
 800bcd4:	3fd99999 	.word	0x3fd99999
 800bcd8:	c3500000 	.word	0xc3500000
 800bcdc:	43500000 	.word	0x43500000
 800bce0:	7fefffff 	.word	0x7fefffff
 800bce4:	3ff00000 	.word	0x3ff00000
 800bce8:	3fe00000 	.word	0x3fe00000

0800bcec <_init>:
 800bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcee:	bf00      	nop
 800bcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf2:	bc08      	pop	{r3}
 800bcf4:	469e      	mov	lr, r3
 800bcf6:	4770      	bx	lr

0800bcf8 <_fini>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	bf00      	nop
 800bcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcfe:	bc08      	pop	{r3}
 800bd00:	469e      	mov	lr, r3
 800bd02:	4770      	bx	lr
